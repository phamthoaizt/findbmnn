oraclevm
r
virtualbox
r

user manual

version 6.1.14
c
2004-2020 oracle corporation
http://www.virtualbox.org

contents

preface i

1 first steps 1
1.1 why is virtualization useful? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.2 some terminology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.3 features overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.4 supported host operating systems . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.4.1 host cpu requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.5 installing oracle vm virtualbox and extension packs . . . . . . . . . . . . . . . 6
1.6 starting oracle vm virtualbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.7 creating your first virtual machine . . . . . . . . . . . . . . . . . . . . . . . . . 8
1.8 running your virtual machine . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
1.8.1 starting a new vm for the first time . . . . . . . . . . . . . . . . . . . 11
1.8.2 capturing and releasing keyboard and mouse . . . . . . . . . . . . . . 12
1.8.3 typing special characters . . . . . . . . . . . . . . . . . . . . . . . . . . 13
1.8.4 changing removable media . . . . . . . . . . . . . . . . . . . . . . . . 13
1.8.5 resizing the machine’s window . . . . . . . . . . . . . . . . . . . . . . 14
1.8.6 saving the state of the machine . . . . . . . . . . . . . . . . . . . . . . 14
1.9 using vm groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.10 snapshots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
1.10.1 taking, restoring, and deleting snapshots . . . . . . . . . . . . . . . . 16
1.10.2 snapshot contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
1.11 virtual machine conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
1.12 removing and moving virtual machines . . . . . . . . . . . . . . . . . . . . . . 19
1.13 cloning virtual machines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
1.14 importing and exporting virtual machines . . . . . . . . . . . . . . . . . . . . . 21
1.14.1 about the ovf format . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
1.14.2 importing an appliance in ovf format . . . . . . . . . . . . . . . . . . 22
1.14.3 exporting an appliance in ovf format . . . . . . . . . . . . . . . . . . 23
1.14.4 preparing for oracle cloud infrastructure integration . . . . . . . . . . 23
1.14.5 exporting an appliance to oracle cloud infrastructure . . . . . . . . . . 24
1.14.6 importing an instance from oracle cloud infrastructure . . . . . . . . . 26
1.14.7 the cloud proﬁle manager . . . . . . . . . . . . . . . . . . . . . . . . . 27
1.14.8 creating new cloud instances from a custom image . . . . . . . . . . . 29
1.15 global settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
1.16 alternative front-ends . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
1.17 soft keyboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
1.17.1 using the soft keyboard . . . . . . . . . . . . . . . . . . . . . . . . . . 31
1.17.2 creating a custom keyboard layout . . . . . . . . . . . . . . . . . . . . 32

2 installation details 33
2.1 installing on windows hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
2.1.1 prerequisites . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
2.1.2 performing the installation . . . . . . . . . . . . . . . . . . . . . . . . . 33
2.1.3 uninstallation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.1.4 unattended installation . . . . . . . . . . . . . . . . . . . . . . . . . . . 35

2

contents

2.1.5 public properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.2 installing on mac os x hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
2.2.1 performing the installation . . . . . . . . . . . . . . . . . . . . . . . . . 36
2.2.2 uninstallation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
2.2.3 unattended installation . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
2.3 installing on linux hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
2.3.1 prerequisites . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
2.3.2 the oracle vm virtualbox kernel modules . . . . . . . . . . . . . . . . 37
2.3.3 performing the installation . . . . . . . . . . . . . . . . . . . . . . . . . 38
2.3.4 the vboxusers group . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
2.3.5 starting oracle vm virtualbox on linux . . . . . . . . . . . . . . . . . . 41
2.4 installing on oracle solaris hosts . . . . . . . . . . . . . . . . . . . . . . . . . . 42
2.4.1 performing the installation . . . . . . . . . . . . . . . . . . . . . . . . . 42
2.4.2 the vboxuser group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
2.4.3 starting oracle vm virtualbox on oracle solaris . . . . . . . . . . . . . 43
2.4.4 uninstallation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
2.4.5 unattended installation . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
2.4.6 conﬁguring a zone for running oracle vm virtualbox . . . . . . . . . . 43

3 conﬁguring virtual machines 45
3.1 supported guest operating systems . . . . . . . . . . . . . . . . . . . . . . . . . 45
3.1.1 mac os x guests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
3.1.2 64-bit guests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
3.2 unattended guest installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
3.2.1 an example of unattended guest installation . . . . . . . . . . . . . . . 48
3.3 emulated hardware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
3.4 general settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.4.1 basic tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.4.2 advanced tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.4.3 description tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
3.4.4 disk encryption tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
3.5 system settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
3.5.1 motherboard tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
3.5.2 processor tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
3.5.3 acceleration tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
3.6 display settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
3.6.1 screen tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
3.6.2 remote display tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
3.6.3 recording tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
3.7 storage settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
3.8 audio settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
3.9 network settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
3.10 serial ports . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
3.11 usb support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
3.11.1 usb settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
3.11.2 implementation notes for windows and linux hosts . . . . . . . . . . . 62
3.12 shared folders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
3.13 user interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
3.14 alternative firmware (efi) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
3.14.1 video modes in efi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
3.14.2 specifying boot arguments . . . . . . . . . . . . . . . . . . . . . . . . . 66

4 guest additions 67
4.1 introduction to guest additions . . . . . . . . . . . . . . . . . . . . . . . . . . . 67

3

contents

4.2 installing and maintaining guest additions . . . . . . . . . . . . . . . . . . . . . 68
4.2.1 guest additions for windows . . . . . . . . . . . . . . . . . . . . . . . . 68
4.2.2 guest additions for linux . . . . . . . . . . . . . . . . . . . . . . . . . . 71
4.2.3 guest additions for oracle solaris . . . . . . . . . . . . . . . . . . . . . 73
4.2.4 guest additions for os/2 . . . . . . . . . . . . . . . . . . . . . . . . . . 74
4.3 shared folders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
4.3.1 manual mounting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
4.3.2 automatic mounting . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
4.4 drag and drop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
4.4.1 supported formats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
4.4.2 known limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
4.5 hardware-accelerated graphics . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
4.5.1 hardware 3d acceleration (opengl and direct3d 8/9) . . . . . . . . . 79
4.5.2 hardware 2d video acceleration for windows guests . . . . . . . . . . 80
4.6 seamless windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
4.7 guest properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
4.7.1 using guest properties to wait on vm events . . . . . . . . . . . . . . . 83
4.8 guest control file manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
4.8.1 using the guest control file manager . . . . . . . . . . . . . . . . . . . 84
4.9 guest control of applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
4.10 memory overcommitment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
4.10.1 memory ballooning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
4.10.2 page fusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86

5 virtual storage 88
5.1 hard disk controllers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
5.2 disk image files (vdi, vmdk, vhd, hdd) . . . . . . . . . . . . . . . . . . . . . 91
5.3 the virtual media manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
5.4 special image write modes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
5.5 differencing images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
5.6 cloning disk images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
5.7 host input/output caching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
5.8 limiting bandwidth for disk images . . . . . . . . . . . . . . . . . . . . . . . . . 99
5.9 cd/dvd support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
5.10 iscsi servers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
5.11 vboximg-mount: a utility for fuse mounting a virtual disk image . . . . . . . . 101
5.11.1 viewing detailed information about a virtual disk image . . . . . . . . 101
5.11.2 mounting a virtual disk image . . . . . . . . . . . . . . . . . . . . . . . 102

6 virtual networking 104
6.1 virtual networking hardware . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
6.2 introduction to networking modes . . . . . . . . . . . . . . . . . . . . . . . . . 105
6.3 network address translation (nat) . . . . . . . . . . . . . . . . . . . . . . . . . 106
6.3.1 conﬁguring port forwarding with nat . . . . . . . . . . . . . . . . . . 107
6.3.2 pxe booting with nat . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
6.3.3 nat limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
6.4 network address translation service . . . . . . . . . . . . . . . . . . . . . . . . 108
6.5 bridged networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
6.6 internal networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
6.7 host-only networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
6.8 udp tunnel networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
6.9 vde networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
6.10 limiting bandwidth for network input/output . . . . . . . . . . . . . . . . . . . 114
6.11 improving network performance . . . . . . . . . . . . . . . . . . . . . . . . . . 115

4

contents

7 remote virtual machines 117
7.1 remote display (vrdp support) . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
7.1.1 common third-party rdp viewers . . . . . . . . . . . . . . . . . . . . . 117
7.1.2 vboxheadless, the remote desktop server . . . . . . . . . . . . . . . . 118
7.1.3 step by step: creating a virtual machine on a headless server . . . . . 120
7.1.4 remote usb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
7.1.5 rdp authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
7.1.6 rdp encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
7.1.7 multiple connections to the vrdp server . . . . . . . . . . . . . . . . . 124
7.1.8 multiple remote monitors . . . . . . . . . . . . . . . . . . . . . . . . . 124
7.1.9 vrdp video redirection . . . . . . . . . . . . . . . . . . . . . . . . . . 124
7.1.10 vrdp customization . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
7.2 teleporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
7.3 vboxheadless . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126

8 vboxmanage 129
8.1 introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
8.2 commands overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
8.3 general options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
8.4 vboxmanage list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
8.5 vboxmanage showvminfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
8.6 vboxmanage registervm/unregistervm . . . . . . . . . . . . . . . . . . . . . . . 144
8.7 vboxmanage createvm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
8.8 vboxmanage modifyvm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
8.8.1 general settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
8.8.2 networking settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
8.8.3 miscellaneous settings . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
8.8.4 recording settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
8.8.5 remote machine settings . . . . . . . . . . . . . . . . . . . . . . . . . . 154
8.8.6 teleporting settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
8.8.7 debugging settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
8.8.8 usb card reader settings . . . . . . . . . . . . . . . . . . . . . . . . . 157
8.8.9 autostarting vms during host system boot . . . . . . . . . . . . . . . . 157
8.9 vboxmanage movevm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
8.10 vboxmanage import . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
8.10.1 import from ovf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
8.10.2 import from oracle cloud infrastructure . . . . . . . . . . . . . . . . . 159
8.11 vboxmanage export . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
8.11.1 export to ovf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
8.11.2 export to oracle cloud infrastructure . . . . . . . . . . . . . . . . . . . 161
8.12 vboxmanage startvm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
8.13 vboxmanage controlvm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
8.14 vboxmanage discardstate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
8.15 vboxmanage adoptstate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
8.16 vboxmanage closemedium . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
8.17 vboxmanage storageattach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
8.18 vboxmanage storagectl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
8.19 vboxmanage bandwidthctl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
8.20 vboxmanage showmediuminfo . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
8.21 vboxmanage createmedium . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
8.22 vboxmanage modifymedium . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
8.23 vboxmanage clonemedium . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
8.24 vboxmanage mediumproperty . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
8.25 vboxmanage encryptmedium . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180

5

contents

8.26 vboxmanage checkmediumpwd . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
8.27 vboxmanage convertfromraw . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
8.28 vboxmanage getextradata/setextradata . . . . . . . . . . . . . . . . . . . . . . . 181
8.29 vboxmanage setproperty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
8.30 vboxmanage usbﬁlter add/modify/remove . . . . . . . . . . . . . . . . . . . . . 183
8.31 vboxmanage guestproperty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
8.32 vboxmanage guestcontrol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
8.33 vboxmanage metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
8.34 vboxmanage natnetwork . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
8.35 vboxmanage hostonlyif . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
8.36 vboxmanage usbdevsource . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
8.37 vboxmanage unattended . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
8.38 vboxmanage snapshot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
8.39 vboxmanage clonevm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
8.40 vboxmanage sharedfolder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
8.41 vboxmanage extpack . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
8.42 vboxmanage dhcpserver . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
8.43 vboxmanage debugvm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
8.44 vboxmanage cloudproﬁle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
8.45 vboxmanage cloud . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
8.46 vboximg-mount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237

9 advanced topics 242
9.1 automated guest logins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
9.1.1 automated windows guest logins . . . . . . . . . . . . . . . . . . . . . 242
9.1.2 automated linux and unix guest logins . . . . . . . . . . . . . . . . . 243
9.2 advanced conﬁguration for windows guests . . . . . . . . . . . . . . . . . . . . 246
9.2.1 automated windows system preparation . . . . . . . . . . . . . . . . . 246
9.3 advanced conﬁguration for linux and oracle solaris guests . . . . . . . . . . . 247
9.3.1 manual setup of selected guest services on linux . . . . . . . . . . . . 247
9.3.2 guest graphics and mouse driver setup in depth . . . . . . . . . . . . 247
9.4 cpu hot-plugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
9.5 webcam passthrough . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
9.5.1 using a host webcam in the guest . . . . . . . . . . . . . . . . . . . . . 249
9.5.2 windows hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
9.5.3 mac os x hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
9.5.4 linux and oracle solaris hosts . . . . . . . . . . . . . . . . . . . . . . . 250
9.6 advanced display conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
9.6.1 custom vesa resolutions . . . . . . . . . . . . . . . . . . . . . . . . . 250
9.6.2 conﬁguring the maximum resolution of guests when using the
graphical frontend . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
9.7 advanced storage conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
9.7.1 using a raw host hard disk from a guest . . . . . . . . . . . . . . . . 251
9.7.2 conﬁguring the hard disk vendor product data (vpd) . . . . . . . . . 253
9.7.3 access iscsi targets using internal networking . . . . . . . . . . . . . 254
9.8 fine tuning the oracle vm virtualbox nat engine . . . . . . . . . . . . . . . . . 255
9.8.1 conﬁguring the address of a nat network interface . . . . . . . . . . . 255
9.8.2 conﬁguring the boot server (next server) of a nat network interface . 255
9.8.3 tuning tcp/ip buffers for nat . . . . . . . . . . . . . . . . . . . . . . . 255
9.8.4 binding nat sockets to a speciﬁc interface . . . . . . . . . . . . . . . . 255
9.8.5 enabling dns proxy in nat mode . . . . . . . . . . . . . . . . . . . . . 256
9.8.6 using the host’s resolver as a dns proxy in nat mode . . . . . . . . . 256
9.8.7 conﬁguring aliasing of the nat engine . . . . . . . . . . . . . . . . . . 257
9.9 conﬁguring the bios dmi information . . . . . . . . . . . . . . . . . . . . . . . 257

6

contents

9.10 conﬁguring custom acpi tables . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
9.11 fine tuning timers and time synchronization . . . . . . . . . . . . . . . . . . . 259
9.11.1 conﬁguring the guest time stamp counter (tsc) to reﬂect guest
execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
9.11.2 accelerate or slow down the guest clock . . . . . . . . . . . . . . . . . 259
9.11.3 tuning the guest additions time synchronization parameters . . . . . 260
9.11.4 disabling the guest additions time synchronization . . . . . . . . . . . 260
9.12 installing the alternate bridged networking driver on oracle solaris 11 hosts . 261
9.13 oracle vm virtualbox vnic templates for vlans on oracle solaris 11 hosts . . 261
9.14 conﬁguring multiple host-only network interfaces on oracle solaris hosts . . . 262
9.15 conﬁguring the oracle vm virtualbox coredumper on oracle solaris hosts . . . 262
9.16 oracle vm virtualbox and oracle solaris kernel zones . . . . . . . . . . . . . . 263
9.17 locking down the oracle vm virtualbox gui . . . . . . . . . . . . . . . . . . . . 264
9.17.1 customizing the virtualbox manager . . . . . . . . . . . . . . . . . . . 264
9.17.2 vm selector customization . . . . . . . . . . . . . . . . . . . . . . . . . 264
9.17.3 conﬁgure vm selector menu entries . . . . . . . . . . . . . . . . . . . 265
9.17.4 conﬁgure vm window menu entries . . . . . . . . . . . . . . . . . . . 266
9.17.5 conﬁgure vm window status bar entries . . . . . . . . . . . . . . . . . 273
9.17.6 conﬁgure vm window visual modes . . . . . . . . . . . . . . . . . . . 274
9.17.7 host key customization . . . . . . . . . . . . . . . . . . . . . . . . . . . 274
9.17.8 action when terminating the vm . . . . . . . . . . . . . . . . . . . . . 275
9.17.9 default action when terminating the vm . . . . . . . . . . . . . . . . . 276
9.17.10 action for handling a guru meditation . . . . . . . . . . . . . . . . . . 277
9.17.11 conﬁguring automatic mouse capturing . . . . . . . . . . . . . . . . . 277
9.17.12 requesting legacy full-screen mode . . . . . . . . . . . . . . . . . . . 278
9.17.13 removing certain modes of networking from the gui . . . . . . . . . 278
9.18 starting the oracle vm virtualbox web service automatically . . . . . . . . . . 279
9.18.1 linux: starting the web service with init . . . . . . . . . . . . . . . . . 279
9.18.2 oracle solaris: starting the web service with smf . . . . . . . . . . . . 279
9.18.3 mac os x: starting the web service with launchd . . . . . . . . . . . . 280
9.19 oracle vm virtualbox watchdog . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
9.19.1 memory ballooning control . . . . . . . . . . . . . . . . . . . . . . . . 281
9.19.2 host isolation detection . . . . . . . . . . . . . . . . . . . . . . . . . . 282
9.19.3 more information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
9.19.4 linux: starting the watchdog service with init . . . . . . . . . . . . . . 283
9.19.5 oracle solaris: starting the watchdog service with smf . . . . . . . . 283
9.20 other extension packs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
9.21 starting virtual machines during system boot . . . . . . . . . . . . . . . . . . . 284
9.21.1 linux: starting the autostart service with init . . . . . . . . . . . . . . 284
9.21.2 oracle solaris: starting the autostart service with smf . . . . . . . . . 285
9.21.3 mac os x: starting the autostart service with launchd . . . . . . . . . 285
9.21.4 windows: starting the autostart service . . . . . . . . . . . . . . . . . 286
9.22 oracle vm virtualbox expert storage management . . . . . . . . . . . . . . . . 287
9.23 handling of host power management events . . . . . . . . . . . . . . . . . . . . 287
9.24 passing through sse4.1/sse4.2 instructions . . . . . . . . . . . . . . . . . . . . 287
9.25 support for keyboard indicator synchronization . . . . . . . . . . . . . . . . . . 288
9.26 capturing usb trafﬁc for selected devices . . . . . . . . . . . . . . . . . . . . . 288
9.27 conﬁguring the heartbeat service . . . . . . . . . . . . . . . . . . . . . . . . . . 288
9.28 encryption of disk images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289
9.28.1 limitations of disk encryption . . . . . . . . . . . . . . . . . . . . . . . 289
9.28.2 encrypting disk images . . . . . . . . . . . . . . . . . . . . . . . . . . . 289
9.28.3 starting a vm with encrypted images . . . . . . . . . . . . . . . . . . . 290
9.28.4 decrypting encrypted images . . . . . . . . . . . . . . . . . . . . . . . 290

7

contents

9.29 paravirtualized debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
9.29.1 hyper-v debug options . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
9.30 pc speaker passthrough . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
9.31 accessing usb devices exposed over the network with usb/ip . . . . . . . . . . 294
9.31.1 setting up usb/ip support on a linux system . . . . . . . . . . . . . . 295
9.31.2 security considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
9.32 using hyper-v with oracle vm virtualbox . . . . . . . . . . . . . . . . . . . . . 296
9.33 nested virtualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
9.34 viso ﬁle format / rtisomaker . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296

10 technical background 303
10.1 where oracle vm virtualbox stores its files . . . . . . . . . . . . . . . . . . . . 303
10.1.1 the machine folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
10.1.2 global settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304
10.1.3 summary of conﬁguration data locations . . . . . . . . . . . . . . . . 304
10.1.4 oracle vm virtualbox xml files . . . . . . . . . . . . . . . . . . . . . . 304
10.2 oracle vm virtualbox executables and components . . . . . . . . . . . . . . . . 305
10.3 hardware virtualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307
10.4 details about hardware virtualization . . . . . . . . . . . . . . . . . . . . . . . 308
10.5 paravirtualization providers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
10.6 nested paging and vpids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309

11 oracle vm virtualbox programming interfaces 310

12 troubleshooting 311
12.1 procedures and tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
12.1.1 categorizing and isolating problems . . . . . . . . . . . . . . . . . . . . 311
12.1.2 collecting debugging information . . . . . . . . . . . . . . . . . . . . . 312
12.1.3 using the vboxbugreport command to collect debug information
automatically . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312
12.1.4 the built-in vm debugger . . . . . . . . . . . . . . . . . . . . . . . . . 313
12.1.5 vm core format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315
12.2 general troubleshooting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316
12.2.1 guest shows ide/sata errors for file-based images on slow host
file system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316
12.2.2 responding to guest ide/sata flush requests . . . . . . . . . . . . . . 316
12.2.3 performance variation with frequency boosting . . . . . . . . . . . . . 317
12.2.4 frequency scaling effect on cpu usage . . . . . . . . . . . . . . . . . . 317
12.2.5 inaccurate windows cpu usage reporting . . . . . . . . . . . . . . . . 317
12.2.6 poor performance caused by host power management . . . . . . . . . 317
12.2.7 gui: 2d video acceleration option is grayed out . . . . . . . . . . . . 318
12.3 windows guests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
12.3.1 no usb 3.0 support in windows 7 guests . . . . . . . . . . . . . . . . . 318
12.3.2 windows bluescreens after changing vm conﬁguration . . . . . . . . . 318
12.3.3 windows 0x101 bluescreens with smp enabled (ipi timeout) . . . . . 319
12.3.4 windows 2000 installation failures . . . . . . . . . . . . . . . . . . . . 319
12.3.5 how to record bluescreen information from windows guests . . . . . 319
12.3.6 no networking in windows vista guests . . . . . . . . . . . . . . . . . 319
12.3.7 windows guests may cause a high cpu load . . . . . . . . . . . . . . 320
12.3.8 long delays when accessing shared folders . . . . . . . . . . . . . . . 320
12.3.9 usb tablet coordinates wrong in windows 98 guests . . . . . . . . . . 320
12.3.10 windows guests are removed from an active directory domain
after restoring a snapshot . . . . . . . . . . . . . . . . . . . . . . . . . 320
12.3.11 windows 3.x limited to 64 mb ram . . . . . . . . . . . . . . . . . . . 320

8

contents

12.4 linux and x11 guests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
12.4.1 linux guests may cause a high cpu load . . . . . . . . . . . . . . . . . 321
12.4.2 buggy linux 2.6 kernel versions . . . . . . . . . . . . . . . . . . . . . . 321
12.4.3 shared clipboard, auto-resizing, and seamless desktop in x11 guests 321
12.5 oracle solaris guests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
12.5.1 certain oracle solaris 10 releases may take a long time to boot
with smp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
12.6 windows hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
12.6.1 vboxsvc out-of-process com server issues . . . . . . . . . . . . . . . 322
12.6.2 cd and dvd changes not recognized . . . . . . . . . . . . . . . . . . . 322
12.6.3 sluggish response when using microsoft rdp client . . . . . . . . . . 322
12.6.4 running an iscsi initiator and target on a single system . . . . . . . . 323
12.6.5 bridged networking adapters missing . . . . . . . . . . . . . . . . . . . 323
12.6.6 host-only networking adapters cannot be created . . . . . . . . . . . 324
12.7 linux hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
12.7.1 linux kernel module refuses to load . . . . . . . . . . . . . . . . . . . 324
12.7.2 linux host cd/dvd or floppy disk drive not found . . . . . . . . . . . 324
12.7.3 strange guest ide error messages when writing to cd or dvd . . . . . 324
12.7.4 vboxsvc ipc issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325
12.7.5 usb not working . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325
12.7.6 pax/grsec kernels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325
12.7.7 linux kernel vmalloc pool exhausted . . . . . . . . . . . . . . . . . . . 325
12.8 oracle solaris hosts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325
12.8.1 cannot start vm, not enough contiguous memory . . . . . . . . . . . 325

13 security guide 326
13.1 general security principles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
13.2 secure installation and conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . 326
13.2.1 installation overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
13.2.2 post installation conﬁguration . . . . . . . . . . . . . . . . . . . . . . . 327
13.3 security features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327
13.3.1 the security model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327
13.3.2 secure conﬁguration of virtual machines . . . . . . . . . . . . . . . . . 327
13.3.3 conﬁguring and using authentication . . . . . . . . . . . . . . . . . . . 328
13.3.4 potentially insecure operations . . . . . . . . . . . . . . . . . . . . . . 329
13.3.5 encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
13.4 security recommendations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
13.4.1 cve-2018-3646 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
13.4.2 cve-2018-12126, cve-2018-12127, cve-2018-12130, cve-2019-11091 331

14 known limitations 332
14.1 experimental features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
14.2 known issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332

15 change log 335
15.1 version 6.1.14 (2020-09-04) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
15.2 version 6.1.12 (2020-07-14) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
15.3 version 6.1.10 (2020-06-05) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
15.4 version 6.1.8 (2020-05-15) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
15.5 version 6.1.6 (2020-04-14) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
15.6 version 6.1.4 (2020-02-19) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
15.7 version 6.1.2 (2020-01-14) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
15.8 version 6.1.0 (2019-12-10) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
15.9 change logs for legacy versions . . . . . . . . . . . . . . . . . . . . . . . . . . . 342

9

contents

16 third-party materials and licenses 343
16.1 third-party materials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
16.2 third-party licenses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
16.2.1 gnu general public license (gpl) . . . . . . . . . . . . . . . . . . . . . 346
16.2.2 gnu lesser general public license (lgpl) . . . . . . . . . . . . . . . . 350
16.2.3 mozilla public license (mpl) . . . . . . . . . . . . . . . . . . . . . . . . 355
16.2.4 mit license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361
16.2.5 x consortium license (x11) . . . . . . . . . . . . . . . . . . . . . . . . 361
16.2.6 zlib license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361
16.2.7 openssl license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362
16.2.8 slirp license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
16.2.9 liblzf license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
16.2.10 libpng license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
16.2.11 lwip license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364
16.2.12 libxml license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364
16.2.13 libxslt licenses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365
16.2.14 gsoap public license version 1.3a . . . . . . . . . . . . . . . . . . . . . 365
16.2.15 chromium licenses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370
16.2.16 curl license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372
16.2.17 libgd license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373
16.2.18 bsd license from intel . . . . . . . . . . . . . . . . . . . . . . . . . . . 373
16.2.19 libjpeg license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374
16.2.20 x86 simd extension for ijg jpeg library license . . . . . . . . . . . . 374
16.2.21 freebsd license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375
16.2.22 netbsd license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375
16.2.23 pcre license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376
16.2.24 libfﬁ license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377
16.2.25 fltk license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377
16.2.26 expat license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377
16.2.27 fontconﬁg license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378
16.2.28 freetype license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378
16.2.29 vpx license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
16.2.30 opus license . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
16.2.31 fuse for macos license . . . . . . . . . . . . . . . . . . . . . . . . . . 381

17 oracle vm virtualbox privacy information 382

glossary 383

10

preface

the oracle vm virtualbox user manual provides an introduction to using oracle vm virtualbox.
the manual provides information on how to install oracle vm virtualbox and use it to create
and conﬁgure virtual machines.

audience

this document is intended for both new and existing users of oracle vm virtualbox. it is assumed
that readers are familiar with web technologies and have a general understanding of windows
and unix platforms.

related documents

the documentation for this product is available at:
https://docs.oracle.com/en/virtualization/virtualbox/index.html

conventions

the following text conventions are used in this document:

• boldface: boldface type indicates graphical user interface elements associated with an
action, or terms deﬁned in text or the glossary.
• italic: italic type indicates book titles, emphasis, or placeholder variables for which you
supply particular values.
• monospace : monospace type indicates commands within a paragraph, urls, code in ex-
amples, text that appears on the screen, or text that you enter.

documentation accessibility

for information about oracle’s commitment to accessibility, visit the oracle accessibility program
website at
http://www.oracle.com/pls/topic/lookup?ctx=acc&id=docacc.

access to oracle support

oracle customers that have purchased support have access to electronic support through my
oracle support. for information, visit
http://www.oracle.com/pls/topic/lookup?ctx=acc&id=info or visit
http://www.oracle.com/pls/topic/lookup?ctx=acc&id=trs if you are hearing impaired.

i

1 first steps

welcome to oracle vm virtualbox.
oracle vm virtualbox is a cross-platform virtualization application. what does that mean? for
one thing, it installs on your existing intel or amd-based computers, whether they are running
windows, mac os x, linux, or oracle solaris operating systems (oses). secondly, it extends the
capabilities of your existing computer so that it can run multiple oses, inside multiple virtual
machines, at the same time. as an example, you can run windows and linux on your mac,
run windows server 2016 on your linux server, run linux on your windows pc, and so on, all
alongside your existing applications. you can install and run as many virtual machines as you
like. the only practical limits are disk space and memory.
oracle vm virtualbox is deceptively simple yet also very powerful. it can run everywhere from
small embedded systems or desktop class machines all the way up to datacenter deployments
and even cloud environments.
the following screenshot shows how oracle vm virtualbox, installed on an apple mac os x
computer, is running windows server 2016 in a virtual machine window.

in this user manual, we will begin simply with a quick introduction to virtualization and how
to get your ﬁrst virtual machine running with the easy-to-use oracle vm virtualbox graphical
user interface. subsequent chapters will go into much more detail covering more powerful tools
and features, but fortunately, it is not necessary to read the entire user manual before you can
use oracle vm virtualbox.
you can ﬁnd a summary of oracle vm virtualbox’s capabilities in chapter 1.3, features
overview, page 3. for existing oracle vm virtualbox users who just want to ﬁnd out what is
new in this release, see the chapter 15, change log, page 335.

1

1 first steps

1.1 why is virtualization useful?

the techniques and features that oracle vm virtualbox provides are useful in the following
scenarios:

• running multiple operating systems simultaneously. oracle vm virtualbox enables you
to run more than one os at a time. this way, you can run software written for one os on
another, such as windows software on linux or a mac, without having to reboot to use it.
since you can conﬁgure what kinds of virtual hardware should be presented to each such
os, you can install an old os such as dos or os/2 even if your real computer’s hardware
is no longer supported by that os.
• easier software installations. software vendors can use virtual machines to ship entire
software conﬁgurations. for example, installing a complete mail server solution on a real
machine can be a tedious task. with oracle vm virtualbox, such a complex setup, often
called an appliance, can be packed into a virtual machine. installing and running a mail
server becomes as easy as importing such an appliance into oracle vm virtualbox.
• testing and disaster recovery. once installed, a virtual machine and its virtual hard disks
can be considered a container that can be arbitrarily frozen, woken up, copied, backed up,
and transported between hosts.
on top of that, with the use of another oracle vm virtualbox feature called snapshots, one
can save a particular state of a virtual machine and revert back to that state, if necessary.
this way, one can freely experiment with a computing environment. if something goes
wrong, such as problems after installing software or infecting the guest with a virus, you
can easily switch back to a previous snapshot and avoid the need of frequent backups and
restores.
any number of snapshots can be created, allowing you to travel back and forward in virtual
machine time. you can delete snapshots while a vm is running to reclaim disk space.
• infrastructure consolidation. virtualization can signiﬁcantly reduce hardware and elec-
tricity costs. most of the time, computers today only use a fraction of their potential power
and run with low average system loads. a lot of hardware resources as well as electricity
is thereby wasted. so, instead of running many such physical computers that are only par-
tially used, one can pack many virtual machines onto a few powerful hosts and balance the
loads between them.

1.2 some terminology

when dealing with virtualization, and also for understanding the following chapters of this doc-
umentation, it helps to acquaint oneself with a bit of crucial terminology, especially the following
terms:
• host operating system (host os). this is the os of the physical computer on which oracle
vm virtualbox was installed. there are versions of oracle vm virtualbox for windows,
mac os x, linux, and oracle solaris hosts. see chapter 1.4, supported host operating
systems, page 5.
most of the time, this manual discusses all oracle vm virtualbox versions together. there
may be platform-speciﬁc differences which we will point out where appropriate.
• guest operating system (guest os). this is the os that is running inside the virtual machine.
theoretically, oracle vm virtualbox can run any x86 os such as dos, windows, os/2,
freebsd, and openbsd. but to achieve near-native performance of the guest code on your
machine, we had to go through a lot of optimizations that are speciﬁc to certain oses. so

2

1 first steps

while your favorite os may run as a guest, we ofﬁcially support and optimize for a select
few, which include the most common oses.
see chapter 3.1, supported guest operating systems, page 45.
• virtual machine (vm). this is the special environment that oracle vm virtualbox creates
for your guest os while it is running. in other words, you run your guest os in a vm.
normally, a vm is shown as a window on your computer’s desktop. depending on which
of the various frontends of oracle vm virtualbox you use, the vm might be shown in full
screen mode or remotely on another computer.
internally, oracle vm virtualbox treats a vm as a set of parameters that specify its behavior.
some parameters describe hardware settings, such as the amount of memory and number
of cpus assigned. other parameters describe the state information, such as whether the
vm is running or saved.
you can view these vm settings in the virtualbox manager window, the settings dialog,
and by running the vboxmanage command. see chapter 8, vboxmanage, page 129.
• guest additions. this refers to special software packages which are shipped with oracle vm
virtualbox but designed to be installed inside a vm to improve performance of the guest
os and to add extra features. see chapter 4, guest additions, page 67.

1.3 features overview

the following is a brief outline of oracle vm virtualbox’s main features:

• portability. oracle vm virtualbox runs on a large number of 64-bit host operating systems.
see chapter 1.4, supported host operating systems, page 5.
oracle vm virtualbox is a so-called hosted hypervisor, sometimes referred to as a type 2
hypervisor. whereas a bare-metal or type 1 hypervisor would run directly on the hardware,
oracle vm virtualbox requires an existing os to be installed. it can thus run alongside
existing applications on that host.
to a very large degree, oracle vm virtualbox is functionally identical on all of the host
platforms, and the same ﬁle and image formats are used. this enables you to run virtual
machines created on one host on another host with a different host os. for example, you
can create a virtual machine on windows and then run it under linux.
in addition, virtual machines can easily be imported and exported using the open vir-
tualization format (ovf), an industry standard created for this purpose. you can even
import ovfs that were created with a different virtualization software. see chapter 1.14,
importing and exporting virtual machines, page 21.
for users of oracle cloud infrastructure the functionality extends to exporting and import-
ing virtual machines to and from the cloud. this simpliﬁes development of applications and
deployment to the production environment. see chapter 1.14.5, exporting an appliance to
oracle cloud infrastructure, page 24.
• guest additions: shared folders, seamless windows, 3d virtualization. the oracle
vm virtualbox guest additions are software packages which can be installed inside of sup-
ported guest systems to improve their performance and to provide additional integration
and communication with the host system. after installing the guest additions, a virtual
machine will support automatic adjustment of video resolutions, seamless windows, accel-
erated 3d graphics and more. see chapter 4, guest additions, page 67.
in particular, guest additions provide for shared folders, which let you access ﬁles on the
host system from within a guest machine. see chapter 4.3, shared folders, page 74.

3

1 first steps

• great hardware support. among other features, oracle vm virtualbox supports the fol-
lowing:
– guest multiprocessing (smp). oracle vm virtualbox can present up to 32 virtual
cpus to each virtual machine, irrespective of how many cpu cores are physically
present on your host.
– usb device support. oracle vm virtualbox implements a virtual usb controller and
enables you to connect arbitrary usb devices to your virtual machines without having
to install device-speciﬁc drivers on the host. usb support is not limited to certain
device categories. see chapter 3.11.1, usb settings, page 60.
– hardware compatibility. oracle vm virtualbox virtualizes a vast array of virtual
devices, among them many devices that are typically provided by other virtualization
platforms. that includes ide, scsi, and sata hard disk controllers, several virtual
network cards and sound cards, virtual serial and parallel ports and an input/output
advanced programmable interrupt controller (i/o apic), which is found in many
computer systems. this enables easy cloning of disk images from real machines and
importing of third-party virtual machines into oracle vm virtualbox.
– full acpi support. the advanced conﬁguration and power interface (acpi) is fully
supported by oracle vm virtualbox. this enables easy cloning of disk images from real
machines or third-party virtual machines into oracle vm virtualbox. with its unique
acpi power status support, oracle vm virtualbox can even report to acpi-aware guest
oses the power status of the host. for mobile systems running on battery, the guest
can thus enable energy saving and notify the user of the remaining power, for example
in full screen modes.
– multiscreen resolutions. oracle vm virtualbox virtual machines support screen res-
olutions many times that of a physical screen, allowing them to be spread over a large
number of screens attached to the host system.
– built-in iscsi support. this unique feature enables you to connect a virtual ma-
chine directly to an iscsi storage server without going through the host system. the
vm accesses the iscsi target directly without the extra overhead that is required for
virtualizing hard disks in container ﬁles. see chapter 5.10, iscsi servers, page 100.
– pxe network boot. the integrated virtual network cards of oracle vm virtualbox
fully support remote booting using the preboot execution environment (pxe).
• multigeneration branched snapshots. oracle vm virtualbox can save arbitrary snapshots
of the state of the virtual machine. you can go back in time and revert the virtual machine
to any such snapshot and start an alternative vm conﬁguration from there, effectively
creating a whole snapshot tree. see chapter 1.10, snapshots, page 16. you can create and
delete snapshots while the virtual machine is running.
• vm groups. oracle vm virtualbox provides a groups feature that enables the user to
organize and control virtual machines collectively, as well as individually. in addition to
basic groups, it is also possible for any vm to be in more than one group, and for groups
to be nested in a hierarchy. this means you can have groups of groups. in general, the
operations that can be performed on groups are the same as those that can be applied to
individual vms: start, pause, reset, close (save state, send shutdown, poweroff), discard
saved state, show in file system, sort.
• clean architecture and unprecedented modularity. oracle vm virtualbox has an ex-
tremely modular design with well-deﬁned internal programming interfaces and a clean
separation of client and server code. this makes it easy to control it from several interfaces
at once. for example, you can start a vm simply by clicking on a button in the oracle vm
virtualbox graphical user interface and then control that machine from the command line,
or even remotely. see chapter 1.16, alternative front-ends, page 30.

4

1 first steps

due to its modular architecture, oracle vm virtualbox can also expose its full functionality
and conﬁgurability through a comprehensive software development kit (sdk), which
enables integration of oracle vm virtualbox with other software systems. see chapter 11,
oracle vm virtualbox programming interfaces, page 310.
• remote machine display. the virtualbox remote desktop extension (vrde) enables
high-performance remote access to any running virtual machine. this extension supports
the remote desktop protocol (rdp) originally built into microsoft windows, with special
additions for full client usb support.
the vrde does not rely on the rdp server that is built into microsoft windows. instead,
the vrde is plugged directly into the virtualization layer. as a result, it works with guest
oses other than windows, even in text mode, and does not require application support in
the virtual machine either. the vrde is described in detail in chapter 7.1, remote display
(vrdp support), page 117.
on top of this special capacity, oracle vm virtualbox offers you more unique features:
– extensible rdp authentication. oracle vm virtualbox already supports winlogon
on windows and pam on linux for rdp authentication. in addition, it includes an
easy-to-use sdk which enables you to create arbitrary interfaces for other methods of
authentication. see chapter 7.1.5, rdp authentication, page 122.
– usb over rdp. using rdp virtual channel support, oracle vm virtualbox also enables
you to connect arbitrary usb devices locally to a virtual machine which is running
remotely on an oracle vm virtualbox rdp server. see chapter 7.1.4, remote usb,
page 121.

1.4 supported host operating systems

currently, oracle vm virtualbox runs on the following host oses:

• windows hosts (64-bit):
– windows 8.1
– windows 10 rtm (1507 / 2015 ltsb) build 10240
– windows 10 anniversary update (1607 / 2016 ltsb) build 14393
– windows 10 fall creators update (1709) build 16299
– windows 10 april 2018 update (1803) build 17134
– windows 10 october 2018 update (1809 / 2019 ltsc) build 17763
– windows 10 may 2019 update (19h1 / 1903) build 18362
– windows 10 november 2019 update (19h2 / 1909) build 18363
– windows server 2012
– windows server 2012 r2
– windows server 2016
– windows server 2019
• mac os x hosts (64-bit):
– 10.13 (high sierra)
– 10.14 (mojave)
– 10.15 (catalina)
intel hardware is required. see also chapter 14, known limitations, page 332.

5

1 first steps

• linux hosts (64-bit). includes the following:
– ubuntu 18.04 lts, 19.03 and 19.10
– debian gnu/linux 9 (“stretch”) and 10 (“buster”)
– oracle linux 6, 7 and 8
– red hat enterprise linux 6, 7 and 8
– fedora 30 and 31
– gentoo linux
– suse linux enterprise server 12 and 15
– opensuse leap 15.1
it should be possible to use oracle vm virtualbox on most systems based on linux kernel
2.6, 3.x, 4.x or 5.x using either the oracle vm virtualbox installer or by doing a manual
installation. see chapter 2.3, installing on linux hosts, page 36. however, the formally
tested and supported linux distributions are those for which we offer a dedicated package.
note that linux 2.4-based host oses are no longer supported.
• oracle solaris hosts (64-bit only). the following versions are supported with the restric-
tions listed in chapter 14, known limitations, page 332:
– oracle solaris 11

note that the above list is informal. oracle support for customers who have a support contract
is limited to a subset of the listed host oses. also, any feature which is marked as experimental
is not supported. feedback and suggestions about such features are welcome.

1.4.1 host cpu requirements
sse2 (streaming simd extensions 2) support is required for host cpus.

1.5 installing oracle vm virtualbox and extension packs

oracle vm virtualbox comes in many different packages, and installation depends on your host
os. if you have installed software before, installation should be straightforward. on each host
platform, oracle vm virtualbox uses the installation method that is most common and easy to
use. if you run into trouble or have special requirements, see chapter 2, installation details, page
33 for details about the various installation methods.
oracle vm virtualbox is split into the following components:

• base package. the base package consists of all open source components and is licensed
under the gnu general public license v2.
• extension packs. additional extension packs can be downloaded which extend the func-
tionality of the oracle vm virtualbox base package. currently, oracle provides a single
extension pack, available from: http://www.virtualbox.org . the extension pack pro-
vides the following added functionality:
1. the virtual usb 2.0 (ehci) device. see chapter 3.11.1, usb settings, page 60.
2. the virtual usb 3.0 (xhci) device. see chapter 3.11.1, usb settings, page 60.
3. virtualbox remote desktop protocol (vrdp) support. see chapter 7.1, remote display
(vrdp support), page 117.
4. host webcam passthrough. see chapter 9.5, webcam passthrough, page 249.

6

1 first steps

5. intel pxe boot rom.
6. disk image encryption with aes algorithm. see chapter 9.28, encryption of disk im-
ages, page 289.
oracle vm virtualbox extension packages have a .vbox-extpack ﬁle name extension. to
install an extension, simply double-click on the package ﬁle and a network operations
manager window is shown to guide you through the required steps.
to view the extension packs that are currently installed, start the virtualbox manager, as
shown in chapter 1.6, starting oracle vm virtualbox, page 7. from the file menu, select
preferences. in the window that displays, go to the extensions category. this shows you
the extensions which are currently installed, and enables you to remove a package or add
a new package.
alternatively, you can use the vboxmanage command line. see chapter 8.41, vboxmanage
extpack, page 212.

1.6 starting oracle vm virtualbox

after installation, you can start oracle vm virtualbox as follows:

• on a windows host, in the programs menu, click on the item in the virtualbox group. on
some windows platforms, you can also enter virtualbox in the search box of the start
menu.
• on a mac os x host, in the finder, double-click on the virtualbox item in the applications
folder. you may want to drag this item onto your dock.
• on a linux or oracle solaris host, depending on your desktop environment, an oracle vm
virtualbox item may have been placed in either the system or system tools group of your
applications menu. alternatively, you can enter virtualbox in a terminal window.

when you start oracle vm virtualbox for the ﬁrst time, a window like the following is dis-
played:

this window is called the virtualbox manager. the left pane will later list all your virtual
machines. since you have not yet created any virtual machines, this list is empty. the tools
button provides access to user tools, such as the virtual media manager.
the pane on the right displays the properties of the currently selected virtual machine. since
you do not have any machines yet, the pane displays a welcome message.
the buttons on the right pane are used to create and work with vms.

7

1 first steps

the following ﬁgure gives an idea of what oracle vm virtualbox might look like after you have
created some vms.

1.7 creating your first virtual machine

click new in the virtualbox manager window. a wizard is shown, to guide you through setting
up a new virtual machine (vm).

on the following pages, the wizard will ask you for the bare minimum of information that is
needed to create a vm, in particular:

1. the name of the vm you choose is shown in the machine list of the virtualbox manager
window and is also used for the vm’s ﬁles on disk.
be sure to assign each vm an informative name that describes the os and software running
on the vm. for example, windows 10 with visio .

8

1 first steps

2. the machine folder is the location where vms are stored on your computer. the default
folder location is shown.
3. for operating system type, select the os that you want to install. the supported oses
are grouped. if you want to install something very unusual that is not listed, select other.
depending on your selection, oracle vm virtualbox will enable or disable certain vm set-
tings that your guest os may require. this is particularly important for 64-bit guests. see
chapter 3.1.2, 64-bit guests, page 47. it is therefore recommended to always set it to the
correct value.
4. on the next page, select the memory (ram) that oracle vm virtualbox should allocate
every time the virtual machine is started. the amount of memory given here will be taken
away from your host machine and presented to the guest os, which will report this size as
the virtual computer’s installed ram.
choose this setting carefully. the memory you give to the vm will not be available to your
host os while the vm is running, so do not specify more than you can spare.
for example, if your host machine has 4 gb of ram and you enter 2048 mb as the amount
of ram for a particular virtual machine, you will only have 2 gb left for all the other
software on your host while the vm is running. if you run two vms at the same time, even
more memory will be allocated for the second vm, which may not even be able to start if
that memory is not available.
on the other hand, you should specify as much as your guest os and your applications will
require to run properly. a guest os may require at least 1 or 2 gb of memory to install and
boot up. for best performance, more memory than that may be required.
always ensure that the host os has enough ram remaining. if insufﬁcient ram remains,
the system might excessively swap memory to the hard disk, which effectively brings the
host system to a standstill.
as with the other settings, you can change this setting later, after you have created the vm.
5. next, you must specify a virtual hard disk for your vm.
there are many and potentially complicated ways in which oracle vm virtualbox can
provide hard disk space to a vm, see chapter 5, virtual storage, page 88, but the most
common way is to use a large image ﬁle on your physical hard disk, whose contents oracle
vm virtualbox presents to your vm as if it were a complete hard disk. this ﬁle then
represents an entire hard disk, so you can even copy it to another host and use it with
another oracle vm virtualbox installation.
the wizard displays the following window:

9

1 first steps

at this screen, you have the following options:
• to create a new, empty virtual hard disk, click the create button.
• you can pick an existing disk image ﬁle.
the drop-down list presented in the window lists all disk images which are currently
remembered by oracle vm virtualbox. these disk images are currently attached to a
virtual machine, or have been attached to a virtual machine.
alternatively, click on the small folder icon next to the drop-down list. in the dis-
played ﬁle dialog, you can click add to select any disk image ﬁle on your host disk.
if you are using oracle vm virtualbox for the ﬁrst time, you will want to create a new disk
image. click the create button.
this displays another window, the create virtual hard disk wizard wizard. this wizard
helps you to create a new disk image ﬁle in the new virtual machine’s folder.
oracle vm virtualbox supports the following types of image ﬁles:
• a dynamically allocated ﬁle only grows in size when the guest actually stores data
on its virtual hard disk. therefore, this ﬁle is small initially. as the drive is ﬁlled with
data, the ﬁle grows to the speciﬁed size.
• a ﬁxed-size ﬁle immediately occupies the ﬁle speciﬁed, even if only a fraction of
that virtual hard disk space is actually in use. while occupying much more space, a
ﬁxed-size ﬁle incurs less overhead and is therefore slightly faster than a dynamically
allocated ﬁle.
for details about the differences, see chapter 5.2, disk image files (vdi, vmdk, vhd, hdd),
page 91.
to prevent your physical hard disk (host os) from ﬁlling up, oracle vm virtualbox limits
the size of the image ﬁle. but the image ﬁle must be large enough to hold the contents of
the guest os and the applications you want to install. for a windows or linux guest, you
will probably need several gigabytes for any serious use. the limit of the image ﬁle size
can be changed later, see chapter 8.22, vboxmanage modifymedium, page 177.

after having selected or created your image ﬁle, click next to go to the next page.

10

1 first steps

6. click create, to create your new virtual machine. the virtual machine is displayed in the
list on the left side of the virtualbox manager window, with the name that you entered
initially.

note: after becoming familiar with the use of wizards, consider using the expert mode
available in some wizards. where available, this is selectable using a button, and
speeds up the process of using wizards.

1.8 running your virtual machine

to start a virtual machine, you have several options:
• double-click on the vm’s entry in the list in the virtualbox manager window.
• select the vm’s entry in the list in the virtualbox manager window, and click start at the
top of the window.
• go to the virtualbox vms folder in your system user’s home directory. find the subdirec-
tory of the machine you want to start and double-click on the machine settings ﬁle. this
ﬁle has a .vbox ﬁle extension.
starting a virtual machine displays a new window, and the virtual machine which you selected
will boot up. everything which would normally be seen on the virtual system’s monitor is shown
in the window. see the screenshot image in chapter 1, first steps, page 1.
in general, you can use the virtual machine as you would use a real computer. there are
couple of points worth mentioning however.

1.8.1 starting a new vm for the first time
when a vm is started for the ﬁrst time, the first start wizard, is displayed. this wizard helps
you to select an installation medium. since the vm is created empty, it would otherwise behave
just like a real computer with no os installed. it will do nothing and display an error message
that no bootable os was found.
for this reason, the wizard helps you to select a medium to install an os from.
• if you have physical cd or dvd media from which you want to install your guest os, such
as a windows installation cd or dvd, put the media into your host’s cd or dvd drive.
in the wizard’s drop-down list of installation media, select host drive with the correct
drive letter. in the case of a linux host, choose a device ﬁle. this will allow your vm to
access the media in your host drive, and you can proceed to install from there.
• if you have downloaded installation media from the internet in the form of an iso image
ﬁle such as with a linux distribution, you would normally burn this ﬁle to an empty cd or
dvd and proceed as described above. with oracle vm virtualbox however, you can skip
this step and mount the iso ﬁle directly. oracle vm virtualbox will then present this ﬁle
as a cd or dvd-rom drive to the virtual machine, much like it does with virtual hard disk
images.
in this case, the wizard’s drop-down list contains a list of installation media that were
previously used with oracle vm virtualbox.
if your medium is not in the list, especially if you are using oracle vm virtualbox for the
ﬁrst time, click the small folder icon next to the drop-down list to display a standard ﬁle
dialog. here you can pick an image ﬁle on your host disks.
after completing the choices in the wizard, you will be able to install your os.

11

1 first steps

1.8.2 capturing and releasing keyboard and mouse
oracle vm virtualbox provides a virtual usb tablet device to new virtual machines through
which mouse events are communicated to the guest os. if you are running a modern guest os
that can handle such devices, mouse support may work out of the box without the mouse being
captured as described below. see chapter 3.5.1, motherboard tab, page 52.
otherwise, if the virtual machine detects only standard ps/2 mouse and keyboard devices,
since the os in the virtual machine does not know that it is not running on a real computer, it
expects to have exclusive control over your keyboard and mouse. but unless you are running the
vm in full screen mode, your vm needs to share keyboard and mouse with other applications
and possibly other vms on your host.
after installing a guest os and before you install the guest additions, described later, either
your vm or the rest of your computer can “own” the keyboard and the mouse. both cannot own
the keyboard and mouse at the same time. you will see a second mouse pointer which is always
conﬁned to the limits of the vm window. you activate the vm by clicking inside it.
to return ownership of keyboard and mouse to your host os, oracle vm virtualbox reserves a
special key on your keyboard: the host key. by default, this is the right ctrl key on your keyboard.
on a mac host, the default host key is the left command key. you can change this default in the
oracle vm virtualbox global settings. see chapter 1.15, global settings, page 30. the current
setting for the host key is always displayed at the bottom right of your vm window.

this means the following:
• your keyboard is owned by the vm if the vm window on your host desktop has the key-
board focus. if you have many windows open in your guest os, the window that has the
focus in your vm is used. this means that if you want to enter text within your vm, click
on the title bar of your vm window ﬁrst.
to release keyboard ownership, press the host key. as explained above, this is typically the
right ctrl key.
note that while the vm owns the keyboard, some key sequences, such as alt+tab, will
no longer be seen by the host, but will go to the guest instead. after you press the host
key to reenable the host keyboard, all key presses will go through the host again, so that
sequences such as alt+tab will no longer reach the guest. for technical reasons it may
not be possible for the vm to get all keyboard input even when it does own the keyboard.
examples of this are the ctrl+alt+del sequence on windows hosts or single keys grabbed
by other applications on x11 hosts such as the gnome desktop locate pointer feature.
• your mouse is owned by the vm only after you have clicked in the vm window. the host
mouse pointer will disappear, and your mouse will drive the guest’s pointer instead of your
normal mouse pointer.
note that mouse ownership is independent of that of the keyboard. even after you have
clicked on a titlebar to be able to enter text into the vm window, your mouse is not neces-
sarily owned by the vm yet.
to release ownership of your mouse by the vm, press the host key.
as this behavior is inconvenient, oracle vm virtualbox provides a set of tools and device
drivers for guest systems called the oracle vm virtualbox guest additions. these tools make vm
keyboard and mouse operations much more seamless. most importantly, the guest additions
suppress the second “guest” mouse pointer and make your host mouse pointer work directly in
the guest. see chapter 4, guest additions, page 67.

12

1 first steps

1.8.3 typing special characters
some oses expect certain key combinations to initiate certain procedures. the key combinations
that you type into a vm might target the host os, the oracle vm virtualbox software, or the
guest os. the recipient of these keypresses depends on a number of factors, including the key
combination itself.

• host oses reserve certain key combinations for themselves. for example, you cannot use
the ctrl+alt+delete combination to reboot the guest os in your vm because this key
combination is usually hard-wired into the host os. so, even though both the windows
and linux oses intercept this key combination, only the host os would be rebooted.
on linux and oracle solaris hosts, which use the x window system, the key combination
ctrl+alt+backspace normally resets the x server and restarts the entire graphical user
interface. as the x server intercepts this combination, pressing it will usually restart your
host graphical user interface and kill all running programs, including oracle vm virtualbox,
in the process.
on linux hosts supporting virtual terminals, the key combination ctrl+alt+fx, where fx
is one of the function keys from f1 to f12, normally enables you to switch between virtual
terminals. as with ctrl+alt+delete, these combinations are intercepted by the host os
and therefore always switch terminals on the host.
if, instead, you want to send these key combinations to the guest os in the virtual machine,
you will need to use one of the following methods:
– use the items in the input, keyboard menu of the virtual machine window. this
menu includes the settings insert ctrl+alt+delete and insert ctrl+alt+backspace.
however, the latter setting affects only linux guests or oracle solaris guests.
this menu also includes an option for inserting the host key combination.
– use special key combinations with the host key, which is normally the right control
key. oracle vm virtualbox then translates the following key combinations for the vm:
∗ host key + del sends ctrl+alt+del to reboot the guest os.
∗ host key + backspace sends ctrl+alt+backspace to restart the graphical user
interface of a linux or oracle solaris guest.
∗ host key + function key. for example, use this key combination to simulate
ctrl+alt+fx to switch between virtual terminals in a linux guest.
• for some other keyboard combinations such as alt+tab to switch between open windows,
oracle vm virtualbox enables you to conﬁgure whether these combinations will affect the
host or the guest, if a virtual machine currently has the focus. this is a global setting for
all virtual machines and can be found under file, preferences, input.
• a soft keyboard can be used to input key combinations in the guest. see chapter 1.17, soft
keyboard, page 31.

1.8.4 changing removable media
while a virtual machine is running, you can change removable media in the devices menu of
the vm’s window. here you can select in detail what oracle vm virtualbox presents to your vm
as a cd, dvd, or ﬂoppy drive.
the settings are the same as those available for the vm in the settings dialog of the oracle vm
virtualbox main window. but as the settings dialog is disabled while the vm is in the running
or saved state, the devices menu saves you from having to shut down and restart the vm every
time you want to change media.

13

1 first steps

using the devices menu, you can attach the host drive to the guest or select a ﬂoppy or dvd
image, as described in chapter 3.7, storage settings, page 56.
the devices menu also includes an option for creating a virtual iso (viso) from selected ﬁles
on the host.

1.8.5 resizing the machine’s window
you can resize the vm’s window while that vm is running. when you do, the window is scaled
as follows:

1. if you have scaled mode enabled, then the virtual machine’s screen will be scaled to the
size of the window. this can be useful if you have many machines running and want to
have a look at one of them while it is running in the background. alternatively, it might
be useful to enlarge a window if the vm’s output screen is very small, for example because
you are running an old os in it.
to enable scaled mode, press host key + c, or select scaled mode from the view menu
in the vm window. to leave scaled mode, press host key + c again.
the aspect ratio of the guest screen is preserved when resizing the window. to ignore the
aspect ratio, press shift during the resize operation.
see chapter 14, known limitations, page 332 for additional remarks.
2. if you have the guest additions installed and they support automatic resizing, the guest
additions will automatically adjust the screen resolution of the guest os. for example, if
you are running a windows guest with a resolution of 1024x768 pixels and you then resize
the vm window to make it 100 pixels wider, the guest additions will change the windows
display resolution to 1124x768.
see chapter 4, guest additions, page 67.
3. otherwise, if the window is bigger than the vm’s screen, the screen will be centered. if it
is smaller, then scroll bars will be added to the machine window.

1.8.6 saving the state of the machine
when you click on the close button of your virtual machine window, at the top right of the
window, just like you would close any other window on your system, oracle vm virtualbox asks
you whether you want to save or power off the vm. as a shortcut, you can also press host key
+ q.

the difference between the three options is crucial. they mean the following:

14

1 first steps

• save the machine state: with this option, oracle vm virtualbox freezes the virtual ma-
chine by completely saving its state to your local disk.
when you start the vm again later, you will ﬁnd that the vm continues exactly where it
was left off. all your programs will still be open, and your computer resumes operation.
saving the state of a virtual machine is thus in some ways similar to suspending a laptop
computer by closing its lid.
• send the shutdown signal. this will send an acpi shutdown signal to the virtual machine,
which has the same effect as if you had pressed the power button on a real computer. this
should trigger a proper shutdown mechanism from within the vm.
• power off the machine: with this option, oracle vm virtualbox also stops running the
virtual machine, but without saving its state.

warning: this is equivalent to pulling the power plug on a real computer without
shutting it down properly. if you start the machine again after powering it off, your
os will have to reboot completely and may begin a lengthy check of its virtual system
disks. as a result, this should not normally be done, since it can potentially cause data
loss or an inconsistent state of the guest system on disk.

as an exception, if your virtual machine has any snapshots, see chapter 1.10, snapshots,
page 16, you can use this option to quickly restore the current snapshot of the virtual
machine. in that case, powering off the machine will not disrupt its state, but any changes
made since that snapshot was taken will be lost.

the discard button in the virtualbox manager window discards a virtual machine’s saved
state. this has the same effect as powering it off, and the same warnings apply.

1.9 using vm groups

vm groups enable the user to create ad hoc groups of vms, and to manage and perform functions
on them collectively, as well as individually.
the following ﬁgure shows vm groups displayed in virtualbox manager.

the following features are available for groups:

15

1 first steps

• create a group using the virtualbox manager. do one of the following:
– drag one vm on top of another vm.
– select multiple vms and select group from the right-click menu.
• create and manage a group using the command line. do one of the following:
– create a group and assign a vm. for example:
vboxmanage modifyvm "vm01" --groups "/testgroup"
this command creates a group “testgroup” and attaches the vm “vm01” to that group.
– detach a vm from the group, and delete the group if empty. for example:
vboxmanage modifyvm "vm01" --groups ""
this command detaches all groups from the vm “vm01” and deletes the empty group.
• create multiple groups. for example:

vboxmanage modifyvm "vm01" --groups "/testgroup,/testgroup2"

this command creates the groups “testgroup” and “testgroup2”, if they do not exist, and
attaches the vm “vm01” to both of them.
• create nested groups, having a group hierarchy. for example:

vboxmanage modifyvm "vm01" --groups "/testgroup/testgroup2"

this command attaches the vm “vm01” to the subgroup “testgroup2” of the “testgroup”
group.
• the following is a summary of group commands: start, pause, reset, close (save state,
send shutdown signal, poweroff), discard saved state, show in file system, sort.

1.10 snapshots

with snapshots, you can save a particular state of a virtual machine for later use. at any later
time, you can revert to that state, even though you may have changed the vm considerably since
then. a snapshot of a virtual machine is thus similar to a machine in saved state, but there can
be many of them, and these saved states are preserved.
to see the snapshots of a virtual machine, click on the machine name in virtualbox manager.
then click the list icon next to the machine name, and select snapshots. until you take a
snapshot of the machine, the list of snapshots will be empty except for the current state item,
which represents the “now” point in the lifetime of the virtual machine.

1.10.1 taking, restoring, and deleting snapshots
there are three operations related to snapshots, as follows:
1. take a snapshot. this makes a copy of the machine’s current state, to which you can go
back at any given time later.
• if your vm is running, select take snapshot from the machine pull-down menu of
the vm window.
• if your vm is in either the saved or the powered off state, as displayed next to the
vm name in the oracle vm virtualbox main window, click the list icon next to the
machine name and select snapshots. the snapshots window is shown. do one of the
following:

16

1 first steps

– click the take icon.
– right-click on the current state item in the list and select take.
in either case, a window is displayed prompting you for a snapshot name. this name is
purely for reference purposes to help you remember the state of the snapshot. for example,
a useful name would be “fresh installation from scratch, no guest additions”, or “service
pack 3 just installed”. you can also add a longer text in the description ﬁeld.
your new snapshot will then appear in the snapshots list. underneath your new snapshot,
you will see an item called current state, signifying that the current state of your vm is a
variation based on the snapshot you took earlier. if you later take another snapshot, you
will see that they are displayed in sequence, and that each subsequent snapshot is derived
from an earlier one.

oracle vm virtualbox imposes no limits on the number of snapshots you can take. the
only practical limitation is disk space on your host. each snapshot stores the state of the
virtual machine and thus occupies some disk space. see chapter 1.10.2, snapshot contents,
page 18 for details on what is stored in a snapshot.
2. restore a snapshot. in the list of snapshots, right-click on any snapshot you have taken
and select restore. by restoring a snapshot, you go back or forward in time. the current
state of the machine is lost, and the machine is restored to the exact state it was in when
the snapshot was taken.

note: restoring a snapshot will affect the virtual hard drives that are connected to
your vm, as the entire state of the virtual hard drive will be reverted as well. this
means also that all ﬁles that have been created since the snapshot and all other ﬁle
changes will be lost. in order to prevent such data loss while still making use of the
snapshot feature, it is possible to add a second hard drive in write-through mode using
the vboxmanage interface and use it to store your data. as write-through hard drives
are not included in snapshots, they remain unaltered when a machine is reverted. see
chapter 5.4, special image write modes, page 94.

to avoid losing the current state when restoring a snapshot, you can create a new snapshot
before the restore operation.
by restoring an earlier snapshot and taking more snapshots from there, it is even possible
to create a kind of alternate reality and to switch between these different histories of the
virtual machine. this can result in a whole tree of virtual machine snapshots, as shown in
the screenshot above.

17

1 first steps

3. delete a snapshot. this does not affect the state of the virtual machine, but only releases
the ﬁles on disk that oracle vm virtualbox used to store the snapshot data, thus freeing
disk space. to delete a snapshot, right-click on the snapshot name in the snapshots tree
and select delete. snapshots can be deleted even while a machine is running.

note: whereas taking and restoring snapshots are fairly quick operations, deleting a
snapshot can take a considerable amount of time since large amounts of data may need
to be copied between several disk image ﬁles. temporary disk ﬁles may also need large
amounts of disk space while the operation is in progress.

there are some situations which cannot be handled while a vm is running, and you will
get an appropriate message that you need to perform this snapshot deletion when the vm
is shut down.

1.10.2 snapshot contents
think of a snapshot as a point in time that you have preserved. more formally, a snapshot consists
of the following:

• the snapshot contains a complete copy of the vm settings, including the hardware con-
ﬁguration, so that when you restore a snapshot, the vm settings are restored as well.
for example, if you changed the hard disk conﬁguration or the vm’s system settings, that
change is undone when you restore the snapshot.
the copy of the settings is stored in the machine conﬁguration, an xml text ﬁle, and thus
occupies very little space.
• the complete state of all the virtual disks attached to the machine is preserved. going back
to a snapshot means that all changes that had been made to the machine’s disks, ﬁle by ﬁle
and bit by bit, will be undone as well. files that were since created will disappear, ﬁles that
were deleted will be restored, changes to ﬁles will be reverted.
strictly speaking, this is only true for virtual hard disks in “normal” mode. you can conﬁg-
ure disks to behave differently with snapshots, see chapter 5.4, special image write modes,
page 94. in technical terms, it is not the virtual disk itself that is restored when a snapshot
is restored. instead, when a snapshot is taken, oracle vm virtualbox creates differencing
images which contain only the changes since the snapshot were taken. when the snapshot
is restored, oracle vm virtualbox throws away that differencing image, thus going back to
the previous state. this is both faster and uses less disk space. for the details, which can
be complex, see chapter 5.5, differencing images, page 96.
creating the differencing image as such does not occupy much space on the host disk
initially, since the differencing image will initially be empty and grow dynamically later
with each write operation to the disk. the longer you use the machine after having created
the snapshot, however, the more the differencing image will grow in size.
• if you took a snapshot while the machine was running, the memory state of the machine
is also saved in the snapshot. this is in the same way that memory can be saved when you
close a vm window. when you restore such a snapshot, execution resumes at exactly the
point when the snapshot was taken.
the memory state ﬁle can be as large as the memory size of the vm and will therefore
occupy considerable disk space.

18

1 first steps

1.11 virtual machine conﬁguration

when you select a virtual machine from the list in the virtualbox manager window, you will see
a summary of that machine’s settings on the right.
clicking on settings displays a window, where you can conﬁgure many of the properties of
the selected vm. but be careful when changing vm settings. it is possible to change all vm set-
tings after installing a guest os, but certain changes might prevent a guest os from functioning
correctly if done after installation.

note: the settings button is disabled while a vm is either in the running or saved
state. this is because the settings dialog enables you to change fundamental charac-
teristics of the virtual machine that is created for your guest os. for example, the guest
os may not perform well if half of its memory is taken away. as a result, if the settings
button is disabled, shut down the current vm ﬁrst.

oracle vm virtualbox provides a wide range of parameters that can be changed for a virtual
machine. the various settings that can be changed in the settings window are described in
detail in chapter 3, conﬁguring virtual machines, page 45. even more parameters are available
when using the vboxmanage command line interface. see chapter 8, vboxmanage, page 129.

1.12 removing and moving virtual machines

you can remove a vm from oracle vm virtualbox or move the vm and its associated ﬁles, such
as disk images, to another location on the host.

• removing a vm. to remove a vm, right-click on the vm in the virtualbox manager’s
machine list and select remove.
the conﬁrmation dialog enables you to specify whether to only remove the vm from the
list of machines or to remove the ﬁles associated with the vm.
note that the remove menu item is disabled while a vm is running.
• moving a vm. to move a vm to a new location on the host, right-click on the vm in the
virtualbox manager’s machine list and select move.
the ﬁle dialog prompts you to specify a new location for the vm.
when you move a vm, oracle vm virtualbox conﬁguration ﬁles are updated automatically
to use the new location on the host.
note that the move menu item is disabled while a vm is running.
you can also use the vboxmanage movevm command to move a vm. see chapter 8.9, vbox-
manage movevm, page 158.

for information about removing or moving a disk image ﬁle from oracle vm virtualbox, see
chapter 5.3, the virtual media manager, page 92.

1.13 cloning virtual machines
you can create a full copy or a linked copy of an existing vm. this copy is called a clone. you
might use a cloned vm to experiment with a vm conﬁguration, to test different guest os levels,
or to back up a vm.
the clone virtual machine wizard guides you through the cloning process.

19

1 first steps

start the wizard by clicking clone in the right-click menu of the virtualbox manager’s machine
list or in the snapshots view of the selected vm.
specify a new name for the clone. you can choose a path for the cloned virtual machine,
otherwise oracle vm virtualbox uses the default machines folder.
the clone type option speciﬁes whether to create a clone linked to the source vm or to create
a fully independent clone:

• full clone: copies all dependent disk images to the new vm folder. a full clone can
operate fully without the source vm.
• linked clone: creates new differencing disk images based on the source vm disk images.
if you select the current state of the source vm as the clone point, oracle vm virtualbox
creates a new snapshot.

the snapshots option speciﬁes whether to create a clone of the current machine state only or
of everything.

• everything: clones the current machine state and all its snapshots.
• current machine state and all children:. clones a vm snapshot and all its child snap-
shots.

the following clone options are available:

• mac address policy: speciﬁes how to retain network card mac addresses when cloning
the vm.
for example, the generate new mac addresses for all network adapters value assigns
a new mac address to each network card during cloning. this is the default setting. this
is the best option when both the source vm and the cloned vm must operate on the same
network. other values enable you to retain the existing mac addresses in the cloned vm.
• keep disk names: retains the disk image names when cloning the vm.
• keep hardware uuids: retains the hardware universally unique identiﬁers (uuids) when
cloning the vm.

the duration of the clone operation depends on the size and number of attached disk images.
in addition, the clone operation saves all the differencing disk images of a snapshot.
note that the clone menu item is disabled while a machine is running.
you can also use the vboxmanage clonevm command to clone a vm. see chapter 8.39, vbox-
manage clonevm, page 208.

20

1 first steps

1.14 importing and exporting virtual machines

oracle vm virtualbox can import and export virtual machines in the following formats:

• open virtualization format (ovf). this is the industry-standard format. see chapter
1.14.1, about the ovf format, page 21.
• cloud service formats. export to and import from cloud services such as oracle cloud
infrastructure is supported. see the following topics:
– chapter 1.14.5, exporting an appliance to oracle cloud infrastructure, page 24
– chapter 1.14.6, importing an instance from oracle cloud infrastructure, page 26
before using oracle vm virtualbox with oracle cloud infrastructure there are some initial
conﬁguration steps you need to consider. see chapter 1.14.4, preparing for oracle cloud
infrastructure integration, page 23.
oracle vm virtualbox can also be used to create new instances from a custom image stored
on oracle cloud infrastructure. see chapter 1.14.8, creating new cloud instances from a
custom image, page 29

1.14.1 about the ovf format
ovf is a cross-platform standard supported by many virtualization products which enables the
creation of ready-made virtual machines that can then be imported into a hypervisor such as
oracle vm virtualbox. oracle vm virtualbox makes ovf import and export easy to do, using the
virtualbox manager window or the command-line interface.
using ovf enables packaging of virtual appliances. these are disk images, together with con-
ﬁguration settings that can be distributed easily. this way one can offer complete ready-to-use
software packages, including oses with applications, that need no conﬁguration or installation
except for importing into oracle vm virtualbox.

note: the ovf standard is complex, and support in oracle vm virtualbox is an ongoing
process. in particular, no guarantee is made that oracle vm virtualbox supports all
appliances created by other virtualization software. for a list of known limitations, see
chapter 14, known limitations, page 332.

appliances in ovf format can appear in the following variants:

• they can come in several ﬁles, as one or several disk images, typically in the widely-used
vmdk format. see chapter 5.2, disk image files (vdi, vmdk, vhd, hdd), page 91. they
also include a textual description ﬁle in an xml dialect with an .ovf extension. these ﬁles
must then reside in the same directory for oracle vm virtualbox to be able to import them.
• alternatively, the above ﬁles can be packed together into a single archive ﬁle, typically
with an .ova extension. such archive ﬁles use a variant of the tar archive format and can
therefore be unpacked outside of oracle vm virtualbox with any utility that can unpack
standard tar ﬁles.

note: ovf cannot describe snapshots that were taken for a virtual machine. as a
result, when you export a virtual machine that has snapshots, only the current state of
the machine will be exported. the disk images in the export will have a ﬂattened state
identical to the current state of the virtual machine.

21

1 first steps

1.14.2 importing an appliance in ovf format
the following steps show how to import an appliance in ovf format.

1. double-click on the ovf or ova ﬁle.
oracle vm virtualbox creates ﬁle type associations automatically for any ovf and ova ﬁles
on your host os.
2. select file, import appliance from the virtualbox manager window.
from the ﬁle dialog, go to the ﬁle with either the .ovf or the .ova ﬁle extension.
click import to open the appliance settings screen.

this screen shows the vms described in the ovf or ova ﬁle and enables you to change the
vm settings.
by default, membership of vm groups is preserved on import for vms that were initially
exported from oracle vm virtualbox. you can change this behavior by using the primary
group setting for the vm.
the following global settings apply to all of the vms that you import:
• base folder: speciﬁes the directory on the host in which to store the imported vms.
if an appliance has multiple vms, you can specify a different directory for each vm by
editing the base folder setting for the vm.
• mac address policy: reinitializes the mac addresses of network cards in your vms
prior to import, by default. you can override the default behavior and preserve the
mac addresses on import.
• import hard drives as vdi: imports hard drives in the vdi format rather than in the
default vmdk format.

22

1 first steps

3. click import to import the appliance.
oracle vm virtualbox copies the disk images and creates local vms with the settings de-
scribed on the appliance settings screen. the imported vms are shown in the list of vms
in virtualbox manager.
because disk images are large, the vmdk images that are included with virtual appliances
are shipped in a compressed format that cannot be used directly by vms. so, the images
are ﬁrst unpacked and copied, which might take several minutes.

you can use the vboxmanage import command to import an appliance. see chapter 8.10,
vboxmanage import, page 158.

1.14.3 exporting an appliance in ovf format
the following steps show how to export an appliance in ovf format.

1. select file, export appliance to open the export virtual appliance wizard.
from the initial window, you can combine several vms into an ovf appliance.
select one or more vms to export, and click next.
2. the appliance settings screen enables you to select the following settings:
• format: selects the open virtualization format value for the output ﬁles.
the oracle cloud infrastructure value exports the appliance to oracle cloud infras-
tructure. see chapter 1.14.5, exporting an appliance to oracle cloud infrastructure,
page 24.
• file: selects the location in which to store the exported ﬁles.
• mac address policy: speciﬁes whether to retain or reassign network card mac ad-
dresses on export.
• write manifest file: enables you to include a manifest ﬁle in the exported archive
ﬁle.
• include iso image files: enables you to include iso image ﬁles in the exported
archive ﬁle.
3. click next to show the virtual system settings screen.
you can edit settings for the virtual appliance. for example, you can change the name of
the virtual appliance or add product information, such as vendor details or license text.
double-click the appropriate ﬁeld to change its value.
4. click export to begin the export process. note that this operation might take several
minutes.

you can use the vboxmanage export command to export an appliance. see chapter 8.11,
vboxmanage export, page 160.

1.14.4 preparing for oracle cloud infrastructure integration
there are some common conﬁguration steps you need to take before using oracle vm virtualbox
to integrate with your oracle cloud infrastructure account.

• create a key pair. generate an api signing key pair that is used for api requests to oracle
cloud infrastructure.

23

1 first steps

– the key pair is usually installed in the .oci folder in your home directory. for exam-
ple, ~/.oci on a linux system.
– upload the public key of the key pair to the cloud service.
for step-by-step instructions for creating and uploading an api signing key for oracle cloud
infrastructure, see:
https://docs.cloud.oracle.com/iaas/content/api/concepts/apisigningkey.
htm#how

• create a cloud proﬁle. the cloud proﬁle contains resource identiﬁers for your cloud
account, such as your user ocid, and the ﬁngerprint for your public key. you can create a
cloud proﬁle in the following ways:
– automatically, by using the cloud proﬁle manager. see chapter 1.14.7, the cloud
proﬁle manager, page 27.
– automatically, by using the vboxmanage cloudprofile command. see chapter 8.44,
vboxmanage cloudproﬁle, page 229.
– manually, by creating an oci_config ﬁle in your oracle vm virtualbox global conﬁg-
uration directory. for example, this is $home/.config/virtualbox/oci_config on
a linux host.
– manually, by creating a config ﬁle in your oracle cloud infrastructure conﬁguration
directory. for example, this is $home/.oci/config on a linux host.
this is the same ﬁle that is used by the oracle cloud infrastructure command line
interface.
oracle vm virtualbox automatically uses the config ﬁle if no cloud proﬁle ﬁle is
present in your global conﬁguration directory. alternatively, you can import this ﬁle
manually into the cloud proﬁle manager.
for more information about the cloud proﬁle settings used by oracle cloud infrastructure
see:
https://docs.cloud.oracle.com/iaas/content/api/concepts/sdkconfig.htm

• custom linux images. to export a custom linux image, prepare the vm as described
here:
https://docs.cloud.oracle.com/iaas/content/compute/tasks/
importingcustomimagelinux.htm

• subnets. when exporting a vm to cloud, ensure that the subnets that are used by source
vms are available in the target compartment on the cloud service.

1.14.5 exporting an appliance to oracle cloud infrastructure
oracle vm virtualbox supports the export of vms to an oracle cloud infrastructure service. the
exported vm is stored on oracle cloud infrastructure as a custom image. you can conﬁgure
whether a cloud instance is created and started after the export process has completed.
before you can export a vm to oracle cloud infrastructure ensure that you have done the
required preconﬁguration tasks, as described in chapter 1.14.4, preparing for oracle cloud in-
frastructure integration, page 23.
perform the following steps to export a vm to oracle cloud infrastructure:

1. select file, export appliance to open the export virtual appliance wizard.
select a vm to export and click next to open the appliance settings screen.

24

1 first steps

2. from the format drop-down list, select oracle cloud infrastructure.
in the account drop-down list, select your oracle cloud infrastructure account.
you can set up oracle cloud infrastructure accounts by using the cloud proﬁle manager.
the list after the account ﬁeld shows the proﬁle settings for your cloud account.

in the machine creation ﬁeld, select an option to conﬁgure settings for a cloud instance
created when you export to oracle cloud infrastructure. the options enable you to do one
of the following:
• conﬁgure settings for the cloud instance after you have ﬁnished exporting the vm.
• conﬁgure settings for the cloud instance before you start to export the vm.
• do not create a cloud instance when you export the vm.
click next to make an api request to the oracle cloud infrastructure service and open the
virtual system settings screen.
3. optionally edit storage settings used for the exported virtual machine in oracle cloud
infrastructure. you can change the following settings:
• the name of the bucket used to store the exported ﬁles.
• whether to store the custom image in oracle cloud infrastructure.
• the name for the custom image in oracle cloud infrastructure.
• the launch mode for the custom image.
paravirtualized mode gives improved performance and should be suitable for most
oracle vm virtualbox vms.
emulated mode is suitable for legacy os images.
click export to export the vm to oracle cloud infrastructure.
depending on the selection in the machine creation ﬁeld, the cloud virtual machine set-
tings screen may be displayed before or after export. this screen enables you to conﬁgure
settings for the cloud instance, such as shape and disk size.
click create. the vm is exported to oracle cloud infrastructure.
depending on the machine creation setting, a cloud instance may be started after upload
to oracle cloud infrastructure is completed.

25

1 first steps

4. monitor the export process by using the oracle cloud infrastructure console.

you can also use the vboxmanage export command to export a vm to oracle cloud infras-
tructure. see chapter 8.11.2, export to oracle cloud infrastructure, page 161.

1.14.6 importing an instance from oracle cloud infrastructure
oracle vm virtualbox supports the import of cloud instances from an oracle cloud infrastructure
service.
before you can import an instance from oracle cloud infrastructure ensure that you have done
the required preconﬁguration tasks, as described in chapter 1.14.4, preparing for oracle cloud
infrastructure integration, page 23.
perform the following steps to import an instance from oracle cloud infrastructure:

1. select file, import appliance to open the import virtual appliance wizard.
in the source drop-down list, select oracle cloud infrastructure.
in the account drop-down list, select your oracle cloud infrastructure account.
you can set up oracle cloud infrastructure accounts by using the cloud proﬁle manager.
the list after the account ﬁeld shows the proﬁle settings for your cloud account.
choose the required cloud instance from the list in the machines ﬁeld.
click next to make an api request to the oracle cloud infrastructure service and open the
appliance settings screen.
2. optionally edit settings for the new local virtual machine.
for example, you can edit the vm name and description.

click import to import the instance from the cloud service.
3. monitor the import process by using the oracle cloud infrastructure console.

you can also use the vboxmanage import command to import an instance from oracle cloud
infrastructure. see chapter 8.10.2, import from oracle cloud infrastructure, page 159.

26

1 first steps

importing an instance: overview of events
the following describes the sequence of events when you import an instance from oracle cloud
infrastructure.

• a custom image is created from the boot volume of the instance.
• the custom image is exported to an oracle cloud infrastructure object and is stored using
object storage in the bucket speciﬁed by the user.
• the oracle cloud infrastructure object is downloaded to the local host. the object is a tar
archive which contains a boot volume of the instance in qcow2 format and a json ﬁle
containing metadata related to the instance.
• the boot volume of the instance is extracted from the archive and a new vmdk image
is created by converting the boot volume into the vmdk format. the vmdk image is
registered with oracle vm virtualbox.
• a new vm is created using the vmdk image for the cloud instance.
by default, the new vm is not started after import from oracle cloud infrastructure.
• the downloaded tar archive is deleted after a successful import.

1.14.7 the cloud proﬁle manager
the cloud proﬁle manager is a component of oracle vm virtualbox that enables you to create,
edit, and manage cloud proﬁles for your cloud service accounts.

27

1 first steps

to open the cloud proﬁle manager select file, cloud proﬁle manager from the virtualbox
manager window.
you can use the cloud proﬁle manager to create a new cloud proﬁle automatically or to create
a cloud proﬁle by importing settings from your oracle cloud infrastructure conﬁguration ﬁle.
perform the following steps to create a new cloud proﬁle automatically:

1. click the add icon and specify a name for the proﬁle.
2. click properties and specify the following property values for the proﬁle:
• compartment ocid
• fingerprint of the public key
• location of the private key on the client device
• (optional) passphrase for the private key, if the key is encrypted
• region ocid
• tenancy ocid
• user ocid
some of these are settings for your oracle cloud infrastructure account, which you can
view from the oracle cloud infrastructure console.
3. click apply to save your changes.
the cloud proﬁle settings are saved in the oci_config ﬁle in your oracle vm virtualbox
global settings directory.

perform the following steps to import an existing oracle cloud infrastructure conﬁguration
ﬁle:

1. ensure that a config ﬁle is present in your oracle cloud infrastructure conﬁguration di-
rectory. for example, this is $home/.oci/config on a linux host.
2. click the import icon to open a dialog that prompts you to import cloud proﬁles from
external ﬁles.

warning: this action overwrites any cloud proﬁles that are in your oracle vm
virtualbox global settings directory.

3. click import.
your cloud proﬁle settings are saved to the oci_config ﬁle in your oracle vm virtualbox
global settings directory.
4. click properties to show the cloud proﬁle settings.
double-click on the appropriate ﬁeld to change the value.
5. click apply to save your changes.

28

1 first steps

1.14.8 creating new cloud instances from a custom image
you can use oracle vm virtualbox to create new instances from a custom image on your cloud
service.
chapter 1.14.5, exporting an appliance to oracle cloud infrastructure, page 24 describes how
to create a custom image when you are exporting a vm to oracle cloud infrastructure. using a
custom image means that you can quickly create cloud instances without having to upload your
image to the cloud service every time.
before you can create a new cloud instance in oracle cloud infrastructure ensure that you
have done the required preconﬁguration tasks, as described in chapter 1.14.4, preparing for
oracle cloud infrastructure integration, page 23.
perform the following steps to create a new cloud instance on oracle cloud infrastructure:
1. select file, new cloud vm to open the create cloud virtual machine wizard.
2. from the destination drop-down list, select oracle cloud infrastructure.
in the account drop-down list, select your oracle cloud infrastructure account.
you can set up oracle cloud infrastructure accounts by using the cloud proﬁle manager.
the list after the account ﬁeld shows the proﬁle settings for your cloud account.
in the images list, select from the custom images available on oracle cloud infrastructure.

click next to make an api request to the oracle cloud infrastructure service and open the
cloud virtual machine settings screen.
3. optionally edit settings used for the instance on oracle cloud infrastructure.
for example, you can edit the disk size and shape used for the vm instance and the
networking conﬁguration.
click create to create the new cloud instance.
4. monitor the instance creation process by using the oracle cloud infrastructure console.
you can also use the vboxmanage cloud instance command to create and manage instances
on a cloud service. see chapter 8.45, vboxmanage cloud, page 231.

29

1 first steps

1.15 global settings

the global settings dialog can be displayed using the file menu, by clicking the preferences
item. this dialog offers a selection of settings, most of which apply to all virtual machines of the
current user. the extensions option applies to the entire system.
the following settings are available:

• general. enables the user to specify the default folder or directory for vm ﬁles, and the
vrdp authentication library.
• input. enables the user to specify the host key. this is the key that toggles whether the
cursor is in the focus of the vm or the host os windows, see chapter 1.8.2, capturing and
releasing keyboard and mouse, page 12. the host key is also used to trigger certain vm
actions, see chapter 1.8.3, typing special characters, page 13.
• update. enables the user to specify various settings for automatic updates.
• language. enables the user to specify the gui language.
• display. enables the user to specify the screen resolution, and its width and height. a
default scale factor can be speciﬁed for all guest screens.
• network. enables the user to conﬁgure the details of host only networks.
• extensions. enables the user to list and manage the installed extension packages.
• proxy. enables the user to conﬁgure a http proxy server.

1.16 alternative front-ends
as brieﬂy mentioned in chapter 1.3, features overview, page 3, oracle vm virtualbox has a very
ﬂexible internal design that enables you to use multiple interfaces to control the same virtual
machines. for example, you can start a virtual machine with the virtualbox manager window
and then stop it from the command line. with oracle vm virtualbox’s support for the remote
desktop protocol (rdp), you can even run virtual machines remotely on a headless server and
have all the graphical output redirected over the network.
the following front-ends are shipped in the standard oracle vm virtualbox package:

• virtualbox. this is the virtualbox manager, a graphical user interface that uses the qt
toolkit. this interface is described throughout this manual. while this is the simplest and
easiest front-end to use, some of the more advanced oracle vm virtualbox features are not
included.
• vboxmanage. a command-line interface for automated and detailed control of every as-
pect of oracle vm virtualbox. see chapter 8, vboxmanage, page 129.
• vboxheadless. a front-end that produces no visible output on the host at all, but can
act as a rdp server if the virtualbox remote desktop extension (vrde) is installed and
enabled for the vm. as opposed to the other graphical interfaces, the headless front-end
requires no graphics support. this is useful, for example, if you want to host your virtual
machines on a headless linux server that has no x window system installed. see chapter
7.1.2, vboxheadless, the remote desktop server, page 118.

if the above front-ends still do not satisfy your particular needs, it is possible to create yet
another front-end to the complex virtualization engine that is the core of oracle vm virtualbox,
as the oracle vm virtualbox core neatly exposes all of its features in a clean api. see chapter 11,
oracle vm virtualbox programming interfaces, page 310.

30

1 first steps

1.17 soft keyboard
oracle vm virtualbox provides a soft keyboard that enables you to input keyboard characters
on the guest. a soft keyboard is an on-screen keyboard that can be used as an alternative to a
physical keyboard. see chapter 1.17.1, using the soft keyboard, page 31 for details of how to use
the soft keyboard.
for best results, ensure that the keyboard layout conﬁgured on the guest os matches the
keyboard layout used by the soft keyboard. oracle vm virtualbox does not do this automatically.

the soft keyboard can be used in the following scenarios:

• when the physical keyboard on the host is not the same as the keyboard layout conﬁgured
on the guest. for example, if the guest is conﬁgured to use an international keyboard, but
the host keyboard is us english.
• to send special key combinations to the guest. note that some common key combinations
are also available in the input, keyboard menu of the guest vm window. see chapter
1.8.3, typing special characters, page 13.
• for guests in kiosk mode, where a physical keyboard is not present.
• when using nested virtualization, the soft keyboard provides a method of sending key
presses to a guest.

by default, the soft keyboard includes some common international keyboard layouts. you can
copy and modify these to meet your own requirements. see chapter 1.17.2, creating a custom
keyboard layout, page 32.

1.17.1 using the soft keyboard
1. display the soft keyboard.
in the guest vm window, select input, keyboard, soft keyboard.
2. select the required keyboard layout.
the name of the current keyboard layout is displayed in the task bar of the soft keyboard
window. this is the previous keyboard layout that was used.
click the layout list icon in the task bar of the soft keyboard window. the layout list
window is displayed.
select the required keyboard layout from the entries in the layout list window.
the keyboard display graphic is updated to show the available input keys.
3. use the soft keyboard to enter keyboard characters on the guest.

31

1 first steps

• modiﬁer keys such as shift, ctrl, and alt are available on the soft keyboard. click
once to select the modiﬁer key, click twice to lock the modiﬁer key.
the reset the keyboard and release all keys icon can be used to release all pressed
modiﬁer keys, both on the host and the guest.
• to change the look of the soft keyboard, click the settings icon in the task bar. you
can change colors used in the keyboard graphic, and can hide or show sections of the
keyboard, such as the numpad or multimedia keys.

1.17.2 creating a custom keyboard layout
you can use one of the supplied default keyboard layouts as the starting point to create a custom
keyboard layout.

note: to permananently save a custom keyboard layout, you must save it to ﬁle. oth-
erwise, any changes you make are discarded when you close down the soft keyboard
window.
custom keyboard layouts that you save are stored as an xml ﬁle on the host, in the
keyboardlayouts folder in the global conﬁguration data directory. for example, in
$home/.config/virtualbox/keyboardlayouts on a linux host.

1. display the layout list.
click the layout list icon in the task bar of the soft keyboard window.
2. make a copy of an existing keyboard layout.
highlight the required layout and click the copy the selected layout icon.
a new layout entry with a name sufﬁx of -copy is created.
3. edit the new keyboard layout.
highlight the new layout in the layout list and click the edit the selected layout icon.
enter a new name for the layout.
edit keys in the new layout. click on the key that you want to edit and enter new key
captions in the captions ﬁelds.
the keyboard graphic is updated with the new captions.
4. (optional) save the layout to ﬁle. this means that your custom keyboard layout will be
available for future use.
highlight the new layout in the layout list and click the save the selected layout into
file icon.
any custom layouts that you create can later be removed from the layout list, by high-
lighting and clicking the delete the selected layout icon.

32

2 installation details

as installation of oracle vm virtualbox varies depending on your host operating system, the
following sections provide installation instructions for windows, mac os x, linux, and oracle
solaris.

2.1 installing on windows hosts
2.1.1 prerequisites
for the various versions of windows that are supported as host operating systems, please refer
to chapter 1.4, supported host operating systems, page 5.
in addition, windows installer must be present on your system. this should be the case for all
supported windows platforms.

2.1.2 performing the installation
the oracle vm virtualbox installation can be started in either of the following ways:

• by double-clicking on the executable ﬁle.
• by entering the following command:

virtualbox-<version>-<revision>-win.exe -extract

this will extract the installer into a temporary directory, along with the .msi ﬁle. run the
following command to perform the installation:

msiexec /i virtualbox-<version>-<revision>-win.msi

using either way displays the installation welcome dialog and enables you to choose where
to install oracle vm virtualbox, and which components to install. in addition to the oracle vm
virtualbox application, the following components are available:

• usb support. this package contains special drivers for your windows host that oracle vm
virtualbox requires to fully support usb devices inside your virtual machines.
• networking. this package contains extra networking drivers for your windows host that
oracle vm virtualbox needs to support bridged networking. this enables your vm’s virtual
network cards to be accessed from other machines on your physical network.
• python support. this package contains python scripting support for the oracle vm
virtualbox api, see chapter 11, oracle vm virtualbox programming interfaces, page 310.
for this to work, an already working windows python installation on the system is re-
quired.
see, for example: http://www.python.org/download/windows/ .

note: python version at least 2.6 is required. python 3 is also supported.

33

2 installation details

depending on your windows conﬁguration, you may see warnings about unsigned drivers,
or similar. click continue for these warnings, as otherwise oracle vm virtualbox might not
function correctly after installation.
the installer will create an oracle vm virtualbox group in the windows start menu, which
enables you to launch the application and access its documentation.
with standard settings, oracle vm virtualbox will be installed for all users on the local system.
if this is not wanted, you must invoke the installer by ﬁrst extracting as follows:

virtualbox.exe -extract

then, run either of the following commands on the extracted .msi ﬁle. this will install oracle
vm virtualbox only for the current user.

virtualbox.exe -msiparams allusers=2

msiexec /i virtualbox-<version>-win.msi allusers=2

if you do not want to install all features of oracle vm virtualbox, you can set the optional
addlocal parameter to explicitly name the features to be installed. the following features are
available:

vboxapplication

main binaries of oracle vm virtualbox.

note: this feature must not be absent, since it contains the minimum set of ﬁles to
have working oracle vm virtualbox installation.

vboxusb

usb support.
vboxnetwork

all networking support. this includes the vboxnetworkflt and vboxnetworkadp features.
vboxnetworkflt

bridged networking support.
vboxnetworkadp

host-only networking support
vboxpython

python support

for example, to only install usb support along with the main binaries, run either of the fol-
lowing commands:

virtualbox.exe -msiparams addlocal=vboxapplication,vboxusb

msiexec /i virtualbox-<version>-win.msi addlocal=vboxapplication,vboxusb

34

2 installation details

the user is able to choose between ndis5 and ndis6 host network ﬁlter drivers during the
installation. this is done using a command line parameter, networktype . the ndis6 driver is
the default for most supported windows hosts. for some legacy windows versions, the installer
will automatically select the ndis5 driver and this cannot be changed.
you can force an install of the legacy ndis5 host network ﬁlter driver by specifying
networktype=ndis5 . for example, to install the ndis5 driver on windows 7 use either of
the following commands:

virtualbox.exe -msiparams networktype=ndis5

msiexec /i virtualbox-<version>-win;.msi networktype=ndis5

2.1.3 uninstallation
as oracle vm virtualbox uses the standard microsoft windows installer, oracle vm virtualbox
can be safely uninstalled at any time. click the program entry in the add/remove programs
list in the windows control panel.

2.1.4 unattended installation
unattended installations can be performed using the standard msi support.

2.1.5 public properties
public properties can be speciﬁed with the msi api, to control additional behavior and features
of the windows host installer. use either of the following commands:

virtualbox.exe -msiparams name=value [...]

msiexec /i virtualbox-<version>-win.msi name=value [...]

the following public properties are available.

• vbox_installdesktopshortcut
speciﬁes whether or not an oracle vm virtualbox icon on the desktop should be created.
set to 1 to enable, 0 to disable. default is 1.
• vbox_installquicklaunchshortcut
speciﬁes whether or not an oracle vm virtualbox icon in the quick launch bar should be
created.
set to 1 to enable, 0 to disable. default is 1.
• vbox_registerfileextensions
speciﬁes whether or not the ﬁle extensions .vbox, .vbox-extpack, .ovf, .ova, .vdi, .vmdk,
.vhd and .vdd should be associated with oracle vm virtualbox. files of these types then
will be opened with oracle vm virtualbox.
set to 1 to enable, 0 to disable. default is 1.
• vbox_start
speciﬁes whether to start oracle vm virtualbox right after successful installation.
set to 1 to enable, 0 to disable. default is 1.

35

2 installation details

2.2 installing on mac os x hosts
2.2.1 performing the installation
for mac os x hosts, oracle vm virtualbox ships in a dmg disk image ﬁle. perform the following
steps to install on a mac os x host:

1. double-click on the dmg ﬁle, to mount the contents.
2. a window opens, prompting you to double-click on the virtualbox.pkg installer ﬁle dis-
played in that window.
3. this starts the installer, which enables you to select where to install oracle vm virtualbox.
4. an oracle vm virtualbox icon is added to the applications folder in the finder.

2.2.2 uninstallation
to uninstall oracle vm virtualbox, open the disk image dmg ﬁle and double-click on the uninstall
icon shown.

2.2.3 unattended installation
to perform a non-interactive installation of oracle vm virtualbox you can use the command line
version of the installer application.
mount the dmg disk image ﬁle, as described in the installation procedure, or use the following
command line:

hdiutil attach /path/to/virtualbox-xyz.dmg

open a terminal session and run the following command:

sudo installer -pkg /volumes/virtualbox/virtualbox.pkg -target /volumes/macintosh\ hd

2.3 installing on linux hosts
2.3.1 prerequisites
for the various versions of linux that are supported as host operating systems, see chapter 1.4,
supported host operating systems, page 5.
you may need to install the following packages on your linux system before starting the instal-
lation. some systems will do this for you automatically when you install oracle vm virtualbox.

• qt 5.3.2 or later. qt 5.6.2 or later is recommended.
• sdl 1.2.7 or later. this graphics library is typically called libsdl or similar.

note: these packages are only required if you want to run the oracle vm virtualbox
graphical user interfaces. in particular, virtualbox , the graphical virtualbox manager,
requires both qt and sdl. if you only want to run vboxheadless , neither qt nor sdl
are required.

36

2 installation details

2.3.2 the oracle vm virtualbox kernel modules
in order to run other operating systems in virtual machines alongside your main operating sys-
tem, oracle vm virtualbox needs to integrate very tightly with your system. to do this it installs
a driver module called vboxdrv into the system kernel. the kernel is the part of the operating
system which controls your processor and physical hardware. without this kernel module, you
can still use the virtualbox manager to conﬁgure virtual machines, but they will not start.
network drivers called vboxnetflt and vboxnetadp are also installed. they enable virtual
machines to make more use of your computer’s network capabilities and are needed for any
virtual machine networking beyond the basic nat mode.
since distributing driver modules separately from the kernel is not something which linux
supports well, the oracle vm virtualbox install process creates the modules on the system where
they will be used. this means that you may need to install some software packages from the dis-
tribution which are needed for the build process. required packages may include the following:

• gnu compiler (gcc)
• gnu make (make)
• kernel header ﬁles

also ensure that all system updates have been installed and that your system is running the
most up-to-date kernel for the distribution.

note: the running kernel and the kernel header ﬁles must be updated to matching
versions.

the following list includes some details of the required ﬁles for some common distributions.
start by ﬁnding the version name of your kernel, using the command uname -r in a terminal.
the list assumes that you have not changed too much from the original installation, in particular
that you have not installed a different kernel type.

• with debian and ubuntu-based distributions, you must install the correct version of the
linux-headers , usually whichever of linux-headers-generic , linux-headers-amd64 ,
linux-headers-i686 or linux-headers-i686-pae best matches the kernel version
name. also, the linux-kbuild package if it exists. basic ubuntu releases should have
the correct packages installed by default.
• on fedora, red hat, oracle linux and many other rpm-based systems, the kernel version
sometimes has a code of letters or a word close to the end of the version name. for
example “uek” for the oracle unbreakable enterprise kernel or “default” or “desktop” for
the standard kernels. in this case, the package name is kernel-uek-devel or equivalent.
if there is no such code, it is usually kernel-devel .
• on some suse and opensuse linux versions, you may need to install the kernel-source
and kernel-syms packages.

if you suspect that something has gone wrong with module installation, check that your system
is set up as described above and try running the following command, as root:

rcvboxdrv setup

37

2 installation details

2.3.2.1 kernel modules and uefi secure boot
if you are running on a system using uefi (uniﬁed extensible firmware interface) secure boot,
you may need to sign the following kernel modules before you can load them:

• vboxdrv

• vboxnetadp

• vboxnetflt

• vboxpci

see your system documentation for details of the kernel module signing process.

2.3.3 performing the installation
oracle vm virtualbox is available in a number of package formats native to various common
linux distributions. see chapter 1.4, supported host operating systems, page 5. in addition, there
is an alternative generic installer (.run) which you can use on supported linux distributions.

2.3.3.1 installing oracle vm virtualbox from a debian or ubuntu package
download the appropriate package for your distribution. the following example assumes that
you are installing to a 64-bit ubuntu xenial system. use dpkg to install the debian package,as
follows:

sudo dpkg -i virtualbox-<version-number> _ ubuntu _ xenial _ amd64.deb

the installer will also try to build kernel modules suitable for the current running kernel. if
the build process is not successful you will be shown a warning and the package will be left
unconﬁgured. look at /var/log/vbox-install.log to ﬁnd out why the compilation failed.
you may have to install the appropriate linux kernel headers, see chapter 2.3.2, the oracle vm
virtualbox kernel modules, page 37. after correcting any problems, run the following command:

sudo rcvboxdrv setup

this will start a second attempt to build the module.
if a suitable kernel module was found in the package or the module was successfully built, the
installation script will attempt to load that module. if this fails, please see chapter 12.7.1, linux
kernel module refuses to load, page 324 for further information.
once oracle vm virtualbox has been successfully installed and conﬁgured, you can start it by
clicking virtualbox in your start menu or from the command line. see chapter 2.3.5, starting
oracle vm virtualbox on linux, page 41.

2.3.3.2 using the alternative generic installer (virtualbox.run)
the alternative generic installer performs the following steps:

• unpacks the application ﬁles to the target directory /opt/virtualbox/ , which cannot be
changed.
• builds and installs the oracle vm virtualbox kernel modules: vboxdrv , vboxnetflt , and
vboxnetadp .
• creates /sbin/rcvboxdrv , an init script to start the oracle vm virtualbox kernel module.
• creates a new system group called vboxusers .

38

2 installation details

• creates symbolic links in /usr/bin to a shell script /opt/virtualbox/vbox which does
some sanity checks and dispatches to the actual executables: virtualbox , vboxvrdp ,
vboxheadless and vboxmanage .
• creates /etc/udev/rules.d/60-vboxdrv.rules , a description ﬁle for udev, if that is
present, which makes the usb devices accessible to all users in the vboxusers group.
• writes the installation directory to /etc/vbox/vbox.cfg .

the installer must be executed as root with either install or uninstall as the ﬁrst parame-
ter. for example:

sudo ./virtualbox.run install

or if you do not have the sudo command available, run the following as root instead:

./virtualbox.run install

add every user who needs to access usb devices from a virtualbox guests to the group
vboxusers . either use the os user management tools or run the following command as root:

sudo usermod -a -g vboxusers username

note: the usermod command of some older linux distributions does not support the
-a option, which adds the user to the given group without affecting membership of
other groups. in this case, ﬁnd out the current group memberships with the groups
command and add all these groups in a comma-separated list to the command line after
the -g option. for example: usermod -g group1,group2,vboxusers username .

2.3.3.3 performing a manual installation
if you cannot use the shell script installer described in chapter 2.3.3.2, using the alternative
generic installer (virtualbox.run), page 38, you can perform a manual installation. run the
installer as follows:

./virtualbox.run --keep --noexec

this will unpack all the ﬁles needed for installation in the directory install under the current
directory. the oracle vm virtualbox application ﬁles are contained in virtualbox.tar.bz2
which you can unpack to any directory on your system. for example:

sudo mkdir /opt/virtualbox
sudo tar jxf ./install/virtualbox.tar.bz2 -c /opt/virtualbox

to run the same example as root, use the following commands:

mkdir /opt/virtualbox
tar jxf ./install/virtualbox.tar.bz2 -c /opt/virtualbox

the sources for oracle vm virtualbox’s kernel module are provided in the src directory. to
build the module, change to the directory and use the following command:

make

if everything builds correctly, run the following command to install the module to the appro-
priate module directory:

sudo make install

39

2 installation details

in case you do not have sudo, switch the user account to root and run the following command:

make install

the oracle vm virtualbox kernel module needs a device node to operate. the above make
command will tell you how to create the device node, depending on your linux system. the
procedure is slightly different for a classical linux setup with a /dev directory, a system with the
now deprecated devfs and a modern linux system with udev .
on certain linux distributions, you might experience difﬁculties building the module. you will
have to analyze the error messages from the build system to diagnose the cause of the problems.
in general, make sure that the correct linux kernel sources are used for the build process.
note that the /dev/vboxdrv kernel module device node must be owned by root:root and must
be read/writable only for the user.
next, you install the system initialization script for the kernel module and activate the initial-
ization script using the right method for your distribution, as follows:

cp /opt/virtualbox/vboxdrv.sh /sbin/rcvboxdrv

this example assumes you installed oracle vm virtualbox to the /opt/virtualbox directory.
create a conﬁguration ﬁle for oracle vm virtualbox, as follows:

mkdir /etc/vbox
echo install _ dir=/opt/virtualbox > /etc/vbox/vbox.cfg

create the following symbolic links:

ln -sf /opt/virtualbox/vbox.sh /usr/bin/virtualbox
ln -sf /opt/virtualbox/vbox.sh /usr/bin/vboxmanage
ln -sf /opt/virtualbox/vbox.sh /usr/bin/vboxheadless

2.3.3.4 updating and uninstalling oracle vm virtualbox
before updating or uninstalling oracle vm virtualbox, you must terminate any virtual machines
which are currently running and exit the oracle vm virtualbox or vboxsvc applications. to
update oracle vm virtualbox, simply run the installer of the updated version. to uninstall oracle
vm virtualbox, run the installer as follows:

sudo ./virtualbox.run uninstall

as root, you can use the following command:

./virtualbox.run uninstall

you can uninstall the .run package as follows:

/opt/virtualbox/uninstall.sh

to manually uninstall oracle vm virtualbox, perform the manual installation steps in reverse
order.

2.3.3.5 automatic installation of debian packages
the debian packages will request some user feedback when installed for the ﬁrst time. the
debconf system is used to perform this task. to prevent any user interaction during installation,
default values can be deﬁned. a ﬁle vboxconf can contain the following debconf settings:

virtualbox virtualbox/module-compilation-allowed boolean true
virtualbox virtualbox/delete-old-modules boolean true

40

2 installation details

the ﬁrst line enables compilation of the vboxdrv kernel module if no module was found for the
current kernel. the second line enables the package to delete any old vboxdrv kernel modules
compiled by previous installations.
these default settings can be applied prior to the installation of the oracle vm virtualbox
debian package, as follows:

debconf-set-selections vboxconf

in addition there are some common conﬁguration options that can be set prior to the installa-
tion. see chapter 2.3.3.7, automatic installation options, page 41.

2.3.3.6 automatic installation of rpm packages
the rpm format does not provide a conﬁguration system comparable to the debconf system. see
chapter 2.3.3.7, automatic installation options, page 41 for how to set some common installation
options provided by oracle vm virtualbox.

2.3.3.7 automatic installation options
to conﬁgure the installation process for .deb and .rpm packages, you can create a response ﬁle
named /etc/default/virtualbox . the automatic generation of the udev rule can be pre-
vented with the following setting:

install _ no _ udev=1

the creation of the group vboxusers can be prevented as follows:

install _ no _ group=1

if the following line is speciﬁed, the package installer will not try to build the vboxdrv kernel
module if no module ﬁtting the current kernel was found.

install _ no _ vboxdrv=1

2.3.4 the vboxusers group
the linux installers create the system user group vboxusers during installation. any system
user who is going to use usb devices from oracle vm virtualbox guests must be a member of
that group. a user can be made a member of the group vboxusers either by using the desktop
user and group tools, or with the following command:

sudo usermod -a -g vboxusers username

2.3.5 starting oracle vm virtualbox on linux
the easiest way to start an oracle vm virtualbox program is by running the program of your
choice ( virtualbox , vboxmanage , or vboxheadless ) from a terminal. these are symbolic links
to vbox.sh that start the required program for you.
the following detailed instructions should only be of interest if you wish to execute oracle
vm virtualbox without installing it ﬁrst. you should start by compiling the vboxdrv kernel
module and inserting it into the linux kernel. oracle vm virtualbox consists of a service daemon,
vboxsvc , and several application programs. the daemon is automatically started if necessary.
all oracle vm virtualbox applications will communicate with the daemon through unix local
domain sockets. there can be multiple daemon instances under different user accounts and
applications can only communicate with the daemon running under the user account as the
application. the local domain socket resides in a subdirectory of your system’s directory for

41

2 installation details

temporary ﬁles called .vbox-<username>-ipc . in case of communication problems or server
startup problems, you may try to remove this directory.
all oracle vm virtualbox applications ( virtualbox , vboxmanage , and vboxheadless ) require
the oracle vm virtualbox directory to be in the library path, as follows:
ld _ library _ path=. ./vboxmanage showvminfo "windows xp"

2.4 installing on oracle solaris hosts

for the speciﬁc versions of oracle solaris that are supported as host operating systems, see
chapter 1.4, supported host operating systems, page 5.
if you have a previously installed instance of oracle vm virtualbox on your oracle solaris host,
please uninstall it ﬁrst before installing a new instance. see chapter 2.4.4, uninstallation, page
43 for uninstall instructions.

2.4.1 performing the installation
oracle vm virtualbox is available as a standard oracle solaris package. download the oracle
vm virtualbox sunos package, which includes the 64-bit version of oracle vm virtualbox. the
installation must be performed as root and from the global zone. this is because the oracle vm
virtualbox installer loads kernel drivers, which cannot be done from non-global zones. to verify
which zone you are currently in, execute the zonename command.
to start installation, run the following commands:

gunzip -cd virtualbox-<version-number>-sunos.tar.gz | tar xvf -

the oracle vm virtualbox kernel package is integrated into the main package. install the
oracle vm virtualbox package as follows:

pkgadd -d virtualbox-<version-number>-sunos.pkg

the installer will then prompt you to enter the package you wish to install. choose 1 or all
and proceed. next the installer will ask you if you want to allow the postinstall script to be
executed. choose y and proceed, as it is essential to execute this script which installs the oracle
vm virtualbox kernel module. following this conﬁrmation the installer will install oracle vm
virtualbox and execute the postinstall setup script.
once the postinstall script has been executed your installation is now complete. you may now
safely delete the uncompressed package and autoresponse ﬁles from your system. oracle vm
virtualbox is installed in /opt/virtualbox .

note: if you need to use oracle vm virtualbox from non-global zones, see chapter
2.4.6, conﬁguring a zone for running oracle vm virtualbox, page 43.

2.4.2 the vboxuser group
the installer creates the system user group vboxuser during installation for oracle solaris hosts
that support the usb features required by oracle vm virtualbox. any system user who is going
to use usb devices from oracle vm virtualbox guests must be a member of this group. a user
can be made a member of this group either by using the desktop user and group tools or by
running the following command as root:

usermod -g vboxuser username

note that adding an active user to the vboxuser group will require the user to log out and
then log in again. this should be done manually after successful installation of the package.

42

2 installation details

2.4.3 starting oracle vm virtualbox on oracle solaris
the easiest way to start an oracle vm virtualbox program is by running the program of your
choice ( virtualbox , vboxmanage , or vboxheadless ) from a terminal. these are symbolic links
to vbox.sh that start the required program for you.
alternatively, you can directly invoke the required programs from /opt/virtualbox . using
the links provided is easier as you do not have to enter the full path.
you can conﬁgure some elements of the virtualbox qt gui, such as fonts and colours, by
running vboxqtconfig from the terminal.

2.4.4 uninstallation
uninstallation of oracle vm virtualbox on oracle solaris requires root permissions. to perform
the uninstallation, start a root terminal session and run the following command:

pkgrm sunwvbox

after conﬁrmation, this will remove oracle vm virtualbox from your system.

2.4.5 unattended installation
to perform a non-interactive installation of oracle vm virtualbox there is a response ﬁle named
autoresponse . the installer uses this for responses to inputs, rather than prompting the user.
extract the tar.gz package as described in chapter 2.4.1, performing the installation, page 42.
then open a root terminal session and run the following command:

pkgadd -d virtualbox-<version-number>-sunos-x86 -n -a autoresponse sunwvbox

to perform a non-interactive uninstallation, open a root terminal session and run the following
command:

pkgrm -n -a /opt/virtualbox/autoresponse sunwvbox

2.4.6 conﬁguring a zone for running oracle vm virtualbox
assuming that oracle vm virtualbox has already been installed into your zone, you need to give
the zone access to oracle vm virtualbox’s device node. this is done by performing the following
steps. start a root terminal and run the following command:

zonecfg -z <vboxzone>

replace vboxzone with the name of the zone where you intend to run oracle vm virtualbox.
use zonecfg to add the device resource and match properties to the zone, as follows:

zonecfg:vboxzone>add device
zonecfg:vboxzone:device>set match=/dev/vboxdrv
zonecfg:vboxzone:device>end
zonecfg:vboxzone>add device
zonecfg:vboxzone:device>set match=/dev/vboxdrvu
zonecfg:vboxzone:device>end
zonecfg:vboxzone>exit

on oracle solaris 11 or later, you may also add a device for /dev/vboxusbmon , similar to that
shown above.
if you are not using sparse root zones, you will need to loopback mount /opt/virtualbox
from the global zone into the non-global zone at the same path. this is speciﬁed below using the
dir attribute and the special attribute. for example:

43

2 installation details

zonecfg:vboxzone>add fs
zonecfg:vboxzone:device>set dir=/opt/virtualbox
zonecfg:vboxzone:device>set special=/opt/virtualbox
zonecfg:vboxzone:device>set type=lofs
zonecfg:vboxzone:device>end
zonecfg:vboxzone>exit

reboot the zone using zoneadm and you should be able to run oracle vm virtualbox from
within the conﬁgured zone.

44

3 conﬁguring virtual machines

this chapter provides detailed steps for conﬁguring an oracle vm virtualbox virtual machine
(vm). for an introduction to oracle vm virtualbox and steps to get your ﬁrst virtual machine
running, see chapter 1, first steps, page 1.
you have considerable latitude when deciding what virtual hardware to provide to the guest.
use virtual hardware to communicate with the host system or with other guests. for example,
you can use virtual hardware in the following ways:

• have oracle vm virtualbox present an iso cd-rom image to a guest system as if it were
a physical cd-rom.
• provide a guest system access to the physical network through its virtual network card.
• provide the host system, other guests, and computers on the internet access to the guest
system.

3.1 supported guest operating systems

because oracle vm virtualbox is designed to provide a generic virtualization environment for
x86 systems, it can run operating systems (oses) of any kind. however, oracle vm virtualbox
focuses on the following guest systems:

• windows nt 4.0:
– fully supports all versions, editions, and service packs. note that you might encounter
issues with some older service packs, so install at least service pack 6a.
– guest additions are available with a limited feature set.
• windows 2000, windows xp, windows server 2003, windows vista, windows server
2008, windows 7, windows server 2008 r2, windows 8, windows server 2012, win-
dows 8.1, windows server 2012 r2, windows 10 (non-insider preview releases), win-
dows server 2016, windows server 2019:
– fully supports all versions, editions, and service packs, including 64-bit versions.
– note that you must enable hardware virtualization when running at least windows 8.
– guest additions are available.
• ms-dos, windows 3.x, windows 95, windows 98, windows me:
– limited testing has been performed.
– use beyond legacy installation mechanisms is not recommended.
– guest additions are not available.
• linux 2.4:
limited support.
• linux 2.6:
– fully supports all versions and editions, both 32-bit and 64-bit.

45

3 conﬁguring virtual machines

– for best performance, use at least linux kernel version 2.6.13.
– guest additions are available.

note: certain linux kernel releases have bugs that prevent them from executing in a
virtual environment. see chapter 12.4.2, buggy linux 2.6 kernel versions, page 321.

• linux 3.x and later:
– fully supports all versions and editions, both 32-bit and 64-bit.
– guest additions are available.
• oracle solaris 10 and oracle solaris 11:
– fully supports all versions starting with oracle solaris 10 8/08 and oracle solaris 11.
– supports 64-bit prior to oracle solaris 11 11/11, and 32-bit.
– guest additions are available.
• freebsd:
– limited support.
– note that you must enable hardware virtualization when running freebsd.
– guest additions are not available.
• openbsd:
– supports at least version 3.7.
– note that you must enable hardware virtualization when running openbsd.
– guest additions are not available.
• os/2 warp 4.5:
– only mcp2 is supported. other os/2 versions might not work.
– note that you must enable hardware virtualization when running os/2 warp 4.5.
– guest additions are available with a limited feature set. see chapter 14, known limi-
tations, page 332.
• mac os x:
– oracle vm virtualbox 3.2 added experimental support for mac os x guests, with
restrictions. see chapter 3.1.1, mac os x guests, page 46 and chapter 14, known
limitations, page 332.
– guest additions are not available.

3.1.1 mac os x guests
oracle vm virtualbox enables you to install and execute unmodiﬁed versions of mac os x guests
on supported host hardware. note that this feature is experimental and thus unsupported.
oracle vm virtualbox is the ﬁrst product to provide the modern pc architecture expected by
os x without requiring any of the modiﬁcations used by competing virtualization solutions. for
example, some competing solutions perform modiﬁcations to the mac os x install dvds, such as
a different boot loader and replaced ﬁles.
be aware of the following important issues before you attempt to install a mac os x guest:

46

3 conﬁguring virtual machines

• mac os x is commercial, licensed software and contains both license and technical re-
strictions that limit its use to certain hardware and usage scenarios. you must understand
and comply with these restrictions.
in particular, apple prohibits the installation of most versions of mac os x on non-apple
hardware.
these license restrictions are also enforced on a technical level. mac os x veriﬁes that
it is running on apple hardware. most dvds that accompany apple hardware check for
the exact model. these restrictions are not circumvented by oracle vm virtualbox and
continue to apply.
• only cpus that are known and tested by apple are supported. as a result, if your intel cpu
is newer than the mac os x build, or if you have a non-intel cpu, you will likely encounter
a panic during bootup with an “unsupported cpu” exception.
ensure that you use the mac os x dvd that comes with your apple hardware.
• the mac os x installer expects the hard disk to be partitioned. so, the installer will not
offer a partition selection to you. before you can install the software successfully, start the
disk utility from the tools menu and partition the hard disk. close the disk utility and
proceed with the installation.
• in addition, mac os x support in oracle vm virtualbox is an experimental feature. see
chapter 14, known limitations, page 332.

3.1.2 64-bit guests

warning: be sure to enable i/o apic for virtual machines that you intend to use
in 64-bit mode. this is especially true for 64-bit windows vms. see chapter 3.4.2,
advanced tab, page 50. for 64-bit windows guests, ensure that the vm uses the intel
networking device because there is no 64-bit driver support for the amd pcnet card.
see chapter 6.1, virtual networking hardware, page 104.

if you use the create vm wizard of the virtualbox manager, oracle vm virtualbox automat-
ically uses the correct settings for each selected 64-bit os type. see chapter 1.7, creating your
first virtual machine, page 8.

3.2 unattended guest installation

oracle vm virtualbox can install a guest os automatically. you only need to provide the instal-
lation medium and a few other parameters, such as the name of the default user.
performing an unattended guest installation involves the following steps:
• create a new vm. use one of the following methods:
– the virtualbox manager, see chapter 1.7, creating your first virtual machine, page 8.
– the vboxmanage createvm command, see chapter 8.7, vboxmanage createvm, page
145.
for the new vm, choose the guest os type and accept the default settings for that os. the
following sections in this chapter describe how to change the settings for a vm.
• prepare the vm for unattended guest installation. use the vboxmanage unattended
command, see chapter 8.37, vboxmanage unattended, page 202.
during this step, oracle vm virtualbox scans the installation medium and changes certain
parameters to ensure a seamless installation as a guest running on oracle vm virtualbox.

47

3 conﬁguring virtual machines

• start the vm. use the virtualbox manager or the vboxmanage startvm command.
when you start the vm, the unattended installation is performed automatically.
the installation operation changes the boot device order to boot the virtual hard disk ﬁrst
and then the virtual dvd drive. if the virtual hard disk is empty prior to the automatic
installation, the vm boots from the virtual dvd drive and begins the installation.
if the virtual hard disk contains a bootable os, the installation operation exits. in this case,
change the boot device order manually by pressing f12 during the bios splash screen.

chapter 3.2.1, an example of unattended guest installation, page 48 describes how to perform
an unattended guest installation for an oracle linux guest.

3.2.1 an example of unattended guest installation
the following example shows how to perform an unattended guest installation for an oracle
linux vm. the example uses various vboxmanage commands to prepare the guest vm. the
vboxmanage unattended install command is then used to install and conﬁgure the guest
os.

1. create the virtual machine.

# vm="ol7-autoinstall"
# vboxmanage list ostypes
# vboxmanage createvm --name $vm --ostype "oracle _ 64" --register

note the following:
• the $vm variable represents the name of the vm.
• the vboxmanage list ostypes command lists the guest oses supported by oracle
vm virtualbox, including the name used for each os in the vboxmanage commands.
• a 64-bit oracle linux 7 vm is created and registered with oracle vm virtualbox.
• the vm has a unique uuid.
• an xml settings ﬁle is generated.
2. create a virtual hard disk and storage devices for the vm.

# vboxmanage createhd --filename /virtualbox/$vm/$vm.vdi --size 32768
# vboxmanage storagectl $vm --name "sata controller" --add sata --controller intelahci
# vboxmanage storageattach $vm --storagectl "sata controller" --port 0 --device 0 \
--type hdd --medium /virtualbox/$vm/$vm.vdi
# vboxmanage storagectl $vm --name "ide controller" --add ide
# vboxmanage storageattach $vm --storagectl "ide controller" --port 0 --device 0 \
--type dvddrive --medium /u01/software/ol/oraclelinux-r7-u6-server-x86 _ 64-dvd.iso

the previous commands do the following:
• create a 32768 mb virtual hard disk.
• create a sata storage controller and attach the virtual hard disk.
• create an ide storage controller for a virtual dvd drive and attach an oracle linux
installation iso.
3. (optional) conﬁgure some settings for the vm.

# vboxmanage modifyvm $vm --ioapic on
# vboxmanage modifyvm $vm --boot1 dvd --boot2 disk --boot3 none --boot4 none
# vboxmanage modifyvm $vm --memory 8192 --vram 128

48

3 conﬁguring virtual machines

the previous commands do the following:
• enable i/o apic for the motherboard of the vm.
• conﬁgure the boot device order for the vm.
• allocate 8192 mb of ram and 128 mb of video ram to the vm.
4. perform an unattended install of the os.

# vboxmanage unattended install $vm \
--iso=/u01/software/ol/oraclelinux-r7-u6-server-x86 _ 64-dvd.iso \
--user=<login> --full-user-name=<name> --password <password> \
--install-additions --time-zone=cet

the previous command does the following:
• speciﬁes an oracle linux iso as the installation iso.
• speciﬁes a login name, full name, and login password for a default user on the guest
os.
note that the speciﬁed password is also used for the root user account on the guest.
• installs the guest additions on the vm.
• sets the time zone for the guest os to central european time (cet).
5. start the virtual machine.
this step completes the unattended installation process.

# vboxmanage startvm $vm --type headless

the vm starts in headless mode, which means that the virtualbox manager window does
not open.
6. (optional) update the guest os to use the latest oracle linux packages.
on the guest vm, run the following command:

# yum update

3.3 emulated hardware

oracle vm virtualbox virtualizes nearly all hardware of the host. depending on a vm’s conﬁgu-
ration, the guest will see the following virtual hardware:

• input devices. oracle vm virtualbox can emulate a standard ps/2 keyboard and mouse.
these devices are supported by most guest oses.
in addition, oracle vm virtualbox can provide virtual usb input devices to avoid having
to capture mouse and keyboard, as described in chapter 1.8.2, capturing and releasing
keyboard and mouse, page 12.
• graphics. the default oracle vm virtualbox graphics device for windows guests is an
svga device. for linux guests, the default graphics device emulates a vmware svga
graphics device. see chapter 3.6.1, screen tab, page 54.
for legacy guest oses, a vga-compatible graphics device is available.

49

3 conﬁguring virtual machines

• storage. oracle vm virtualbox emulates the most common types of hard disk controllers.
see chapter 5.1, hard disk controllers, page 88. whereas supporting only one of these
controllers would be enough for oracle vm virtualbox by itself, this multitude of storage
adapters is required for compatibility with other hypervisors. windows is very selective
about its boot devices, and migrating vms between hypervisors is very difﬁcult or impossi-
ble if the storage controllers are different.
• networking. see chapter 6.1, virtual networking hardware, page 104.
• usb. oracle vm virtualbox emulates these types of usb host controllers: xhci, ehci, and
ohci. while xhci handles all usb transfer speeds, some legacy guest oses may not sup-
port xhci. note that for some legacy windows guests, third party drivers must be installed
for xhci support.
legacy guest oses typically support ohci and ehci. these two controllers are needed
because ohci only handles usb low-speed and full-speed devices (both usb 1.x and 2.0),
while ehci only handles high-speed devices (usb 2.0 only).
the emulated usb controllers do not communicate directly with devices on the host. in-
stead they communicate with a virtual usb layer which abstracts the usb protocol and
enables the use of remote usb devices.
• audio. see chapter 3.8, audio settings, page 58.

3.4 general settings

in the settings window, under general, you can conﬁgure the most fundamental aspects of the
virtual machine such as memory and essential hardware. the following tabs are available.

3.4.1 basic tab
in the basic tab of the general settings category, you can ﬁnd these settings:

• name: the name of the the vm, as shown in the list of vms in the main virtualbox manager
window. using this name, oracle vm virtualbox also saves the vm’s conﬁguration ﬁles. if
you change the name, oracle vm virtualbox renames these ﬁles as well. as a result, you
can only use characters which are allowed for ﬁle names on your host os.
note that internally, oracle vm virtualbox uses unique identiﬁers (uuids) to identify vir-
tual machines. you can display these using the vboxmanage commands.
• type: the type of the guest os for the vm. this is the same setting that is speciﬁed in the
new virtual machine wizard. see chapter 1.7, creating your first virtual machine, page
8.
whereas the default settings of a newly created vm depend on the selected os type, chang-
ing the type later has no effect on vm settings. this value is purely informational and
decorative.
• version: the version of the guest os for the vm. this is the same setting that is speciﬁed
in the new virtual machine wizard. see chapter 1.7, creating your first virtual machine,
page 8.

3.4.2 advanced tab
the following settings are available in the advanced tab:

50

3 conﬁguring virtual machines

• snapshot folder: by default, oracle vm virtualbox saves snapshot data together with
your other oracle vm virtualbox conﬁguration data. see chapter 10.1, where oracle vm
virtualbox stores its files, page 303. with this setting, you can specify any other folder for
each vm.
• shared clipboard: you can select here whether the clipboard of the guest os should be
shared with that of your host. if you select bidirectional, then oracle vm virtualbox will
always make sure that both clipboards contain the same data. if you select host to guest
or guest to host, then oracle vm virtualbox will only ever copy clipboard data in one
direction.
clipboard sharing requires that the oracle vm virtualbox guest additions be installed. in
such a case, this setting has no effect. see chapter 4, guest additions, page 67.
for security reasons, the shared clipboard is disabled by default. this setting can be
changed at any time using the shared clipboard menu item in the devices menu of the
virtual machine.
• drag and drop: this setting enables support for drag and drop. select an object, such as a
ﬁle, from the host or guest and directly copy or open it on the guest or host. multiple drag
and drop modes for a vm enable restricting of access in either direction.
for drag and drop to work the guest additions need to be installed on the guest.

note: drag and drop is disabled by default. this setting can be changed at any time
using the drag and drop menu item in the devices menu of the virtual machine.

see chapter 4.4, drag and drop, page 77.

3.4.3 description tab
on the description tab you can enter a description for your virtual machine. this has no effect
on the functionality of the machine, but you may ﬁnd this space useful to note down things such
as the conﬁguration of a virtual machine and the software that has been installed into it.
to insert a line break into the description text ﬁeld, press shift+enter.

3.4.4 disk encryption tab
the disk encryption tab enables you to encrypt disks that are attached to the virtual machine.
to enable disk encryption, select the enable disk encryption check box.
settings are available to conﬁgure the cipher used for encryption and the encryption password.

note: all ﬁles related to the virtual machine except disk images are stored unencrypted.

3.5 system settings

the system category groups various settings that are related to the basic hardware that is pre-
sented to the virtual machine.

note: as the activation mechanism of microsoft windows is sensitive to hardware
changes, if you are changing hardware settings for a windows guest, some of these
changes may trigger a request for another activation with microsoft.

the following tabs are available.

51

3 conﬁguring virtual machines

3.5.1 motherboard tab
on the motherboard tab, you can conﬁgure virtual hardware that would normally be on the
motherboard of a real computer.

• base memory: sets the amount of ram that is allocated and given to the vm when it is
running. the speciﬁed amount of memory will be requested from the host os, so it must
be available or made available as free memory on the host when attempting to start the vm
and will not be available to the host while the vm is running. this is the same setting that
was speciﬁed in the new virtual machine wizard, as described in chapter 1.7, creating
your first virtual machine, page 8.
generally, it is possible to change the memory size after installing the guest os. but you
must not reduce the memory to an amount where the os would no longer boot.
• boot order: determines the order in which the guest os will attempt to boot from the
various virtual boot devices. analogous to a real pc’s bios setting, oracle vm virtualbox
can tell a guest os to start from the virtual ﬂoppy, the virtual cd/dvd drive, the virtual
hard drive (each of these as deﬁned by the other vm settings), the network, or none of
these.
if you select network, the vm will attempt to boot from a network using the pxe mecha-
nism. this needs to be conﬁgured in detail on the command line. see chapter 8.8, vbox-
manage modifyvm, page 145.
• chipset: you can select which chipset will be presented to the virtual machine. piix3 is
the default chipset for most guests. for some guest oses such as mac os x, the piix3
chipset is not well supported. as a result, oracle vm virtualbox supports an emulation
of the ich9 chipset, which supports pci express, three pci buses, pci-to-pci bridges and
message signaled interrupts (msi). this enables modern oses to address more pci devices
and no longer requires irq sharing. using the ich9 chipset it is also possible to conﬁgure
up to 36 network cards, compared to a maximum of eight network adapters with piix3.
note that ich9 support is experimental and not recommended for guest oses which do
not require it.
• pointing device: the default virtual pointing device for some guest oses is the traditional
ps/2 mouse. if set to usb tablet, oracle vm virtualbox reports to the virtual machine
that a usb tablet device is present and communicates mouse events to the virtual machine
through this device. another setting is usb multi-touch tablet, which is suitable for guests
running windows 8 or later.
using the virtual usb tablet has the advantage that movements are reported in absolute
coordinates, instead of as relative position changes. this enables oracle vm virtualbox to
translate mouse events over the vm window into tablet events without having to “capture”
the mouse in the guest as described in chapter 1.8.2, capturing and releasing keyboard
and mouse, page 12. this makes using the vm less tedious even if guest additions are not
installed.
• enable i/o apic: advanced programmable interrupt controllers (apics) are an x86 hard-
ware feature that have replaced programmable interrupt controllers (pics). with an i/o
apic, oses can use more than 16 interrupt requests (irqs) and therefore avoid irq shar-
ing for improved reliability.

note: enabling the i/o apic is required, especially for 64-bit windows guest oses. it
is also required if you want to use more than one virtual cpu in a virtual machine.

52

3 conﬁguring virtual machines

however, software support for i/o apics has been unreliable with some oses other than
windows. also, the use of an i/o apic slightly increases the overhead of virtualization and
therefore slows down the guest os a little.

warning: all windows oses install different kernels, depending on whether an i/o
apic is available. as with acpi, the i/o apic therefore must not be turned off after
installation of a windows guest os. turning it on after installation will have no effect
however.

• enable efi: enables extensible firmware interface (efi), which replaces the legacy bios
and may be useful for certain advanced use cases. see chapter 3.14, alternative firmware
(efi), page 63.
• hardware clock in utc time: if selected, oracle vm virtualbox will report the system
time in utc format to the guest instead of the local (host) time. this affects how the virtual
real-time clock (rtc) operates and may be useful for unix-like guest oses, which typically
expect the hardware clock to be set to utc.

in addition, you can turn off the advanced conﬁguration and power interface (acpi) which
oracle vm virtualbox presents to the guest os by default.
acpi is the current industry standard to allow oses to recognize hardware, conﬁgure moth-
erboards and other devices and manage power. as most computers contain this feature and
windows and linux support acpi, it is also enabled by default in oracle vm virtualbox. acpi
can only be turned off using the command line. see chapter 8.8, vboxmanage modifyvm, page
145.

warning: all windows oses install different kernels, depending on whether acpi is
available. this means that acpi must not be turned off after installation of a windows
guest os. however, turning it on after installation will have no effect.

3.5.2 processor tab
on the processor tab, you can conﬁgure settings for the cpu used by the virtual machine.

• processor(s): sets the number of virtual cpu cores the guest oses can see. oracle vm
virtualbox supports symmetrical multiprocessing (smp) and can present up to 32 virtual
cpu cores to each virtual machine.
you should not conﬁgure virtual machines to use more cpu cores than are available physi-
cally. this includes real cores, with no hyperthreads.
• execution cap: conﬁgures the cpu execution cap. this limits the amount of time a host
cpu spends to emulate a virtual cpu. the default setting is 100%, meaning that there is
no limitation. a setting of 50% implies a single virtual cpu can use up to 50% of a single
host cpu. note that limiting the execution time of the virtual cpus may cause guest timing
problems.
a warning is displayed at the bottom of the processor tab if an execution cap setting is
made that may affect system performance.
• enable pae/nx: determines whether the pae and nx capabilities of the host cpu will be
exposed to the virtual machine.

53

3 conﬁguring virtual machines

pae stands for physical address extension. normally, if enabled and supported by the os,
then even a 32-bit x86 cpu can access more than 4 gb of ram. this is made possible
by adding another 4 bits to memory addresses, so that with 36 bits, up to 64 gb can be
addressed. some oses, such as ubuntu server, require pae support from the cpu and
cannot be run in a virtual machine without it.
• enable nested vt-x/amd-v: enables nested virtualization, with passthrough of hardware
virtualization functions to the guest vm.
with virtual machines running modern server oses, oracle vm virtualbox also supports cpu
hot-plugging. for details, see chapter 9.4, cpu hot-plugging, page 248.

3.5.3 acceleration tab
on this tab, you can conﬁgure oracle vm virtualbox to use hardware virtualization extensions
that your host cpu supports.
• paravirtualization interface: oracle vm virtualbox provides paravirtualization interfaces
to improve time-keeping accuracy and performance of guest oses. the options available
are documented under the --paravirtprovider option in chapter 8.8, vboxmanage mod-
ifyvm, page 145. for further details on the paravirtualization providers, see chapter 10.5,
paravirtualization providers, page 308.
• hardware virtualization: you can conﬁgure hardware virtualization features for each
virtual machine.
– enable nested paging: if the host cpu supports the nested paging (amd-v) or ept
(intel vt-x) features, then you can expect a signiﬁcant performance increase by en-
abling nested paging in addition to hardware virtualization. for technical details, see
chapter 10.6, nested paging and vpids, page 309. for intel ept security recommen-
dations, see chapter 13.4.1, cve-2018-3646, page 330.
advanced users may be interested in technical details about hardware virtualization. see
chapter 10.3, hardware virtualization, page 307.
in most cases, the default settings on the acceleration tab will work well. oracle vm
virtualbox selects sensible defaults, depending on the os that you selected when you created
the virtual machine. in certain situations, however, you may want to change the preconﬁgured
defaults.

3.6 display settings

the following tabs are available for conﬁguring the display for a virtual machine.

3.6.1 screen tab
• video memory: sets the size of the memory provided by the virtual graphics card available
to the guest, in mb. as with the main memory, the speciﬁed amount will be allocated from
the host’s resident memory. based on the amount of video memory, higher resolutions and
color depths may be available.
the gui will show a warning if the amount of video memory is too small to be able to
switch the vm into full screen mode. the minimum value depends on the number of
virtual monitors, the screen resolution and the color depth of the host display as well as on
the use of 3d acceleration and 2d video acceleration. a rough estimate is (color depth / 8) x
vertical pixels x horizontal pixels x number of screens = number of bytes. extra memory may
be required if display acceleration is used.

54

3 conﬁguring virtual machines

• monitor count: with this setting, oracle vm virtualbox can provide more than one virtual
monitor to a virtual machine. if a guest os supports multiple attached monitors, oracle
vm virtualbox can pretend that multiple virtual monitors are present. up to eight such
virtual monitors are supported.
the output of the multiple monitors are displayed on the host in multiple vm windows
which are running side by side. however, in full screen and seamless mode, they use the
available physical monitors attached to the host. as a result, for full screen and seamless
modes to work with multiple monitors, you will need at least as many physical monitors as
you have virtual monitors conﬁgured, or oracle vm virtualbox will report an error.
you can conﬁgure the relationship between guest and host monitors using the view menu
by pressing host key + home when you are in full screen or seamless mode.
see also chapter 14, known limitations, page 332.
• scale factor: enables scaling of the display size. for multiple monitor displays, you can set
the scale factor for individual monitors, or globally for all of the monitors. use the slider
to select a scaling factor up to 200%.
you can set a default scale factor for all vms. use the display tab in the global settings
dialogs.
• graphics controller: speciﬁes the graphics adapter type used by the guest vm. note that
you must install the guest additions on the guest vm to specify the vboxsvga or vmsvga
graphics controller. the following options are available:
– vboxsvga: the default graphics controller for new vms that use windows 7 or later.
this graphics controller improves performance and 3d support when compared to the
legacy vboxvga option.
– vboxvga: use this graphics controller for legacy guest oses. this is the default
graphics controller for windows versions before windows 7 and for oracle solaris.
3d acceleration is not supported for this graphics controller.
– vmsvga: use this graphics controller to emulate a vmware svga graphics device.
this is the default graphics controller for linux guests.
– none: does not emulate a graphics adapter type.
• enable 3d acceleration: if a virtual machine has guest additions installed, you can se-
lect here whether the guest should support accelerated 3d graphics. see chapter 4.5.1,
hardware 3d acceleration (opengl and direct3d 8/9), page 79.
• enable 2d video acceleration: if a virtual machine with microsoft windows has guest
additions installed, you can select here whether the guest should support accelerated 2d
video graphics. see chapter 4.5.2, hardware 2d video acceleration for windows guests,
page 80.

3.6.2 remote display tab
on the remote display tab, if the virtualbox remote display extension (vrde) is installed,
you can enable the vrdp server that is built into oracle vm virtualbox. this enables you to
connect to the console of the virtual machine remotely with any standard rdp viewer, such as
mstsc.exe that comes with microsoft windows. on linux and oracle solaris systems you can
use the standard open source rdesktop program. these features are described in chapter 7.1,
remote display (vrdp support), page 117.

• enable server: select this check box and conﬁgure settings for the remote display connec-
tion.

55

3 conﬁguring virtual machines

3.6.3 recording tab
on the recording tab you can enable video and audio recording for a virtual machine and
change related settings. note that these features can be enabled and disabled while a vm is
running.

• enable recording: select this check box and select a recording mode option.
• recording mode: you can choose to record video, audio, or both video and audio.
some settings on the recording tab may be grayed out, depending on the recording mode
setting.
• file path: the ﬁle where the recording is saved.
• frame size: the video resolution of the recorded video, in pixels. the drop-down list
enables you to select from common frame sizes.
• frame rate: use the slider to set the maximum number of video frames per second (fps)
to record. frames that have a higher frequency are skipped. increasing this value reduces
the number of skipped frames and increases the ﬁle size.
• video quality: use the slider to set the the bit rate of the video in kilobits per second.
increasing this value improves the appearance of the video at the cost of an increased ﬁle
size.
• audio quality: use the slider to set the quality of the audio recording. increasing this
value improves the audio quality at the cost of an increased ﬁle size.
• screens: for a multiple monitor display, you can select which screens to record video from.

as you adjust the video and audio recording settings, the approximate output ﬁle size for a
ﬁve minute video is shown.

3.7 storage settings

the storage category in the vm settings enables you to connect virtual hard disk, cd/dvd, and
ﬂoppy images and drives to your virtual machine.
in a real computer, so-called storage controllers connect physical disk drives to the rest of
the computer. similarly, oracle vm virtualbox presents virtual storage controllers to a virtual
machine. under each controller, the virtual devices, such as hard disks, cd/dvd or ﬂoppy
drives, attached to the controller are shown.

note: this section gives a quick introduction to the oracle vm virtualbox storage
settings. see chapter 5, virtual storage, page 88 for a full description of the available
storage settings in oracle vm virtualbox.

if you have used the create vm wizard to create a machine, you will normally see something
like the following:

56

3 conﬁguring virtual machines

depending on the guest os type that you selected when you created the vm, a new vm
includes the following storage devices:

• ide controller. a virtual cd/dvd drive is attached to the secondary master port of the
ide controller.
• sata controller. this is a modern type of storage controller for higher hard disk data
throughput, to which the virtual hard disks are attached. initially you will normally have
one such virtual disk, but as shown in the previous screenshot, you can have more than
one. each is represented by a disk image ﬁle, such as a vdi ﬁle in this example.

if you created your vm with an older version of oracle vm virtualbox, the default storage
layout may differ. you might then only have an ide controller to which both the cd/dvd drive
and the hard disks have been attached. this might also apply if you selected an older os type
when you created the vm. since older oses do not support sata without additional drivers,
oracle vm virtualbox will make sure that no such devices are present initially. see chapter 5.1,
hard disk controllers, page 88.
oracle vm virtualbox also provides a ﬂoppy controller. you cannot add devices other than
ﬂoppy drives to this controller. virtual ﬂoppy drives, like virtual cd/dvd drives, can be con-
nected to either a host ﬂoppy drive, if you have one, or a disk image, which in this case must be
in raw format.
you can modify these media attachments freely. for example, if you wish to copy some ﬁles
from another virtual disk that you created, you can connect that disk as a second hard disk, as in
the above screenshot. you could also add a second virtual cd/dvd drive, or change where these
items are attached. the following options are available:

• to add another virtual hard disk, or a cd/dvd or ﬂoppy drive, select the storage con-
troller to which it should be added (such as ide, sata, scsi, sas, ﬂoppy controller) and
then click the add disk button below the tree. you can then either select optical drive
or hard disk. if you clicked on a ﬂoppy controller, you can add a ﬂoppy drive instead.
alternatively, right-click on the storage controller and select a menu item there.
a dialog is displayed, enabling you to select an existing disk image ﬁle or to create a new
disk image ﬁle. depending on the type of disk image, the dialog is called hard disk
selector, optical disk selector, or floppy disk selector.
see chapter 5.2, disk image files (vdi, vmdk, vhd, hdd), page 91 for information on the
image ﬁle types that are supported by oracle vm virtualbox.

57

3 conﬁguring virtual machines

for virtual cd/dvd drives, the image ﬁles will typically be in the standard iso format
instead. most commonly, you will select this option when installing an os from an iso
ﬁle that you have obtained from the internet. for example, most linux distributions are
available in this way.
depending on the type of disk image, you can set the following attributes for the disk
image in the right part of the storage settings page:
– the device slot of the controller that the virtual disk is connected to. ide controllers
have four slots which have traditionally been called primary master, primary slave,
secondary master, and secondary slave. by contrast, sata and scsi controllers offer
you up to 30 slots for attaching virtual devices.
– solid-state drive presents a virtual disk to the guest as a solid-state device.
– hot-pluggable presents a virtual disk to the guest as a hot-pluggable device.
– for virtual cd/dvd drives, you can select live cd/dvd. this means that the virtual
optical disk is not removed from when the guest system ejects it.
• to remove an attachment, either select it and click on the remove icon at the bottom, or
right-click on it and select the menu item.

removable media, such as cd/dvds and ﬂoppies, can be changed while the guest is running.
since the settings dialog is not available at that time, you can also access these settings from the
devices menu of your virtual machine window.

3.8 audio settings

the audio section in a virtual machine’s settings window determines whether the vm will detect
a connected sound card, and if the audio output should be played on the host system.
to enable audio for a guest, select the enable audio check box. the following settings are
available:

• host audio driver: the audio driver that oracle vm virtualbox uses on the host. on a
linux host, depending on your host conﬁguration, you can select between the oss, alsa,
or the pulseaudio subsystem. on newer linux distributions, the pulseaudio subsystem is
preferred.
only oss is supported on oracle solaris hosts. the oracle solaris audio audio backend is
no longer supported on oracle solaris hosts.
• audio controller: you can choose between the emulation of an intel ac’97 controller, an
intel hd audio controller, or a soundblaster 16 card.
• enable audio output: enables audio output only for the vm.
• enable audio input: enables audio input only for the vm.

3.9 network settings

the network section in a virtual machine’s settings window enables you to conﬁgure how
oracle vm virtualbox presents virtual network cards to your vm, and how they operate.
when you ﬁrst create a virtual machine, oracle vm virtualbox by default enables one virtual
network card and selects the network address translation (nat) mode for it. this way the guest
can connect to the outside world using the host’s networking and the outside world can connect
to services on the guest which you choose to make visible outside of the virtual machine.

58

3 conﬁguring virtual machines

this default setup is good for the majority of oracle vm virtualbox users. however, oracle
vm virtualbox is extremely ﬂexible in how it can virtualize networking. it supports many virtual
network cards per virtual machine. the ﬁrst four virtual network cards can be conﬁgured in
detail in the virtualbox manager window. additional network cards can be conﬁgured using the
vboxmanage command.
many networking options are available. see chapter 6, virtual networking, page 104 for more
information.

3.10 serial ports

oracle vm virtualbox supports the use of virtual serial ports in a virtual machine.
ever since the original ibm pc, personal computers have been equipped with one or two
serial ports, also called com ports by dos and windows. serial ports were commonly used
with modems, and some computer mice used to be connected to serial ports before usb became
commonplace.
while serial ports are no longer as common as they used to be, there are still some important
uses left for them. for example, serial ports can be used to set up a primitive network over
a null-modem cable, in case ethernet is not available. also, serial ports are indispensable for
system programmers needing to do kernel debugging, since kernel debugging software usually
interacts with developers over a serial port. with virtual serial ports, system programmers can
do kernel debugging on a virtual machine instead of needing a real computer to connect to.
if a virtual serial port is enabled, the guest os sees a standard 16550a compatible uart
device. other uart types can be conﬁgured using the vboxmanage modifyvm command. both
receiving and transmitting data is supported. how this virtual serial port is then connected to
the host is conﬁgurable, and the details depend on your host os.
you can use either the settings tabs or the vboxmanage command to set up virtual serial ports.
for the latter, see chapter 8.8, vboxmanage modifyvm, page 145 for information on the --uart ,
--uartmode and --uarttype options.
you can conﬁgure up to four virtual serial ports per virtual machine. for each device, you must
set the following:

1. port number: this determines the serial port that the virtual machine should see. for best
results, use the traditional values as follows:
• com1: i/o base 0x3f8, irq 4
• com2: i/o base 0x2f8, irq 3
• com3: i/o base 0x3e8, irq 4
• com4: i/o base 0x2e8, irq 3
you can also conﬁgure a user-deﬁned serial port. enter an i/o base address and interrupt
(irq).
2. port mode: what the virtual port is connected to. for each virtual serial port, you have
the following options:
• disconnected: the guest will see the device, but it will behave as if no cable had
been connected to it.
• host device: connects the virtual serial port to a physical serial port on your host.
on a windows host, this will be a name like com1 . on linux or oracle solaris hosts, it
will be a device node like /dev/ttys0 . oracle vm virtualbox will then simply redirect
all data received from and sent to the virtual serial port to the physical device.
• host pipe: conﬁgure oracle vm virtualbox to connect the virtual serial port to a
software pipe on the host. this depends on your host os, as follows:

59

3 conﬁguring virtual machines

– on a windows host, data will be sent and received through a named pipe. the
pipe name must be in the format \\.\pipe\name where name should identify the
virtual machine but may be freely chosen.
– on a mac os, linux, or oracle solaris host, a local domain socket is used in-
stead. the socket ﬁlename must be chosen such that the user running oracle vm
virtualbox has sufﬁcient privileges to create and write to it. the /tmp directory is
often a good candidate.
on linux there are various tools which can connect to a local domain socket or
create one in server mode. the most ﬂexible tool is socat and is available as part
of many distributions.
in this case, you can conﬁgure whether oracle vm virtualbox should create the named
pipe, or the local domain socket non-windows hosts, itself or whether oracle vm
virtualbox should assume that the pipe or socket exists already. with the vboxmanage
command-line options, this is referred to as server mode or client mode, respectively.
for a direct connection between two virtual machines, corresponding to a null-modem
cable, simply conﬁgure one vm to create a pipe or socket and another to attach to it.
• raw file: send the virtual serial port output to a ﬁle. this option is very useful for
capturing diagnostic output from a guest. any ﬁle may be used for this purpose, as
long as the user running oracle vm virtualbox has sufﬁcient privileges to create and
write to the ﬁle.
• tcp socket: useful for forwarding serial trafﬁc over tcp/ip, acting as a server, or
it can act as a tcp client connecting to other servers. this option enables a remote
machine to directly connect to the guest’s serial port using tcp.
– tcp server: deselect the connect to existing pipe/socket check box and spec-
ify the port number in the path/address ﬁeld. this is typically 23 or 2023. note
that on unix-like systems you will have to use a port a number greater than 1024
for regular users.
the client can use software such as putty or the telnet command line tool to
access the tcp server.
– tcp client: to create a virtual null-modem cable over the internet or lan,
the other side can connect using tcp by specifying hostname:port in the
path/address ﬁeld. the tcp socket will act in client mode if you select the
connect to existing pipe/socket check box.

up to four serial ports can be conﬁgured per virtual machine, but you can pick any port
numbers out of the above. however, serial ports cannot reliably share interrupts. if both ports
are to be used at the same time, they must use different interrupt levels, for example com1 and
com2, but not com1 and com3.

3.11 usb support
3.11.1 usb settings
the usb section in a virtual machine’s settings window enables you to conﬁgure oracle vm
virtualbox’s sophisticated usb support.
oracle vm virtualbox can enable virtual machines to access the usb devices on your host di-
rectly. to achieve this, oracle vm virtualbox presents the guest os with a virtual usb controller.
as soon as the guest system starts using a usb device, it will appear as unavailable on the host.

60

3 conﬁguring virtual machines

note:

• be careful with usb devices that are currently in use on the host. for example, if
you allow your guest to connect to your usb hard disk that is currently mounted
on the host, when the guest is activated, it will be disconnected from the host
without a proper shutdown. this may cause data loss.
• oracle solaris hosts have a few known limitations regarding usb support. see
chapter 14, known limitations, page 332.

in addition to allowing a guest access to your local usb devices, oracle vm virtualbox even
enables your guests to connect to remote usb devices by use of the virtualbox remote desktop
extension (vrde). see chapter 7.1.4, remote usb, page 121.
to enable usb for a vm, select the enable usb controller check box. the following settings
are available:

• usb controller: selects a controller with the speciﬁed level of usb support, as follows:
– ohci for usb 1.1
– ehci for usb 2.0. this also enables ohci.
– xhci for usb 3.0. this supports all usb speeds.

note: the xhci and ehci controllers are shipped as an oracle vm virtualbox extension
package, which must be installed separately. see chapter 1.5, installing oracle vm
virtualbox and extension packs, page 6.

• usb device filters: when usb support is enabled for a vm, you can determine in detail
which devices will be automatically attached to the guest. for this, you can create ﬁlters by
specifying certain properties of the usb device. usb devices with a matching ﬁlter will be
automatically passed to the guest once they are attached to the host. usb devices without
a matching ﬁlter can be passed manually to the guest, for example by using the devices,
usb menu.
clicking on the + button to the right of the usb device filters window creates a new
ﬁlter. you can give the ﬁlter a name, for later reference, and specify the ﬁlter criteria. the
more criteria you specify, the more precisely devices will be selected. for instance, if you
specify only a vendor id of 046d, all devices produced by logitech will be available to the
guest. if you ﬁll in all ﬁelds, on the other hand, the ﬁlter will only apply to a particular
device model from a particular vendor, and not even to other devices of the same type with
a different revision and serial number.
in detail, the following criteria are available:
– vendor and product id. with usb, each vendor of usb products carries an identi-
ﬁcation number that is unique world-wide, called the vendor id. similarly, each line
of products is assigned a product id number. both numbers are commonly written
in hexadecimal, and a colon separates the vendor from the product id. for example,
046d:c016 stands for logitech as a vendor, and the m-uv69a optical wheel mouse
product.
alternatively, you can also specify manufacturer and product by name.
to list all the usb devices that are connected to your host machine with their respec-
tive vendor ids and product ids, use the following command:

vboxmanage list usbhost

61

3 conﬁguring virtual machines

on windows, you can also see all usb devices that are attached to your system in the
device manager. on linux, you can use the lsusb command.
– serial number. while vendor id and product id are quite speciﬁc to identify usb
devices, if you have two identical devices of the same brand and product line, you
will also need their serial numbers to ﬁlter them out correctly.
– remote. this setting speciﬁes whether the device will be local only, remote only, such
as over vrdp, or either.
on a windows host, you will need to unplug and reconnect a usb device to use it after
creating a ﬁlter for it.
as an example, you could create a new usb ﬁlter and specify a vendor id of 046d for
logitech, inc, a manufacturer index of 1, and “not remote”. then any usb devices on the
host system produced by logitech, inc with a manufacturer index of 1 will be visible to the
guest system.
several ﬁlters can select a single device. for example, a ﬁlter which selects all logitech
devices, and one which selects a particular webcam.
you can deactivate ﬁlters without deleting them by deselecting the check box next to the
ﬁlter name.

3.11.2 implementation notes for windows and linux hosts
on windows hosts, a kernel mode device driver provides usb proxy support. it implements both
a usb monitor, which enables oracle vm virtualbox to capture devices when they are plugged
in, and a usb device driver to claim usb devices for a particular virtual machine. system reboots
are not necessary after installing the driver. also, you do not need to replug devices for oracle
vm virtualbox to claim them.
on supported linux hosts, oracle vm virtualbox accesses usb devices through special ﬁles in
the ﬁle system. when oracle vm virtualbox is installed, these are made available to all users in
the vboxusers system group. in order to be able to access usb from guest systems, make sure
that you are a member of this group.

3.12 shared folders

shared folders enable you to easily exchange data between a virtual machine and your host. this
feature requires that the oracle vm virtualbox guest additions be installed in a virtual machine
and is described in detail in chapter 4.3, shared folders, page 74.

3.13 user interface

the user interface section enables you to change certain aspects of the user interface of this
vm.
• menu bar: this widget enables you to disable menus by clicking on the menu to release
it, menu entries by deselecting the check box of the entry to disable it and the complete
menu bar by deselecting the rightmost check box.
• mini toolbar: in full screen or seamless mode, oracle vm virtualbox can display a small
toolbar that contains some of the items that are normally available from the virtual ma-
chine’s menu bar. this toolbar reduces itself to a small gray line unless you move the
mouse over it. with the toolbar, you can return from full screen or seamless mode, control
machine execution or enable certain devices. if you do not want to see the toolbar, disable
this setting.

62

3 conﬁguring virtual machines

the second setting enables you to show the toolbar at the top of the screen, instead of
showing it at the bottom.
• status bar: this widget enables you to disable icons on the status bar by deselecting the
check box of an icon to disable it, to rearrange icons by dragging and dropping the icon,
and to disable the complete status bar by deselecting the leftmost check box.

3.14 alternative firmware (efi)

oracle vm virtualbox includes experimental support for the extensible firmware interface (efi),
which is an industry standard intended to replace the legacy bios as the primary interface for
bootstrapping computers and certain system services later.
by default, oracle vm virtualbox uses the bios ﬁrmware for virtual machines. to use efi for
a given virtual machine, you can enable efi in the machine’s settings dialog. see chapter 3.5.1,
motherboard tab, page 52. alternatively, use the vboxmanage command line interface as follows:

vboxmanage modifyvm "vm name" --firmware efi

to switch back to using the bios:

vboxmanage modifyvm "vm name" --firmware bios

one notable user of efi is apple mac os x. more recent linux versions and windows releases,
starting with vista, also offer special versions that can be booted using efi.
another possible use of efi in oracle vm virtualbox is development and testing of efi appli-
cations, without booting any os.
note that the oracle vm virtualbox efi support is experimental and will be enhanced as
efi matures and becomes more widespread. mac os x, linux, and newer windows guests are
known to work ﬁne. windows 7 guests are unable to boot with the oracle vm virtualbox efi
implementation.

3.14.1 video modes in efi
efi provides two distinct video interfaces: gop (graphics output protocol) and uga (universal
graphics adapter). modern oses, such as mac os x, generally use gop, while some older
ones still use uga. oracle vm virtualbox provides a conﬁguration option to control the graphics
resolution for both interfaces, making the difference mostly irrelevant for users.
the default resolution is 1024x768. to select a graphics resolution for efi, use the following
vboxmanage command:

vboxmanage setextradata "vm name" vboxinternal2/efigraphicsresolution hxv

determine the horizontal resolution h and the vertical resolution v from the following list of
default resolutions:
vga

640x480, 32bpp, 4:3
svga

800x600, 32bpp, 4:3
xga

1024x768, 32bpp, 4:3

63

3 conﬁguring virtual machines

xga+

1152x864, 32bpp, 4:3
hd

1280x720, 32bpp, 16:9
wxga

1280x800, 32bpp, 16:10
sxga

1280x1024, 32bpp, 5:4
sxga+

1400x1050, 32bpp, 4:3
wxga+

1440x900, 32bpp, 16:10
hd+

1600x900, 32bpp, 16:9
uxga

1600x1200, 32bpp, 4:3
wsxga+

1680x1050, 32bpp, 16:10
full hd

1920x1080, 32bpp, 16:9
wuxga

1920x1200, 32bpp, 16:10
dci 2k

2048x1080, 32bpp, 19:10
full hd+

2160x1440, 32bpp, 3:2
unnamed

2304x1440, 32bpp, 16:10

64

3 conﬁguring virtual machines

qhd

2560x1440, 32bpp, 16:9
wqxga

2560x1600, 32bpp, 16:10
qwxga+

2880x1800, 32bpp, 16:10
qhd+

3200x1800, 32bpp, 16:9
wqsxga

3200x2048, 32bpp, 16:10
4k uhd

3840x2160, 32bpp, 16:9
wquxga

3840x2400, 32bpp, 16:10
dci 4k

4096x2160, 32bpp, 19:10
hxga

4096x3072, 32bpp, 4:3
uhd+

5120x2880, 32bpp, 16:9
whxga

5120x3200, 32bpp, 16:10
whsxga

6400x4096, 32bpp, 16:10
huxga

6400x4800, 32bpp, 4:3
8k uhd2

7680x4320, 32bpp, 16:9

65

3 conﬁguring virtual machines

if this list of default resolution does not cover your needs, see chapter 9.6.1, custom vesa
resolutions, page 250. note that the color depth value speciﬁed in a custom video mode must
be speciﬁed. color depths of 8, 16, 24, and 32 are accepted. efi assumes a color depth of 32 by
default.
the efi default video resolution settings can only be changed when the vm is powered off.

3.14.2 specifying boot arguments
it is currently not possible to manipulate efi variables from within a running guest. for example,
setting the boot-args variable by running the nvram tool in a mac os x guest will not work.
as an alternative method, vboxinternal2/efibootargs extradata can be passed to a vm in
order to set the boot-args variable. to change the boot-args efi variable, use the following
command:

vboxmanage setextradata "vm name" vboxinternal2/efibootargs <value>

66

4 guest additions

the previous chapter covered getting started with oracle vm virtualbox and installing operating
systems in a virtual machine. for any serious and interactive use, the oracle vm virtualbox
guest additions will make your life much easier by providing closer integration between host
and guest and improving the interactive performance of guest systems. this chapter describes
the guest additions in detail.

4.1 introduction to guest additions
as mentioned in chapter 1.2, some terminology, page 2, the guest additions are designed to
be installed inside a virtual machine after the guest operating system has been installed. they
consist of device drivers and system applications that optimize the guest operating system for
better performance and usability. see chapter 3.1, supported guest operating systems, page 45
for details on what guest operating systems are fully supported with guest additions by oracle
vm virtualbox.
the oracle vm virtualbox guest additions for all supported guest operating systems are pro-
vided as a single cd-rom image ﬁle which is called vboxguestadditions.iso . this image ﬁle
is located in the installation directory of oracle vm virtualbox. to install the guest additions for
a particular vm, you mount this iso ﬁle in your vm as a virtual cd-rom and install from there.
the guest additions offer the following features:
• mouse pointer integration. to overcome the limitations for mouse support described in
chapter 1.8.2, capturing and releasing keyboard and mouse, page 12, this feature provides
you with seamless mouse support. you will only have one mouse pointer and pressing the
host key is no longer required to free the mouse from being captured by the guest os. to
make this work, a special mouse driver is installed in the guest that communicates with the
physical mouse driver on your host and moves the guest mouse pointer accordingly.
• shared folders. these provide an easy way to exchange ﬁles between the host and the
guest. much like ordinary windows network shares, you can tell oracle vm virtualbox
to treat a certain host directory as a shared folder, and oracle vm virtualbox will make
it available to the guest operating system as a network share, irrespective of whether the
guest actually has a network. see chapter 4.3, shared folders, page 74.
• better video support. while the virtual graphics card which oracle vm virtualbox emu-
lates for any guest operating system provides all the basic features, the custom video drivers
that are installed with the guest additions provide you with extra high and non-standard
video modes, as well as accelerated video performance.
in addition, with windows, linux, and oracle solaris guests, you can resize the virtual
machine’s window if the guest additions are installed. the video resolution in the guest
will be automatically adjusted, as if you had manually entered an arbitrary resolution in
the guest’s display settings. see chapter 1.8.5, resizing the machine’s window, page 14.
if the guest additions are installed, 3d graphics and 2d video for guest applications can
be accelerated. see chapter 4.5, hardware-accelerated graphics, page 79.
• seamless windows. with this feature, the individual windows that are displayed on the
desktop of the virtual machine can be mapped on the host’s desktop, as if the underlying
application was actually running on the host. see chapter 4.6, seamless windows, page 80.

67

4 guest additions

• generic host/guest communication channels. the guest additions enable you to control
and monitor guest execution. the guest properties provide a generic string-based mecha-
nism to exchange data bits between a guest and a host, some of which have special mean-
ings for controlling and monitoring the guest. see chapter 4.7, guest properties, page 81.
additionally, applications can be started in a guest from the host. see chapter 4.9, guest
control of applications, page 84.
• time synchronization. with the guest additions installed, oracle vm virtualbox can
ensure that the guest’s system time is better synchronized with that of the host.
for various reasons, the time in the guest might run at a slightly different rate than the
time on the host. the host could be receiving updates through ntp and its own time might
not run linearly. a vm could also be paused, which stops the ﬂow of time in the guest for a
shorter or longer period of time. when the wall clock time between the guest and host only
differs slightly, the time synchronization service attempts to gradually and smoothly adjust
the guest time in small increments to either catch up or lose time. when the difference
is too great, for example if a vm paused for hours or restored from saved state, the guest
time is changed immediately, without a gradual adjustment.
the guest additions will resynchronize the time regularly. see chapter 9.11.3, tuning
the guest additions time synchronization parameters, page 260 for how to conﬁgure the
parameters of the time synchronization mechanism.
• shared clipboard. with the guest additions installed, the clipboard of the guest operating
system can optionally be shared with your host operating system. see chapter 3.4, general
settings, page 50.
• automated logins. also called credentials passing. see chapter 9.1, automated guest
logins, page 242.

each version of oracle vm virtualbox, even minor releases, ship with their own version of the
guest additions. while the interfaces through which the oracle vm virtualbox core communi-
cates with the guest additions are kept stable so that guest additions already installed in a vm
should continue to work when oracle vm virtualbox is upgraded on the host, for best results, it
is recommended to keep the guest additions at the same version.
the windows and linux guest additions therefore check automatically whether they have
to be updated. if the host is running a newer oracle vm virtualbox version than the guest
additions, a notiﬁcation with further instructions is displayed in the guest.
to disable this update check for the guest additions of a given virtual machine, set the value
of its /virtualbox/guestadd/checkhostversion guest property to 0 . see chapter 4.7, guest
properties, page 81.

4.2 installing and maintaining guest additions

guest additions are available for virtual machines running windows, linux, oracle solaris, or
os/2. the following sections describe the speciﬁcs of each variant in detail.

4.2.1 guest additions for windows
the oracle vm virtualbox windows guest additions are designed to be installed in a virtual
machine running a windows operating system. the following versions of windows guests are
supported:

• microsoft windows nt 4.0 (any service pack)
• microsoft windows 2000 (any service pack)

68

4 guest additions

• microsoft windows xp (any service pack)
• microsoft windows server 2003 (any service pack)
• microsoft windows server 2008
• microsoft windows vista (all editions)
• microsoft windows 7 (all editions)
• microsoft windows 8 (all editions)
• microsoft windows 10 rtm build 10240
• microsoft windows server 2012

4.2.1.1 installing the windows guest additions
in the devices menu in the virtual machine’s menu bar, oracle vm virtualbox has a menu item
insert guest additions cd image, which mounts the guest additions iso ﬁle inside your virtual
machine. a windows guest should then automatically start the guest additions installer, which
installs the guest additions on your windows guest.
for other guest operating systems, or if automatic start of software on a cd is disabled, you
need to do a manual start of the installer.

note: for the basic direct3d acceleration to work in a windows guest, you have to
install the wddm video driver available for windows vista or later.
for windows 8 and later, only the wddm direct3d video driver is available. for basic
direct3d acceleration to work in windows xp guests, you have to install the guest
additions in safe mode. see chapter 14, known limitations, page 332 for details.

if you prefer to mount the guest additions manually, you can perform the following steps:

1. start the virtual machine in which you have installed windows.
2. select optical drives from the devices menu in the virtual machine’s menu bar and then
choose/create a disk image. this displays the virtual media manager, described in
chapter 5.3, the virtual media manager, page 92.
3. in the virtual media manager, click add and browse your host ﬁle system for the
vboxguestadditions.iso ﬁle.
• on a windows host, this ﬁle is in the oracle vm virtualbox installation directory,
usually in c:\program files\oracle\virtualbox .
• on mac os x hosts, this ﬁle is in the application bundle of oracle vm virtualbox.
right-click on the oracle vm virtualbox icon in finder and choose show package
contents. the ﬁle is located in the contents/macos folder.
• on a linux host, this ﬁle is in the additions folder where you installed oracle vm
virtualbox, usually /opt/virtualbox/ .
• on oracle solaris hosts, this ﬁle is in the additions folder where you installed oracle
vm virtualbox, usually /opt/virtualbox .
4. in the virtual media manager, select the iso ﬁle and click the add button. this mounts the
iso ﬁle and presents it to your windows guest as a cd-rom.

69

4 guest additions

unless you have the autostart feature disabled in your windows guest, windows will now
autostart the oracle vm virtualbox guest additions installation program from the additions
iso. if the autostart feature has been turned off, choose vboxwindowsadditions.exe from the
cd/dvd drive inside the guest to start the installer.
the installer will add several device drivers to the windows driver database and then invoke
the hardware detection wizard.
depending on your conﬁguration, it might display warnings that the drivers are not digitally
signed. you must conﬁrm these in order to continue the installation and properly install the
additions.
after installation, reboot your guest operating system to activate the additions.

4.2.1.2 updating the windows guest additions
windows guest additions can be updated by running the installation program again. this re-
places the previous additions drivers with updated versions.
alternatively, you can also open the windows device manager and select update driver... for
the following devices:

• oracle vm virtualbox graphics adapter
• oracle vm virtualbox system device

for each, choose the option to provide your own driver, click have disk and navigate to the
cd-rom drive with the guest additions.

4.2.1.3 unattended installation
to avoid popups when performing an unattended installation of the oracle vm virtualbox guest
additions, the code signing certiﬁcates used to sign the drivers needs to be installed in the correct
certiﬁcate stores on the guest operating system. failure to do this will cause a typical windows
installation to display multiple dialogs asking whether you want to install a particular driver.

note: on some windows versions, such as windows 2000 and windows xp, the user
intervention popups mentioned above are always displayed, even after importing the
oracle certiﬁcates.

installing the code signing certiﬁcates on a windows guest can be done automatically. use the
vboxcertutil.exe utility from the cert folder on the guest additions installation cd.
use the following steps:

1. log in as administrator on the guest.
2. mount the oracle vm virtualbox guest additions .iso.
3. open a command line window on the guest and change to the cert folder on the oracle
vm virtualbox guest additions cd.
4. run the following command:

vboxcertutil.exe add-trusted-publisher vbox*.cer --root vbox*.cer

this command installs the certiﬁcates to the certiﬁcate store. when installing the same
certiﬁcate more than once, an appropriate error will be displayed.

to allow for completely unattended guest installations, you can specify a command line pa-
rameter to the install launcher:

70

4 guest additions

vboxwindowsadditions.exe /s

this automatically installs the right ﬁles and drivers for the corresponding platform, either
32-bit or 64-bit.

note: by default on an unattended installation on a vista or windows 7 guest, there
will be the xpdm graphics driver installed. this graphics driver does not support win-
dows aero / direct3d on the guest. instead, the wddm graphics driver needs to be
installed. to select this driver by default, add the command line parameter /with_wddm
when invoking the windows guest additions installer. this is only required for vista
and windows 7.

note: for windows aero to run correctly on a guest, the guest’s vram size needs to
be conﬁgured to at least 128 mb.

for more options regarding unattended guest installations, consult the command line help by
using the command:

vboxwindowsadditions.exe /?

4.2.1.4 manual file extraction
if you would like to install the ﬁles and drivers manually, you can extract the ﬁles from the
windows guest additions setup as follows:

vboxwindowsadditions.exe /extract

to explicitly extract the windows guest additions for another platform than the current run-
ning one, such as 64-bit ﬁles on a 32-bit system, you must use the appropriate platform in-
staller. use vboxwindowsadditions-x86.exe or vboxwindowsadditions-amd64.exe with the
/extract parameter.

4.2.2 guest additions for linux
like the windows guest additions, the oracle vm virtualbox guest additions for linux are a set
of device drivers and system applications which may be installed in the guest operating system.
the following linux distributions are ofﬁcially supported:

• oracle linux as of version 5, including uek kernels
• fedora as of fedora core 4
• red hat enterprise linux as of version 3
• suse and opensuse linux as of version 9
• ubuntu as of version 5.10

many other distributions are known to work with the guest additions.
the version of the linux kernel supplied by default in suse and opensuse 10.2, ubuntu 6.10
(all versions) and ubuntu 6.06 (server edition) contains a bug which can cause it to crash during
startup when it is run in a virtual machine. the guest additions work in those distributions.
note that some linux distributions already come with all or part of the oracle vm virtualbox
guest additions. you may choose to keep the distribution’s version of the guest additions but

71

4 guest additions

these are often not up to date and limited in functionality, so we recommend replacing them with
the guest additions that come with oracle vm virtualbox. the oracle vm virtualbox linux guest
additions installer tries to detect an existing installation and replace them but depending on how
the distribution integrates the guest additions, this may require some manual interaction. it is
highly recommended to take a snapshot of the virtual machine before replacing preinstalled
guest additions.

4.2.2.1 installing the linux guest additions
the oracle vm virtualbox guest additions for linux are provided on the same virtual cd-rom
ﬁle as the guest additions for windows. see chapter 4.2.1.1, installing the windows guest addi-
tions, page 69. they also come with an installation program that guides you through the setup
process. however, due to the signiﬁcant differences between linux distributions, installation
may be slightly more complex when compared to windows.
installation generally involves the following steps:

1. before installing the guest additions, you prepare your guest system for building external
kernel modules. this works as described in chapter 2.3.2, the oracle vm virtualbox kernel
modules, page 37, except that this step must be performed in your linux guest instead of
on a linux host system.
if you suspect that something has gone wrong, check that your guest is set up correctly and
run the following command as root:

rcvboxadd setup

2. insert the vboxguestadditions.iso cd ﬁle into your linux guest’s virtual cd-rom drive,
as described for a windows guest in chapter 4.2.1.1, installing the windows guest additions,
page 69.
3. change to the directory where your cd-rom drive is mounted and run the following com-
mand as root:

sh ./vboxlinuxadditions.run

4.2.2.2 graphics and mouse integration
in linux and oracle solaris guests, oracle vm virtualbox graphics and mouse integration goes
through the x window system. oracle vm virtualbox can use the x.org variant of the system, or
xfree86 version 4.3 which is identical to the ﬁrst x.org release. during the installation process,
the x.org display server will be set up to use the graphics and mouse drivers which come with
the guest additions.
after installing the guest additions into a fresh installation of a supported linux distribution
or oracle solaris system, many unsupported systems will work correctly too, the guest’s graphics
mode will change to ﬁt the size of the oracle vm virtualbox window on the host when it is
resized. you can also ask the guest system to switch to a particular resolution by sending a video
mode hint using the vboxmanage tool.
multiple guest monitors are supported in guests using the x.org server version 1.3, which is
part of release 7.3 of the x window system version 11, or a later version. the layout of the guest
screens can be adjusted as needed using the tools which come with the guest operating system.
if you want to understand more about the details of how the x.org drivers are set up, in
particular if you wish to use them in a setting which our installer does not handle correctly, see
chapter 9.3.2, guest graphics and mouse driver setup in depth, page 247.

72

4 guest additions

4.2.2.3 updating the linux guest additions
the guest additions can simply be updated by going through the installation procedure again
with an updated cd-rom image. this will replace the drivers with updated versions. you should
reboot after updating the guest additions.

4.2.2.4 uninstalling the linux guest additions
if you have a version of the guest additions installed on your virtual machine and wish to remove
it without installing new ones, you can do so by inserting the guest additions cd image into the
virtual cd-rom drive as described above. then run the installer for the current guest additions
with the uninstall parameter from the path that the cd image is mounted on in the guest, as
follows:

sh ./vboxlinuxadditions.run uninstall

while this will normally work without issues, you may need to do some manual cleanup of
the guest in some cases, especially of the xfree86conﬁg or xorg.conf ﬁle. in particular, if the
additions version installed or the guest operating system were very old, or if you made your own
changes to the guest additions setup after you installed them.
you can uninstall the additions as follows:

/opt/vboxguestadditions-<version>/uninstall.sh

replace /opt/vboxguestadditions-version with the correct guest additions installation
directory.

4.2.3 guest additions for oracle solaris
like the windows guest additions, the oracle vm virtualbox guest additions for oracle solaris
take the form of a set of device drivers and system applications which may be installed in the
guest operating system.
the following oracle solaris distributions are ofﬁcially supported:
• oracle solaris 11, including oracle solaris 11 express
• oracle solaris 10 4/08 and later
other distributions may work if they are based on comparable software releases.

4.2.3.1 installing the oracle solaris guest additions
the oracle vm virtualbox guest additions for oracle solaris are provided on the same iso cd-
rom as the additions for windows and linux. they come with an installation program that
guides you through the setup process.
installation involves the following steps:
1. mount the vboxguestadditions.iso ﬁle as your oracle solaris guest’s virtual cd-rom
drive, exactly the same way as described for a windows guest in chapter 4.2.1.1, installing
the windows guest additions, page 69.
if the cd-rom drive on the guest does not get mounted, as seen with some versions of
oracle solaris 10, run the following command as root:

svcadm restart volfs

2. change to the directory where your cd-rom drive is mounted and run the following com-
mand as root:

73

4 guest additions

pkgadd -g -d ./vboxsolarisadditions.pkg

3. choose 1 and conﬁrm installation of the guest additions package. after the installation is
complete, log out and log in to x server on your guest, to activate the x11 guest additions.

4.2.3.2 uninstalling the oracle solaris guest additions
the oracle solaris guest additions can be safely removed by removing the package from the
guest. open a root terminal session and run the following command:

pkgrm sunwvboxguest

4.2.3.3 updating the oracle solaris guest additions
the guest additions should be updated by ﬁrst uninstalling the existing guest additions and
then installing the new ones. attempting to install new guest additions without removing the
existing ones is not possible.

4.2.4 guest additions for os/2
oracle vm virtualbox also ships with a set of drivers that improve running os/2 in a virtual
machine. due to restrictions of os/2 itself, this variant of the guest additions has a limited
feature set. see chapter 14, known limitations, page 332 for details.
the os/2 guest additions are provided on the same iso cd-rom as those for the other
platforms. mount the iso in os/2 as described previously. the os/2 guest additions are located
in the directory \os2 .
we do not provide an automatic installer at this time. see the readme.txt ﬁle in the cd-rom
directory, which describes how to install the os/2 guest additions manually.

4.3 shared folders
with the shared folders feature of oracle vm virtualbox, you can access ﬁles of your host system
from within the guest system. this is similar to how you would use network shares in windows
networks, except that shared folders do not require networking, only the guest additions. shared
folders are supported with windows 2000 or later, linux, and oracle solaris guests. oracle vm
virtualbox includes experimental support for mac os x and os/2 guests.
shared folders physically reside on the host and are then shared with the guest, which uses a
special ﬁle system driver in the guest additions to talk to the host. for windows guests, shared
folders are implemented as a pseudo-network redirector. for linux and oracle solaris guests,
the guest additions provide a virtual ﬁle system.
to share a host folder with a virtual machine in oracle vm virtualbox, you must specify the
path of the folder and choose a share name that the guest can use to access the shared folder.
this happens on the host. in the guest you can then use the share name to connect to it and
access ﬁles.
there are several ways in which shared folders can be set up for a virtual machine:
• in the window of a running vm, you select shared folders from the devices menu, or
click on the folder icon on the status bar in the bottom right corner.
• if a vm is not currently running, you can conﬁgure shared folders in the virtual machine’s
settings dialog.
• from the command line, you can create shared folders using vboxmanage , as follows:

vboxmanage sharedfolder add "vm name" --name "sharename" --hostpath "c:\test"

74

4 guest additions

see chapter 8.40, vboxmanage sharedfolder, page 210.

there are two types of shares:

• permanent shares, that are saved with the vm settings.
• transient shares, that are added at runtime and disappear when the vm is powered
off. these can be created using a checkbox in the virtualbox manager, or by using the
--transient option of the vboxmanage sharedfolder add command.

shared folders can either be read-write or read-only. this means that the guest is either
allowed to both read and write, or just read ﬁles on the host. by default, shared folders are
read-write. read-only folders can be created using a checkbox in the virtualbox manager, or
with the --readonly option of the vboxmanage sharedfolder add command.
oracle vm virtualbox shared folders also support symbolic links, also called symlinks, under
the following conditions:

• the host operating system must support symlinks. for example, a mac os x, linux, or
oracle solaris host is required.
• currently only linux and oracle solaris guest additions support symlinks.
• for security reasons the guest os is not allowed to create symlinks by default. if you trust
the guest os to not abuse the functionality, you can enable creation of symlinks for a shared
folder as follows:

vboxmanage setextradata "vm name" vboxinternal2/sharedfoldersenablesymlinkscreate/<sharename> 1

4.3.1 manual mounting
you can mount the shared folder from inside a vm, in the same way as you would mount an
ordinary network share:

• in a windows guest, shared folders are browseable and therefore visible in windows ex-
plorer. to attach the host’s shared folder to your windows guest, open windows explorer
and look for the folder in my networking places, entire network, oracle vm virtualbox
shared folders. by right-clicking on a shared folder and selecting map network drive
from the menu that pops up, you can assign a drive letter to that shared folder.
alternatively, on the windows command line, use the following command:

net use x: \\vboxsvr\sharename

while vboxsvr is a ﬁxed name, note that vboxsrv would also work, replace x: with
the drive letter that you want to use for the share, and sharename with the share name
speciﬁed with vboxmanage .
• in a linux guest, use the following command:

mount -t vboxsf [-o options] sharename mountpoint

to mount a shared folder during boot, add the following entry to /etc/fstab :

sharename mountpoint vboxsf defaults 0 0

• in a oracle solaris guest, use the following command:

75

4 guest additions

mount -f vboxfs [-o options] sharename mountpoint

replace sharename , use a lowercase string, with the share name speciﬁed with
vboxmanage or the virtualbox manager. replace mountpoint with the path where you
want the share to be mounted on the guest, such as /mnt/share . the usual mount rules
apply. for example, create this directory ﬁrst if it does not exist yet.
here is an example of mounting the shared folder for the user jack on oracle solaris:

$ id
uid=5000(jack) gid=1(other)
$ mkdir /export/home/jack/mount
$ pfexec mount -f vboxfs -o uid=5000,gid=1 jackshare /export/home/jack/mount
$ cd ~/mount
$ ls
sharedfile1.mp3 sharedfile2.txt
$

beyond the standard options supplied by the mount command, the following are available:

iocharset charset

this option sets the character set used for i/o operations. note that on linux guests, if the
iocharset option is not speciﬁed, then the guest additions driver will attempt to use the
character set speciﬁed by the config_nls_default kernel option. if this option is not
set either, then utf-8 is used.

convertcp charset

this option speciﬁes the character set used for the shared folder name. this is utf-8 by
default.
the generic mount options, documented in the mount manual page, apply also. especially
useful are the options uid , gid and mode , as they can allow access by normal users in
read/write mode, depending on the settings, even if root has mounted the ﬁlesystem.
• in an os/2 guest, use the vboxcontrol command to manage shared folders. for example:

vboxcontrol sharedfolder use d: mysharename
vboxcontrol sharedfolder unuse d:
vboxcontrol sharedfolder list

as with windows guests, shared folders can also be accessed via unc using \\vboxsf\ ,
\\vboxsvr\ or \\vboxsrv\ as the server name and the shared folder name as sharename .

4.3.2 automatic mounting
oracle vm virtualbox provides the option to mount shared folders automatically. when auto-
matic mounting is enabled for a shared folder, the guest additions service will mount it for you
automatically. for windows or os/2, a preferred drive letter can also be speciﬁed. for linux or
oracle solaris, a mount point directory can also be speciﬁed.
if a drive letter or mount point is not speciﬁed, or is in use already, an alternative location is
found by the guest additions service. the service searches for an alternative location depending
on the guest os, as follows:

• windows and os/2 guests. search for a free drive letter, starting at z: . if all drive letters
are assigned, the folder is not mounted.

76

4 guest additions

• linux and oracle solaris guests. folders are mounted under the /media directory. the
folder name is normalized (no spaces, slashes or colons) and is preﬁxed with sf_ .
for example, if you have a shared folder called myfiles , it will appear as
/media/sf_myfiles in the guest.
the guest properties /virtualbox/guestadd/sharedfolders/mountdir and the more
generic /virtualbox/guestadd/sharedfolders/mountprefix can be used to override
the automatic mount directory and preﬁx. see chapter 4.7, guest properties, page 81.

access to an automatically mounted shared folder is granted to everyone in a windows guest,
including the guest user. for linux and oracle solaris guests, access is restricted to members of
the group vboxsf and the root user.

4.4 drag and drop

oracle vm virtualbox enables you to drag and drop content from the host to the guest, and vice
versa. for this to work the latest version of the guest additions must be installed on the guest.
drag and drop transparently allows copying or opening ﬁles, directories, and even certain
clipboard formats from one end to the other. for example, from the host to the guest or from the
guest to the host. you then can perform drag and drop operations between the host and a vm,
as it would be a native drag and drop operation on the host os.
at the moment drag and drop is implemented for windows-based and x-windows-based sys-
tems, both on the host and guest side. as x-windows supports many different drag and drop
protocols only the most common one, xdnd, is supported for now. applications using other
protocols, such as motif or ofﬁx, will not be recognized by oracle vm virtualbox.
in the context of using drag and drop, the origin of the data is called the source. that is, where
the actual data comes from and is speciﬁed. the destination speciﬁes where the data from the
source should go to. transferring data from the source to the destination can be done in various
ways, such as copying, moving, or linking.

note: at the moment only copying of data is supported. moving or linking is not yet
implemented.

when transferring data from the host to the guest os, the host in this case is the source,
whereas the guest os is the destination. however, when transferring data from the guest os to
the host, the guest os this time became the source and the host is the destination.
for security reasons drag and drop can be conﬁgured at runtime on a per-vm basis either using
the drag and drop menu item in the devices menu of the virtual machine, as shown below, or
the vboxmanage command.

77

4 guest additions

the following drag and drop modes are available:
• disabled. disables the drag and drop feature entirely. this is the default when creating a
new vm.
• host to guest. enables drag and drop operations from the host to the guest only.
• guest to host. enables drag and drop operations from the guest to the host only.
• bidirectional. enables drag and drop operations in both directions: from the host to the
guest, and from the guest to the host.

note: drag and drop support depends on the frontend being used. at the moment,
only the virtualbox manager frontend provides this functionality.

to use the vboxmanage command to control the current drag and drop mode, see chapter
8, vboxmanage, page 129. the modifyvm and controlvm commands enable setting of a vm’s
current drag and drop mode from the command line.

4.4.1 supported formats
as oracle vm virtualbox can run on a variety of host operating systems and also supports a
wide range of guests, certain data formats must be translated after transfer. this is so that the
destination operating system, which receiving the data, is able to handle them in an appropriate
manner.

note: when dragging ﬁles no data conversion is done in any way. for example, when
transferring a ﬁle from a linux guest to a windows host the linux-speciﬁc line endings
are not converted to windows line endings.

the following formats are handled by the oracle vm virtualbox drag and drop service:
• plain text: from applications such as text editors, internet browsers and terminal win-
dows.
• files: from ﬁle managers such as windows explorer, nautilus, and finder.
• directories: for directories, the same formats apply as for ﬁles.

78

4 guest additions

4.4.2 known limitations
the following limitations are known for drag and drop:
on windows hosts, dragging and dropping content between uac-elevated (user account con-
trol) programs and non-uac-elevated programs is not allowed. if you start oracle vm virtualbox
with administrator privileges then drag and drop will not work with windows explorer, which
runs with regular user privileges by default.
on linux hosts and guests, programs can query for drag and drop data while the drag oper-
ation still is in progress (e.g. on lxde using the pcmanfm ﬁle manager). this currently is not
supported.
as a workaround, a different ﬁle manager (e.g. nautilus) can be used instead.

4.5 hardware-accelerated graphics
4.5.1 hardware 3d acceleration (opengl and direct3d 8/9)
the oracle vm virtualbox guest additions contain experimental hardware 3d support for win-
dows, linux, and oracle solaris guests.
with this feature, if an application inside your virtual machine uses 3d features through the
opengl or direct3d 8/9 programming interfaces, instead of emulating them in software, which
would be slow, oracle vm virtualbox will attempt to use your host’s 3d hardware. this works
for all supported host platforms, provided that your host operating system can make use of your
accelerated 3d hardware in the ﬁrst place.
the 3d acceleration feature currently has the following preconditions:
• it is only available for certain windows, linux, and oracle solaris guests. in particular:
– 3d acceleration with windows guests requires windows 2000 or later. apart from on
windows 2000 guests, both opengl and direct3d 8/9 are supported on an experi-
mental basis.
– opengl on linux requires kernel 2.6.27 or later, as well as x.org server version 1.5 or
later. ubuntu 10.10 and fedora 14 have been tested and conﬁrmed as working.
– opengl on oracle solaris guests requires x.org server version 1.5 or later.
• the guest additions must be installed.

note: for the basic direct3d acceleration to work in a windows guest, oracle vm
virtualbox needs to replace windows system ﬁles in the virtual machine. as a result,
the guest additions installation program offers direct3d acceleration as an option that
must be explicitly enabled. also, you must install the guest additions in safe mode.
this does not apply to the wddm direct3d video driver available for windows vista
and later. see chapter 14, known limitations, page 332 for details.

• because 3d support is still experimental at this time, it is disabled by default and must be
manually enabled in the vm settings. see chapter 3.6, display settings, page 54.

note: untrusted guest systems should not be allowed to use the 3d acceleration fea-
tures of oracle vm virtualbox, just as untrusted host software should not be allowed
to use 3d acceleration. drivers for 3d hardware are generally too complex to be made
properly secure and any software which is allowed to access them may be able to com-
promise the operating system running them. in addition, enabling 3d acceleration
gives the guest direct access to a large body of additional program code in the ora-
cle vm virtualbox host process which it might conceivably be able to use to crash the
virtual machine.

79

4 guest additions

to enable aero theme support, the oracle vm virtualbox wddm video driver must be in-
stalled, which is available with the guest additions installation. the wddm driver is not in-
stalled by default for vista and windows 7 guests and must be manually selected in the guest
additions installer by clicking no in the would you like to install basic direct3d support
dialog displayed when the direct3d feature is selected.
the aero theme is not enabled by default on windows. see your windows platform documen-
tation for details of how to enable the aero theme.
technically, oracle vm virtualbox implements 3d acceleration by installing an additional hard-
ware 3d driver inside the guest when the guest additions are installed. this driver acts as a
hardware 3d driver and reports to the guest operating system that the virtual hardware is ca-
pable of 3d hardware acceleration. when an application in the guest then requests hardware
acceleration through the opengl or direct3d programming interfaces, these are sent to the host
through a special communication tunnel implemented by oracle vm virtualbox. the host then
performs the requested 3d operation using the host’s programming interfaces.

4.5.2 hardware 2d video acceleration for windows guests
the oracle vm virtualbox guest additions contain experimental hardware 2d video acceleration
support for windows guests.
with this feature, if an application such as a video player inside your windows vm uses 2d
video overlays to play a movie clip, then oracle vm virtualbox will attempt to use your host’s
video acceleration hardware instead of performing overlay stretching and color conversion in
software, which would be slow. this currently works for windows, linux and mac os x host
platforms, provided that your host operating system can make use of 2d video acceleration in
the ﬁrst place.
hardware 2d video acceleration currently has the following preconditions:

• only available for windows guests, running windows xp or later.
• guest additions must be installed.
• because 2d support is still experimental at this time, it is disabled by default and must be
manually enabled in the vm settings. see chapter 3.6, display settings, page 54.

technically, oracle vm virtualbox implements this by exposing video overlay directdraw ca-
pabilities in the guest additions video driver. the driver sends all overlay commands to the host
through a special communication tunnel implemented by oracle vm virtualbox. on the host
side, opengl is then used to implement color space transformation and scaling.

4.6 seamless windows
with the seamless windows feature of oracle vm virtualbox, you can have the windows that are
displayed within a virtual machine appear side by side next to the windows of your host. this
feature is supported for the following guest operating systems, provided that the guest additions
are installed:

• windows guests.
• supported linux or oracle solaris guests running the x window system.

after seamless windows are enabled, oracle vm virtualbox suppresses the display of the desk-
top background of your guest, allowing you to run the windows of your guest operating system
seamlessly next to the windows of your host.

80

4 guest additions

to enable seamless mode, after starting the virtual machine, press the host key + l. the host
key is normally the right control key. this will enlarge the size of the vm’s display to the size
of your host screen and mask out the guest operating system’s background. to disable seamless
windows and go back to the normal vm display, press the host key + l again.

4.7 guest properties

oracle vm virtualbox enables requests of some properties from a running guest, provided that
the oracle vm virtualbox guest additions are installed and the vm is running. this provides the
following advantages:

• a number of predeﬁned vm characteristics are automatically maintained by oracle vm
virtualbox and can be retrieved on the host. for example, to monitor vm performance and
statistics.
• arbitrary string data can be exchanged between guest and host. this works in both direc-
tions.

to accomplish this, oracle vm virtualbox establishes a private communication channel be-
tween the oracle vm virtualbox guest additions and the host, and software on both sides can
use this channel to exchange string data for arbitrary purposes. guest properties are simply
string keys to which a value is attached. they can be set, or written to, by either the host and
the guest. they can also be read from both sides.
in addition to establishing the general mechanism of reading and writing values, a set of prede-
ﬁned guest properties is automatically maintained by the oracle vm virtualbox guest additions
to allow for retrieving interesting guest data such as the guest’s exact operating system and ser-
vice pack level, the installed version of the guest additions, users that are currently logged into
the guest os, network statistics and more. these predeﬁned properties are all preﬁxed with
/virtualbox/ and organized into a hierarchical tree of keys.
some of this runtime information is shown when you select session information dialog from
a virtual machine’s machine menu.

81

4 guest additions

a more ﬂexible way to use this channel is with the vboxmanage guestproperty command.
see chapter 8.31, vboxmanage guestproperty, page 185. for example, to have all the available
guest properties for a given running vm listed with their respective values, use this command:

$ vboxmanage guestproperty enumerate "windows vista iii"
virtualbox command line management interface version <version-number>
(c) 2005-2019 oracle corporation
all rights reserved.

name: /virtualbox/guestinfo/os/product, value: windows vista business edition,
timestamp: 1229098278843087000, flags:
name: /virtualbox/guestinfo/os/release, value: 6.0.6001,
timestamp: 1229098278950553000, flags:
name: /virtualbox/guestinfo/os/servicepack, value: 1,
timestamp: 1229098279122627000, flags:
name: /virtualbox/guestadd/installdir,
value: c:/program files/oracle/virtualbox
guest additions, timestamp: 1229098279269739000, flags:
name: /virtualbox/guestadd/revision, value: 40720,
timestamp: 1229098279345664000, flags:
name: /virtualbox/guestadd/version, value: <version-number>,
timestamp: 1229098279479515000, flags:
name: /virtualbox/guestadd/components/vboxcontrol.exe, value: <version-number>r40720,
timestamp: 1229098279651731000, flags:
name: /virtualbox/guestadd/components/vboxhook.dll, value: <version-number>r40720,
timestamp: 1229098279804835000, flags:
name: /virtualbox/guestadd/components/vboxdisp.dll, value: <version-number>r40720,
timestamp: 1229098279880611000, flags:
name: /virtualbox/guestadd/components/vboxmrxnp.dll, value: <version-number>r40720,
timestamp: 1229098279882618000, flags:
name: /virtualbox/guestadd/components/vboxservice.exe, value: <version-number>r40720,
timestamp: 1229098279883195000, flags:
name: /virtualbox/guestadd/components/vboxtray.exe, value: <version-number>r40720,
timestamp: 1229098279885027000, flags:
name: /virtualbox/guestadd/components/vboxguest.sys, value: <version-number>r40720,
timestamp: 1229098279886838000, flags:
name: /virtualbox/guestadd/components/vboxmouse.sys, value: <version-number>r40720,
timestamp: 1229098279890600000, flags:
name: /virtualbox/guestadd/components/vboxsf.sys, value: <version-number>r40720,
timestamp: 1229098279893056000, flags:
name: /virtualbox/guestadd/components/vboxvideo.sys, value: <version-number>r40720,
timestamp: 1229098279895767000, flags:
name: /virtualbox/guestinfo/os/loggedinusers, value: 1,
timestamp: 1229099826317660000, flags:
name: /virtualbox/guestinfo/os/nologgedinusers, value: false,
timestamp: 1229098455580553000, flags:
name: /virtualbox/guestinfo/net/count, value: 1,
timestamp: 1229099826299785000, flags:
name: /virtualbox/hostinfo/gui/languageid, value: c,
timestamp: 1229098151272771000, flags:
name: /virtualbox/guestinfo/net/0/v4/ip, value: 192.168.2.102,
timestamp: 1229099826300088000, flags:
name: /virtualbox/guestinfo/net/0/v4/broadcast, value: 255.255.255.255,
timestamp: 1229099826300220000, flags:
name: /virtualbox/guestinfo/net/0/v4/netmask, value: 255.255.255.0,
timestamp: 1229099826300350000, flags:
name: /virtualbox/guestinfo/net/0/status, value: up,
timestamp: 1229099826300524000, flags:
name: /virtualbox/guestinfo/os/loggedinuserslist, value: username,
timestamp: 1229099826317386000, flags:

to query the value of a single property, use the get subcommand as follows:

$ vboxmanage guestproperty get "windows vista iii" "/virtualbox/guestinfo/os/product"
virtualbox command line management interface version <version-number>
(c) 2005-2019 oracle corporation
all rights reserved.

82

4 guest additions

value: windows vista business edition

to add or change guest properties from the guest, use the tool vboxcontrol . this tool is in-
cluded in the guest additions. when started from a linux guest, this tool requires root privileges
for security reasons.

$ sudo vboxcontrol guestproperty enumerate
virtualbox guest additions command line management interface version <version-number>
(c) 2005-2019 oracle corporation
all rights reserved.

name: /virtualbox/guestinfo/os/release, value: 2.6.28-18-generic,
timestamp: 1265813265835667000, flags: <null>
name: /virtualbox/guestinfo/os/version, value: #59-ubuntu smp thu jan 28 01:23:03 utc 2010,
timestamp: 1265813265836305000, flags: <null>
...

for more complex needs, you can use the oracle vm virtualbox programming interfaces. see
chapter 11, oracle vm virtualbox programming interfaces, page 310.

4.7.1 using guest properties to wait on vm events
the properties /virtualbox/hostinfo/vboxver , /virtualbox/hostinfo/vboxverext or
/virtualbox/hostinfo/vboxrev can be waited on to detect that the vm state was restored
from saved state or snapshot:

$ vboxcontrol guestproperty wait /virtualbox/hostinfo/vboxver

similarly the /virtualbox/hostinfo/resumecounter can be used to detect that a vm was
resumed from the paused state or saved state.

4.8 guest control file manager

the guest control file manager is a feature of the guest additions that enables easy copying and
moving of ﬁles between a guest and the host system. other ﬁle management operations provide
support to create new folders and to rename or delete ﬁles.

83

4 guest additions

the guest control file manager works by mounting the host ﬁle system. guest users must
authenticate and create a guest session before they can transfer ﬁles.

4.8.1 using the guest control file manager
the following steps describe how to use the guest control file manager.
1. open the guest control file manager.
in the guest vm, select machine, file manager.
the left pane shows the ﬁles on the host system.
2. create a guest session.
at the bottom of the guest control file manager, enter authentication credentials for a user
on the guest system.
click create session.
the contents of the guest vm ﬁle system appears in the right pane of the guest control file
manager.
3. transfer ﬁles between the guest and the host system by using the move and copy ﬁle
transfer icons.
you can copy and move ﬁles from a guest to the host system or from the host system to the
guest.
4. close the guest control file manager.
click close to end the guest session.

4.9 guest control of applications

the guest additions enable starting of applications inside a guest vm from the host system. this
feature can be used to automate deployment of software within the guest.

84

4 guest additions

for this to work, the application needs to be installed on the guest. no additional software
needs to be installed on the host. additionally, text mode output to stdout and stderr can be
shown on the host for further processing. there are options to specify user credentials and a
timeout value, in milliseconds, to limit the time the application is able to run.
the guest additions for windows allow for automatic updating. this applies for already
installed guest additions versions. also, copying ﬁles from host to the guest as well as remotely
creating guest directories is available.
to use these features, use the oracle vm virtualbox command line. see chapter 8.32, vbox-
manage guestcontrol, page 186.

4.10 memory overcommitment

in server environments with many vms, the guest additions can be used to share physical host
memory between several vms. this reduces the total amount of memory in use by the vms.
if memory usage is the limiting factor and cpu resources are still available, this can help with
running more vms on each host.

4.10.1 memory ballooning
the guest additions can change the amount of host memory that a vm uses, while the machine
is running. because of how this is implemented, this feature is called memory ballooning.

note:

• oracle vm virtualbox supports memory ballooning only on 64-bit hosts. it is not
supported on mac os x hosts.
• memory ballooning does not work with large pages en-
abled. to turn off large pages support for a vm, run
vboxmanage modifyvm vmname --largepages off

normally, to change the amount of memory allocated to a virtual machine, you have to shut
down the virtual machine entirely and modify its settings. with memory ballooning, memory
that was allocated for a virtual machine can be given to another virtual machine without having
to shut the machine down.
when memory ballooning is requested, the oracle vm virtualbox guest additions, which run
inside the guest, allocate physical memory from the guest operating system on the kernel level
and lock this memory down in the guest. this ensures that the guest will not use that memory
any longer. no guest applications can allocate it, and the guest kernel will not use it either.
oracle vm virtualbox can then reuse this memory and give it to another virtual machine.
the memory made available through the ballooning mechanism is only available for reuse by
oracle vm virtualbox. it is not returned as free memory to the host. requesting balloon memory
from a running guest will therefore not increase the amount of free, unallocated memory on
the host. effectively, memory ballooning is therefore a memory overcommitment mechanism
for multiple virtual machines while they are running. this can be useful to temporarily start
another machine, or in more complicated environments, for sophisticated memory management
of many virtual machines that may be running in parallel depending on how memory is used by
the guests.
at this time, memory ballooning is only supported through vboxmanage . use the following
command to increase or decrease the size of the memory balloon within a running virtual ma-
chine that has guest additions installed:

vboxmanage controlvm "vm name" guestmemoryballoon n

85

4 guest additions

where vm name is the name or uuid of the virtual machine in question and n is the amount
of memory to allocate from the guest in megabytes. see chapter 8.13, vboxmanage controlvm,
page 163.
you can also set a default balloon that will automatically be requested from the vm every time
after it has started up with the following command:

vboxmanage modifyvm "vm name" --guestmemoryballoon n

by default, no balloon memory is allocated. this is a vm setting, like other modifyvm settings,
and therefore can only be set while the machine is shut down. see chapter 8.8, vboxmanage
modifyvm, page 145.

4.10.2 page fusion
whereas memory ballooning simply reduces the amount of ram that is available to a vm, page
fusion works differently. it avoids memory duplication between several similar running vms.
in a server environment running several similar vms on the same host, lots of memory pages
are identical. for example, if the vms are using identical operating systems. oracle vm
virtualbox’s page fusion technology can efﬁciently identify these identical memory pages and
share them between multiple vms.

note: oracle vm virtualbox supports page fusion only on 64-bit hosts, and it is not
supported on mac os x hosts. page fusion currently works only with windows 2000
and later guests.

the more similar the vms on a given host are, the more efﬁciently page fusion can reduce the
amount of host memory that is in use. it therefore works best if all vms on a host run identical
operating systems. instead of having a complete copy of each operating system in each vm, page
fusion identiﬁes the identical memory pages in use by these operating systems and eliminates
the duplicates, sharing host memory between several machines. this is called deduplication. if a
vm tries to modify a page that has been shared with other vms, a new page is allocated again for
that vm with a copy of the shared page. this is called copy on write. all this is fully transparent
to the virtual machine.
you may be familiar with this kind of memory overcommitment from other hypervisor prod-
ucts, which call this feature page sharing or same page merging. however, page fusion differs
signiﬁcantly from those other solutions, whose approaches have several drawbacks:

• traditional hypervisors scan all guest memory and compute checksums, also called hashes,
for every single memory page. then, they look for pages with identical hashes and compare
the entire content of those pages. if two pages produce the same hash, it is very likely that
the pages are identical in content. this process can take rather long, especially if the system
is not idling. as a result, the additional memory only becomes available after a signiﬁcant
amount of time, such as hours or sometimes days. even worse, this kind of page sharing
algorithm generally consumes signiﬁcant cpu resources and increases the virtualization
overhead by 10 to 20%.
page fusion in oracle vm virtualbox uses logic in the oracle vm virtualbox guest ad-
ditions to quickly identify memory cells that are most likely identical across vms. it can
therefore achieve most of the possible savings of page sharing almost immediately and with
almost no overhead.
• page fusion is also much less likely to be confused by identical memory that it will elimi-
nate, just to learn seconds later that the memory will now change and having to perform a
highly expensive and often service-disrupting reallocation.

86

4 guest additions

at this time, page fusion can only be controlled with vboxmanage , and only while a vm is shut
down. to enable page fusion for a vm, use the following command:

vboxmanage modifyvm "vm name" --pagefusion on

you can observe page fusion operation using some metrics. ram/vmm/shared shows the total
amount of fused pages, whereas the per-vm metric guest/ram/usage/shared will return the
amount of fused memory for a given vm. see chapter 8.33, vboxmanage metrics, page 197 for
information on how to query metrics.

note: enabling page fusion might indirectly increase the chances for malicious guests
to successfully attack other vms running on the same host. see chapter 13.3.4, poten-
tially insecure operations, page 329.

87

5 virtual storage

as the virtual machine will most probably expect to see a hard disk built into its virtual computer,
oracle vm virtualbox must be able to present real storage to the guest as a virtual hard disk.
there are presently three methods by which to achieve this:

• oracle vm virtualbox can use large image ﬁles on a real hard disk and present them to a
guest as a virtual hard disk. this is the most common method, described in chapter 5.2,
disk image files (vdi, vmdk, vhd, hdd), page 91.
• iscsi storage servers can be attached to oracle vm virtualbox. this is described in chapter
5.10, iscsi servers, page 100.
• you can allow a virtual machine to access one of your host disks directly. this is an ad-
vanced feature, described in chapter 9.7.1, using a raw host hard disk from a guest, page
251.

each such virtual storage device, such as an image ﬁle, iscsi target, or physical hard disk,
needs to be connected to the virtual hard disk controller that oracle vm virtualbox presents to
a virtual machine. this is explained in the next section.

5.1 hard disk controllers

in a computing device, hard disks and cd/dvd drives are connected to a device called hard
disk controller which drives hard disk operation and data transfers. oracle vm virtualbox can
emulate the most common types of hard disk controllers typically found in computing devices:
ide, sata (ahci), scsi, sas, usb-based, nvme and virtio-scsi mass storage devices.

• ide (ata) controllers are a backwards-compatible yet very advanced extension of the disk
controller in the ibm pc/at (1984). initially, this interface worked only with hard disks,
but was later extended to also support cd-rom drives and other types of removable media.
in physical pcs, this standard uses ﬂat ribbon parallel cables with 40 or 80 wires. each such
cable can connect two devices to a controller, which have traditionally been called master
and slave. typical pcs had two connectors for such cables. as a result, support for up to
four ide devices was most common.
in oracle vm virtualbox, each virtual machine may have one ide controller enabled, which
gives you up to four virtual storage devices that you can attach to the machine. by default,
one of these virtual storage devices, the secondary master, is preconﬁgured to be the virtual
machine’s virtual cd/dvd drive. however, you can change the default setting.
even if your guest os has no support for scsi or sata devices, it should always be able to
see an ide controller.
you can also select which exact type of ide controller hardware oracle vm virtualbox
should present to the virtual machine: piix3, piix4, or ich6. this makes no difference
in terms of performance, but if you import a virtual machine from another virtualization
product, the os in that machine may expect a particular controller type and crash if it is
not found.
after you have created a new virtual machine with the new virtual machine wizard of
the graphical user interface, you will typically see one ide controller in the machine’s

88

5 virtual storage

storage settings. the virtual cd/dvd drive will be attached to one of the four ports of this
controller.
• serial ata (sata) is a more recent standard than ide. compared to ide, it supports both
much higher speeds and more devices per controller. also, with physical hardware, devices
can be added and removed while the system is running. the standard interface for sata
controllers is called advanced host controller interface (ahci).
like a real sata controller, oracle vm virtualbox’s virtual sata controller operates faster
and also consumes fewer cpu resources than the virtual ide controller. also, this enables
you to connect up to 30 virtual hard disks to one machine instead of just three, when
compared to the oracle vm virtualbox ide controller with a dvd drive attached.
for this reason, depending on the selected guest os, oracle vm virtualbox uses sata as
the default for newly created virtual machines. one virtual sata controller is created by
default, and the default disk that is created with a new vm is attached to this controller.

warning: the entire sata controller and the virtual disks attached to it, including
those in ide compatibility mode, will not be seen by oses that do not have device
support for ahci. in particular, there is no support for ahci in windows versions before
windows vista. legacy windows versions such as windows xp, even with sp3 installed,
will not see such disks unless you install additional drivers. it is possible to switch from
ide to sata after installation by installing the sata drivers and changing the controller
type in the vm settings dialog.
oracle vm virtualbox recommends the intel matrix storage drivers, which can
be downloaded from http://downloadcenter.intel.com/product_filter.aspx?
productid=2101 .

to add a sata controller to a machine for which it has not been enabled by default, either
because it was created by an earlier version of oracle vm virtualbox, or because sata is
not supported by default by the selected guest os, do the following. go to the storage
page of the machine’s settings dialog, click add controller under the storage tree box
and then select add sata controller. the new controller appears as a separate pci device
in the virtual machine, and you can add virtual disks to it.
to change the ide compatibility mode settings for the sata controller, see chapter 8.18,
vboxmanage storagectl, page 174.
• scsi is another established industry standard, standing for small computer system inter-
face. scsi is as a generic interface for data transfer between all kinds of devices, including
storage devices. scsi is still used for connecting some hard disks and tape devices, but
it has mostly been displaced in commodity hardware. it is still in common use in high-
performance workstations and servers.
primarily for compatibility with other virtualization software, oracle vm virtualbox op-
tionally supports lsi logic and buslogic scsi controllers, to each of which up to ﬁfteen
virtual hard disks can be attached.
to enable a scsi controller, on the storage page of a virtual machine’s settings dialog,
click add controller under the storage tree box and then select add scsi controller.
the new controller appears as a separate pci device in the virtual machine.

warning: as with the other controller types, a scsi controller will only be seen by
oses with device support for it. windows 2003 and later ships with drivers for the lsi
logic controller, while windows nt 4.0 and windows 2000 ships with drivers for the
buslogic controller. windows xp ships with drivers for neither.

89

5 virtual storage

• serial attached scsi (sas) is another bus standard which uses the scsi command set.
as opposed to scsi physical devices, serial cables are used instead of parallel cables. this
simpliﬁes physical device connections. in some ways, therefore, sas is to scsi what sata
is to ide: it enables more reliable and faster connections.
to support high-end guests which require sas controllers, oracle vm virtualbox emulates
a lsi logic sas controller, which can be enabled much the same way as a scsi controller.
at this time, up to 255 devices can be connected to the sas controller.

warning: as with sata, the sas controller will only be seen by oses with device
support for it. in particular, there is no support for sas in windows before windows
vista. so windows xp, even sp3, will not see such disks unless you install additional
drivers.

• the usb mass storage device class is a standard to connect external storage devices like
hard disks or ﬂash drives to a host through usb. all major oses support these devices
and ship generic drivers making third-party drivers superﬂuous. in particular, legacy oses
without support for sata controllers may beneﬁt from usb mass storage devices.
the virtual usb storage controller offered by oracle vm virtualbox works differently to
the other storage controller types. while most storage controllers appear as a single pci
device to the guest with multiple disks attached to it, the usb-based storage controller
does not appear as virtual storage controller. each disk attached to the controller appears
as a dedicated usb device to the guest.

warning: booting from drives attached using usb is only supported when efi is used
as the bios lacks usb support.

• non volatile memory express (nvme) is a standard for connecting non volatile memory
(nvm) directly over pci express to lift the bandwidth limitation of the previously used
sata protocol for solid-state devices. unlike other standards the command set is very
simple in order to achieve maximum throughput and is not compatible with ata or scsi.
oses need to support nvme devices to make use of them. for example, windows 8.1
added native nvme support. for windows 7, native support was added with an update.
the nvme controller is part of the extension pack.

warning: booting from drives attached using nvme is only supported when efi is used
as the bios lacks the appropriate driver.

• virtual i/o device scsi is a standard to connect virtual storage devices like hard disks or
optical drives to a vm. recent linux and windows versions support these devices (windows
needs additional drivers). currently the virtio-scsi controller is experimental.

warning: the virtio-scsi controller will only be seen by oses with device support for
it. in particular, there is no built-in support in windows. so windows will not see such
disks unless you install additional drivers.

in summary, oracle vm virtualbox gives you the following categories of virtual storage slots:

90

5 virtual storage

• four slots attached to the traditional ide controller, which are always present. one of these
is typically a virtual cd/dvd drive.
• 30 slots attached to the sata controller, if enabled and supported by the guest os.
• 15 slots attached to the scsi controller, if enabled and supported by the guest os.
• up to 255 slots attached to the sas controller, if enabled and supported by the guest os.
• eight slots attached to the virtual usb controller, if enabled and supported by the guest
os.
• up to 255 slots attached to the nvme controller, if enabled and supported by the guest os.
• up to 256 slots attached to the virtio-scsi controller, if enabled and supported by the guest
os.

given this large choice of storage controllers, you may not know which one to choose. in
general, you should avoid ide unless it is the only controller supported by your guest. whether
you use sata, scsi, or sas does not make any real difference. the variety of controllers is only
supplied by oracle vm virtualbox for compatibility with existing hardware and other hypervisors.

5.2 disk image files (vdi, vmdk, vhd, hdd)

disk image ﬁles reside on the host system and are seen by the guest systems as hard disks of a
certain geometry. when a guest os reads from or writes to a hard disk, oracle vm virtualbox
redirects the request to the image ﬁle.
like a physical disk, a virtual disk has a size, or capacity, which must be speciﬁed when the
image ﬁle is created. as opposed to a physical disk however, oracle vm virtualbox enables you
to expand an image ﬁle after creation, even if it has data already. see chapter 8.22, vboxmanage
modifymedium, page 177.
oracle vm virtualbox supports the following types of disk image ﬁles:

• vdi. normally, oracle vm virtualbox uses its own container format for guest hard disks.
this is called a virtual disk image (vdi) ﬁle. this format is used when you create a new
virtual machine with a new disk.
• vmdk. oracle vm virtualbox also fully supports the popular and open vmdk container
format that is used by many other virtualization products, such as vmware.
• vhd. oracle vm virtualbox also fully supports the vhd format used by microsoft.
• hdd. image ﬁles of parallels version 2 (hdd format) are also supported.
due to lack of documentation of the format, newer versions such as 3 and 4 are not sup-
ported. you can however convert such image ﬁles to version 2 format using tools provided
by parallels.

irrespective of the disk capacity and format, as mentioned in chapter 1.7, creating your first
virtual machine, page 8, there are two options for creating a disk image: ﬁxed-size or dynamically
allocated.

• fixed-size. if you create a ﬁxed-size image, an image ﬁle will be created on your host
system which has roughly the same size as the virtual disk’s capacity. so, for a 10 gb disk,
you will have a 10 gb ﬁle. note that the creation of a ﬁxed-size image can take a long time
depending on the size of the image and the write performance of your hard disk.

91

5 virtual storage

• dynamically allocated. for more ﬂexible storage management, use a dynamically allo-
cated image. this will initially be very small and not occupy any space for unused virtual
disk sectors, but will grow every time a disk sector is written to for the ﬁrst time, until the
drive reaches the maximum capacity chosen when the drive was created. while this format
takes less space initially, the fact that oracle vm virtualbox needs to expand the image ﬁle
consumes additional computing resources, so until the disk ﬁle size has stabilized, write
operations may be slower than with ﬁxed size disks. however, after a time the rate of
growth will slow and the average penalty for write operations will be negligible.

5.3 the virtual media manager

oracle vm virtualbox keeps track of all the hard disk, cd/dvd-rom, and ﬂoppy disk images
which are in use by virtual machines. these are often referred to as known media and come from
two sources:

• all media currently attached to virtual machines.
• registered media, for compatibility with legacy oracle vm virtualbox versions.

the known media can be viewed and changed using the virtual media manager, which you
can access from the file menu in the virtualbox manager window.

the known media are conveniently grouped in separate tabs for the supported formats. these
formats are:

• hard disk images, either in oracle vm virtualbox’s own virtual disk image (vdi) format,
or in the third-party formats listed in chapter 5.2, disk image files (vdi, vmdk, vhd, hdd),
page 91.
• cd/dvd images in standard iso format.
• floppy images in standard raw format.

for each image, the virtual media manager shows you the full path of the image ﬁle and other
information, such as the virtual machine the image is currently attached to.
the virtual media manager enables you to do the following:

92

5 virtual storage

• add an image to the known media.
• create a new disk image.
– for virtual hard disks, the create virtual hard disk wizard is shown.
– for optical disks, the viso creator screen is shown. this enables you to create a
virtual iso from selected ﬁles on the host.
– for ﬂoppy disks, the floppy disk creator screen is shown.
• copy an image to create another one.
for virtual hard disks, you can specify one of the following target types: vdi, vhd, or
vmdk.
• move an image to another location.
a ﬁle dialog prompts you for the new image ﬁle location.
when you use the virtual media manager to move a disk image, oracle vm virtualbox
updates all related conﬁguration ﬁles automatically.

note: always use the virtual media manager or the vboxmanage modifymedium com-
mand to move a disk image.
if you use a ﬁle management feature of the host os to move a disk image to a new
location, run the vboxmanage modifymedium --setlocation command to conﬁgure
the new path of the disk image on the host ﬁle system. this command updates the
oracle vm virtualbox conﬁguration automatically.

• remove an image from the known media. you can optionally delete the image ﬁle when
removing the image.
• release an image to detach it from a vm. this action only applies if the image is currently
attached to a vm as a virtual hard disk.
• search for an image by name or uuid.
• view and edit the properties of a disk image.
available properties include the following:
– type: speciﬁes the snapshot behavior of the disk. see chapter 5.4, special image write
modes, page 94.
– location: speciﬁes the location of the disk image ﬁle on the host system. you can use
a ﬁle dialog to browse for the disk image location.
– description: speciﬁes a short description of the disk image.
– size: speciﬁes the size of the disk image. you can use the slider to increase or decrease
the disk image size.
– information: speciﬁes detailed information about the disk image.
• refresh the property values of the selected disk image.

to perform these actions, highlight the medium in the virtual media manager and then do one
of the following:

• click an icon in the virtual media manager task bar.
• right-click the medium and select an option.

93

5 virtual storage

use the storage page in a vm’s settings dialog to create a new disk image. by default, disk
images are stored in the vm’s folder.
you can copy hard disk image ﬁles to other host systems and then import them in to vms from
the host system. however, some windows guest oses may require that you conﬁgure the new
vm in a similar way to the old one.

note: do not simply make copies of virtual disk images. if you import such a second
copy into a vm, oracle vm virtualbox issues an error because oracle vm virtualbox
assigns a universally unique identiﬁer (uuid) to each disk image to ensure that it is
only used one time. see chapter 5.6, cloning disk images, page 98. also, if you want to
copy a vm to another system, use the oracle vm virtualbox import and export features.
see chapter 1.14, importing and exporting virtual machines, page 21.

5.4 special image write modes

for each virtual disk image supported by oracle vm virtualbox, you can determine separately
how it should be affected by write operations from a virtual machine and snapshot operations.
this applies to all of the aforementioned image formats (vdi, vmdk, vhd, or hdd) and irre-
spective of whether an image is ﬁxed-size or dynamically allocated.
by default, images are in normal mode. to mark an existing image with one of the non-
standard modes listed below, use vboxmanage modifymedium . see chapter 8.22, vboxmanage
modifymedium, page 177. alternatively, use vboxmanage storageattach to attach the image
to a vm and specify the --mtype argument. see chapter 8.17, vboxmanage storageattach, page
170.
the available virtual disk image modes are as follows:

• normal images have no restrictions on how guests can read from and write to the disk.
this is the default image mode.
when you take a snapshot of your virtual machine as described in chapter 1.10, snapshots,
page 16, the state of a normal hard disk is recorded together with the snapshot, and when
reverting to the snapshot, its state will be fully reset.
the image ﬁle itself is not reset. instead, when a snapshot is taken, oracle vm virtualbox
freezes the image ﬁle and no longer writes to it. for the write operations from the vm, a
second, differencing image ﬁle is created which receives only the changes to the original
image. see chapter 5.5, differencing images, page 96.
while you can attach the same normal image to more than one virtual machine, only one
of these virtual machines attached to the same image ﬁle can be executed simultaneously,
as otherwise there would be conﬂicts if several machines write to the same image ﬁle.
• write-through hard disks are completely unaffected by snapshots. their state is not saved
when a snapshot is taken, and not restored when a snapshot is restored.
• shareable hard disks are a variant of write-through hard disks. in principle they behave
exactly the same. their state is not saved when a snapshot is taken, and not restored when
a snapshot is restored. the difference only shows if you attach such disks to several vms.
shareable disks may be attached to several vms which may run concurrently. this makes
them suitable for use by cluster ﬁlesystems between vms and similar applications which
are explicitly prepared to access a disk concurrently. only ﬁxed size images can be used in
this way, and dynamically allocated images are rejected.

94

5 virtual storage

warning: this is an expert feature, and misuse can lead to data loss, as regular ﬁlesys-
tems are not prepared to handle simultaneous changes by several parties.

• immutable images only remember write accesses temporarily while the virtual machine is
running. all changes are lost when the virtual machine is powered on the next time. as a
result, as opposed to normal images, the same immutable image can be used with several
virtual machines without restrictions.
creating an immutable image makes little sense since it would be initially empty and lose
its contents with every machine restart. you would have a disk that is always unformatted
when the machine starts up. instead, you can ﬁrst create a normal image and then later
mark it as immutable when you decide that the contents are useful.
if you take a snapshot of a machine with immutable images, then on every machine power-
up, those images are reset to the state of the last (current) snapshot, instead of the state of
the original immutable image.

note: as a special exception, immutable images are not reset if they are attached to
a machine in a saved state or whose last snapshot was taken while the machine was
running. this is called an online snapshot. as a result, if the machine’s current snapshot
is an online snapshot, its immutable images behave exactly like the a normal image.
to reenable the automatic resetting of such images, delete the current snapshot of the
machine.

oracle vm virtualbox never writes to an immutable image directly at all. all write oper-
ations from the machine are directed to a differencing image. the next time the vm is
powered on, the differencing image is reset so that every time the vm starts, its immutable
images have exactly the same content.
the differencing image is only reset when the machine is powered on from within oracle
vm virtualbox, not when you reboot by requesting a reboot from within the machine. this
is also why immutable images behave as described above when snapshots are also present,
which use differencing images as well.
if the automatic discarding of the differencing image on vm startup does not ﬁt your needs,
you can turn it off using the autoreset parameter of vboxmanage modifymedium . see
chapter 8.22, vboxmanage modifymedium, page 177.
• multiattach mode images can be attached to more than one virtual machine at the same
time, even if these machines are running simultaneously. for each virtual machine to which
such an image is attached, a differencing image is created. as a result, data that is written
to such a virtual disk by one machine is not seen by the other machines to which the image
is attached. each machine creates its own write history of the multiattach image.
technically, a multiattach image behaves identically to an immutable image except the
differencing image is not reset every time the machine starts.
this mode is useful for sharing ﬁles which are almost never written, for instance picture
galleries, where every guest changes only a small amount of data and the majority of the
disk content remains unchanged. the modiﬁed blocks are stored in differencing images
which remain relatively small and the shared content is stored only once at the host.
• read-only images are used automatically for cd/dvd images, since cds/dvds can never
be written to.

95

5 virtual storage

the following scenario illustrates the differences between the various image modes, with re-
spect to snapshots.
assume you have installed your guest os in your vm, and you have taken a snapshot. later,
your vm is infected with a virus and you would like to go back to the snapshot. with a normal
hard disk image, you simply restore the snapshot, and the earlier state of your hard disk image
will be restored as well and your virus infection will be undone. with an immutable hard disk,
all it takes is to shut down and power on your vm, and the virus infection will be discarded.
with a write-through image however, you cannot easily undo the virus infection by means of
virtualization, but will have to disinfect your virtual machine like a real computer.
you might ﬁnd write-through images useful if you want to preserve critical data irrespective
of snapshots. as you can attach more than one image to a vm, you may want to have one
immutable image for the os and one write-through image for your data ﬁles.

5.5 differencing images

the previous section mentioned differencing images and how they are used with snapshots,
immutable images, and multiple disk attachments. this section describes in more detail how
differencing images work.
a differencing image is a special disk image that only holds the differences to another image.
a differencing image by itself is useless, it must always refer to another image. the differencing
image is then typically referred to as a child, which holds the differences to its parent.
when a differencing image is active, it receives all write operations from the virtual machine
instead of its parent. the differencing image only contains the sectors of the virtual hard disk
that have changed since the differencing image was created. when the machine reads a sector
from such a virtual hard disk, it looks into the differencing image ﬁrst. if the sector is present,
it is returned from there. if not, oracle vm virtualbox looks into the parent. in other words,
the parent becomes read-only. it is never written to again, but it is read from if a sector has not
changed.
differencing images can be chained. if another differencing image is created for a virtual
disk that already has a differencing image, then it becomes a grandchild of the original parent.
the ﬁrst differencing image then becomes read-only as well, and write operations only go to
the second-level differencing image. when reading from the virtual disk, oracle vm virtualbox
needs to look into the second differencing image ﬁrst, then into the ﬁrst if the sector was not
found, and then into the original image.
there can be an unlimited number of differencing images, and each image can have more than
one child. as a result, the differencing images can form a complex tree with parents, siblings,
and children, depending on how complex your machine conﬁguration is. write operations always
go to the one active differencing image that is attached to the machine, and for read operations,
oracle vm virtualbox may need to look up all the parents in the chain until the sector in question
is found. you can view such a tree in the virtual media manager.

96

5 virtual storage

in all of these situations, from the point of view of the virtual machine, the virtual hard disk
behaves like any other disk. while the virtual machine is running, there is a slight run-time i/o
overhead because oracle vm virtualbox might need to look up sectors several times. this is not
noticeable however since the tables with sector information are always kept in memory and can
be looked up quickly.
differencing images are used in the following situations:
• snapshots. when you create a snapshot, as explained in the previous section, oracle
vm virtualbox freezes the images attached to the virtual machine and creates differencing
images for each image that is not in write-through mode. from the point of view of the
virtual machine, the virtual disks continue to operate before, but all write operations go
into the differencing images. each time you create another snapshot, for each hard disk
attachment, another differencing image is created and attached, forming a chain or tree.
in the above screenshot, you see that the original disk image is now attached to a snapshot,
representing the state of the disk when the snapshot was taken.
if you restore a snapshot, and want to go back to the exact machine state that was stored
in the snapshot, the following happens:
– oracle vm virtualbox copies the virtual machine settings that were copied into the
snapshot back to the virtual machine. as a result, if you have made changes to the
machine conﬁguration since taking the snapshot, they are undone.
– if the snapshot was taken while the machine was running, it contains a saved machine
state, and that state is restored as well. after restoring the snapshot, the machine
will then be in saved state and resume execution from there when it is next started.
otherwise the machine will be in powered off state and do a full boot.
– for each disk image attached to the machine, the differencing image holding all the
write operations since the current snapshot was taken is thrown away, and the original
parent image is made active again. if you restored the root snapshot, then this will be
the root disk image for each attachment. otherwise, some other differencing image
descended from it. this effectively restores the old machine state.
if you later delete a snapshot in order to free disk space, for each disk attachment, one of
the differencing images becomes obsolete. in this case, the differencing image of the disk
attachment cannot simply be deleted. instead, oracle vm virtualbox needs to look at each
sector of the differencing image and needs to copy it back into its parent. this is called
“merging” images and can be a potentially lengthy process, depending on how large the
differencing image is. it can also temporarily need a considerable amount of extra disk
space, before the differencing image obsoleted by the merge operation is deleted.

97

5 virtual storage

• immutable images. when an image is switched to immutable mode, a differencing im-
age is created as well. as with snapshots, the parent image then becomes read-only, and
the differencing image receives all the write operations. every time the virtual machine is
started, all the immutable images which are attached to it have their respective differenc-
ing image thrown away, effectively resetting the virtual machine’s virtual disk with every
restart.

5.6 cloning disk images

you can duplicate hard disk image ﬁles on the same host to quickly produce a second virtual ma-
chine with the same os setup. however, you should only make copies of virtual disk images us-
ing the utility supplied with oracle vm virtualbox. see chapter 8.23, vboxmanage clonemedium,
page 178. this is because oracle vm virtualbox assigns a uuid to each disk image, which is also
stored inside the image, and oracle vm virtualbox will refuse to work with two images that use
the same number. if you do accidentally try to reimport a disk image which you copied normally,
you can make a second copy using the vboxmanage clonevm command and import that instead.
note that linux distributions identify the boot hard disk from the id of the drive. the id oracle
vm virtualbox reports for a drive is determined from the uuid of the virtual disk image. so if
you clone a disk image and try to boot the copied image the guest might not be able to determine
its own boot disk as the uuid changed. in this case you have to adapt the disk id in your boot
loader script, for example /boot/grub/menu.lst . the disk id looks like the following:

scsi-sata _ vbox _ harddisk _ vb5cfdb1e2-c251e503

the id for the copied image can be determined as follows:

hdparm -i /dev/sda

5.7 host input/output caching

oracle vm virtualbox can optionally disable the i/o caching that the host os would otherwise
perform on disk image ﬁles.
traditionally, oracle vm virtualbox has opened disk image ﬁles as normal ﬁles, which results in
them being cached by the host os like any other ﬁle. the main advantage of this is speed: when
the guest os writes to disk and the host os cache uses delayed writing, the write operation can
be reported as completed to the guest os quickly while the host os can perform the operation
asynchronously. also, when you start a vm a second time and have enough memory available
for the os to use for caching, large parts of the virtual disk may be in system memory, and the
vm can access the data much faster.
note that this applies only to image ﬁles. buffering does not occur for virtual disks residing on
remote iscsi storage, which is the more common scenario in enterprise-class setups. see chapter
5.10, iscsi servers, page 100.
while buffering is a useful default setting for virtualizing a few machines on a desktop com-
puter, there are some disadvantages to this approach:

• delayed writing through the host os cache is less secure. when the guest os writes data,
it considers the data written even though it has not yet arrived on a physical disk. if for
some reason the write does not happen, such as power failure or host crash, the likelihood
of data loss increases.
• disk image ﬁles tend to be very large. caching them can therefore quickly use up the entire
host os cache. depending on the efﬁciency of the host os caching, this may slow down
the host immensely, especially if several vms run at the same time. for example, on linux
hosts, host caching may result in linux delaying all writes until the host cache is nearly full

98

5 virtual storage

and then writing out all these changes at once, possibly stalling vm execution for minutes.
this can result in i/o errors in the guest as i/o requests time out there.
• physical memory is often wasted as guest oses typically have their own i/o caches, which
may result in the data being cached twice, in both the guest and the host caches, for little
effect.

if you decide to disable host i/o caching for the above reasons, oracle vm virtualbox uses its
own small cache to buffer writes, but no read caching since this is typically already performed by
the guest os. in addition, oracle vm virtualbox fully supports asynchronous i/o for its virtual
sata, scsi, and sas controllers through multiple i/o threads.
since asynchronous i/o is not supported by ide controllers, for performance reasons, you may
want to leave host caching enabled for your vm’s virtual ide controllers.
for this reason, oracle vm virtualbox enables you to conﬁgure whether the host i/o cache
is used for each i/o controller separately. either select the use host i/o cache check box
in the storage settings for a given virtual storage controller, or use the following vboxmanage
command to disable the host i/o cache for a virtual storage controller:

vboxmanage storagectl "vm name" --name <controllername> --hostiocache off

see chapter 8.18, vboxmanage storagectl, page 174.
for the above reasons, oracle vm virtualbox uses sata controllers by default for new virtual
machines.

5.8 limiting bandwidth for disk images

oracle vm virtualbox supports limiting of the maximum bandwidth used for asynchronous i/o.
additionally it supports sharing limits through bandwidth groups for several images. it is possible
to have more than one such limit.
limits are conﬁgured using vboxmanage . the example below creates a bandwidth group
named limit, sets the limit to 20 mb per second, and assigns the group to the attached disks
of the vm:

vboxmanage bandwidthctl "vm name" add limit --type disk --limit 20m
vboxmanage storageattach "vm name" --storagectl "sata" --port 0 --device 0 --type hdd
--medium disk1.vdi --bandwidthgroup limit
vboxmanage storageattach "vm name" --storagectl "sata" --port 1 --device 0 --type hdd
--medium disk2.vdi --bandwidthgroup limit

all disks in a group share the bandwidth limit, meaning that in the example above the band-
width of both images combined can never exceed 20 mbps. however, if one disk does not require
bandwidth the other can use the remaining bandwidth of its group.
the limits for each group can be changed while the vm is running, with changes being picked
up immediately. the example below changes the limit for the group created in the example
above to 10 mbps:

vboxmanage bandwidthctl "vm name" set limit --limit 10m

5.9 cd/dvd support

virtual cd/dvd drives by default support only reading. the medium conﬁguration is changeable
at runtime. you can select between the following options to provide the medium data:

• host drive deﬁnes that the guest can read from the medium in the host drive.

99

5 virtual storage

• image ﬁle gives the guest read-only access to the data in the image. this is typically an
iso ﬁle.
• empty means a drive without an inserted medium.

changing between the above, or changing a medium in the host drive that is accessed by a
machine, or changing an image ﬁle will signal a medium change to the guest os. the guest os
can then react to the change, for example by starting an installation program.
medium changes can be prevented by the guest, and oracle vm virtualbox reﬂects that by
locking the host drive if appropriate. you can force a medium removal in such situations by
using the virtualbox manager or the vboxmanage command line tool. effectively this is the
equivalent of the emergency eject which many cd/dvd drives provide, with all associated side
effects. the guest os can issue error messages, just like on real hardware, and guest applications
may misbehave. use this with caution.

note: the identiﬁcation string of the drive provided to the guest, displayed by con-
ﬁguration tools such as the windows device manager, is always vbox cd-rom, irre-
spective of the current conﬁguration of the virtual drive. this is to prevent hardware
detection from being triggered in the guest os every time the conﬁguration is changed.

the standard cd/dvd emulation enables reading of standard data cd and dvd formats only.
as an experimental feature, for additional capabilities, it is possible to give the guest direct access
to the cd/dvd host drive by enabling passthrough mode. depending on the host hardware, this
may potentially enable the following things to work:

• cd/dvd writing from within the guest, if the host dvd drive is a cd/dvd writer
• playing audio cds
• playing encrypted dvds

to enable host drive passthrough you can use the --passthrough option of the
vboxmanage storageattach command. see chapter 8.17, vboxmanage storageattach, page
170.
even if passthrough is enabled, unsafe commands, such as updating the drive ﬁrmware, will
be blocked. video cd formats are never supported, not even in passthrough mode, and cannot
be played from a virtual machine.
on oracle solaris hosts, passthrough requires running oracle vm virtualbox with real root
permissions due to security measures enforced by the host.

5.10 iscsi servers
iscsi stands for internet scsi and is a standard that supports use of the scsi protocol over
internet (tcp/ip) connections. especially with the advent of gigabit ethernet, it has become
affordable to attach iscsi storage servers simply as remote hard disks to a computer network.
in iscsi terminology, the server providing storage resources is called an iscsi target, while the
client connecting to the server and accessing its resources is called an iscsi initiator.
oracle vm virtualbox can transparently present iscsi remote storage to a virtual machine as
a virtual hard disk. the guest os will not see any difference between a virtual disk image (vdi
ﬁle) and an iscsi target. to achieve this, oracle vm virtualbox has an integrated iscsi initiator.
oracle vm virtualbox’s iscsi support has been developed according to the iscsi standard and
should work with all standard-conforming iscsi targets. to use an iscsi target with oracle vm
virtualbox, you must use the command line. see chapter 8.17, vboxmanage storageattach, page
170.

100

5 virtual storage

5.11 vboximg-mount: a utility for fuse mounting a virtual
disk image

vboximg-mount is a command line utility for mac os and linux hosts that provides raw access
to an oracle vm virtualbox virtual disk image on the host system. use this utility to mount, view,
and optionally modify the disk image contents.
the utility is based on filesystem in userspace (fuse) technology and uses the virtualbox
runtime engine. ensure that oracle vm virtualbox is running on the host system.

note: when using vboximg-mount , ensure that the following conditions apply:

• the disk image is not being used by any other systems, such as by guest vms.
• no vms are running on the host system.

raw access using fuse is preferred over direct loopback mounting of virtual disk images,
because it is snapshot aware. it can selectively merge disk differencing images in an exposed
virtual hard disk, providing historical or up-to-date representations of the virtual disk contents.
vboximg-mount enables you to view information about registered vms, their attached disk
media, and any snapshots. also, you can view partition information for a disk image.
the vboximg-mount command includes experimental read-only access to ﬁle systems inside
a vm disk image. this feature enables you to extract some ﬁles from the disk image without
starting the vm and without requiring third-party ﬁle system drivers on the host system. fat,
ntfs, ext2, ext3, and ext4 ﬁle systems are supported.
use the --help option to view information about the vboximg-mount command usage. the
complete command reference is described in chapter 8.46, vboximg-mount, page 237.
when vboximg-mount mounts an oracle vm virtualbox disk image, it creates a one level deep
ﬁle system at a mount point that you specify. the ﬁle system includes a device node that repre-
sents the synthesized disk image as a readable or readable-writeable bytestream. this bytestream
can be mounted either by using the host os or by using other fuse-based ﬁle systems.

5.11.1 viewing detailed information about a virtual disk image
the following examples show how to use the vboximg-mount command to view information
about virtual disk images.
the following command outputs detailed information about all registered vms and associated
snapshots:

$ vboximg-mount --list --verbose

------------------------------------------------------
vm name: "macos high sierra 10.13"
uuid: 3887d96d-831c-4187-a55a-567c504ff0e1
location: /volumes/work/vm _ guests/macos high sierra 10.13/macos high sierra 10.13.vbox
-----------------------
hdd base: "macos high sierra 10.13.vdi"
uuid: f9ea7173-6869-4aa9-b487-68023a655980
location: /volumes/work/vm _ guests/macos high sierra 10.13/macos high sierra 10.13.vdi

diff 1:
uuid: 98c2bac9-cf37-443d-a935-4e879b70166d
location: /volumes/work/vm _ guests/macos high sierra 10.13/
snapshots/{98c2bac9-cf37-443d-a935-4e879b70166d}.vdi
diff 2:
uuid: f401f381-7377-40b3-948e-3c61241b1a42
location: /volumes/work/vm _ guests/macos high sierra 10.13/
snapshots/{f401f381-7377-40b3-948e-3c61241b1a42}.vdi

101

5 virtual storage

-----------------------
hdd base: "simple _ fixed _ disk.vdi"
uuid: ffba4d7e-1277-489d-8173-22ca7660773d
location: /volumes/work/vm _ guests/macos high sierra 10.13/simple _ fixed _ disk.vdi

diff 1:
uuid: aecab681-0d2d-468b-8682-93f79dc97a48
location: /volumes/work/vm _ guests/macos high sierra 10.13/
snapshots/{aecab681-0d2d-468b-8682-93f79dc97a48}.vdi
diff 2:
uuid: 70d6b34d-8422-47fa-8521-3b6929a1971c
location: /volumes/work/vm _ guests/macos high sierra 10.13/
snapshots/{70d6b34d-8422-47fa-8521-3b6929a1971c}.vdi
------------------------------------------------------
vm name: "debian"
uuid: 5365ab5f-470d-44c0-9863-dad532ee5905
location: /volumes/work/vm _ guests/debian/debian.vbox
-----------------------
hdd base: "debian.vdi"
uuid: 96d2e92e-0d4e-46ab-a0f1-008fdbf997e7
location: /volumes/work/vm _ guests/debian/ol7.vdi

diff 1:
uuid: f9cc866a-9166-42e9-a503-bbfe9b7312e8
location: /volumes/work/vm _ guests/debian/snapshots/
{f9cc866a-9166-42e9-a503-bbfe9b7312e8}.vdi

the following command outputs partition information about the speciﬁed disk image:

$ vboximg-mount --image=f9ea7173-6869-4aa9-b487-68023a655980 --list

virtual disk image:

path: /volumes/work/vm _ guests/macos high sierra 10.13/macos high sierra 10.13.vdi
uuid: f9ea7173-6869-4aa9-b487-68023a655980

# start sectors size offset type
1 40 409599 199.9m 20480 efi system
2 409640 67453071 32.1g 209735680 hierarchical file system plus (hfs+)
3 67862712 1269535 107.8m 34745708544 apple boot (recovery hd)

5.11.2 mounting a virtual disk image
the following steps show how to use the vboximg-mount command to mount a partition of a
virtual disk image on the host os.

1. create a mount point on the host os. for example:

$ mkdir macos _ sysdisk

2. show partition information about the virtual disk image.

$ vboximg-mount --image=<uuid> --list

where uuid is the uuid of the disk image.
3. use vboximg-mount to perform a fuse mount of a partition on the virtual disk image. for
example:

$ vboximg-mount --image=<uuid> -p 2 macos _ sysdisk

102

5 virtual storage

where uuid is the uuid for the disk image.
in this example, partition 2 is mounted on the macos_sysdisk mount point. the mount
includes all snapshots for the disk image.
4. use the host os to mount the vhdd device node. the fuse-mounted device node represents
the virtual disk image.

$ ls macos _ sysdisk
macos high sierra 10.13.vdi vhdd
$ sudo mount macos _ sysdisk/vhdd /mnt

103

6 virtual networking

as mentioned in chapter 3.9, network settings, page 58, oracle vm virtualbox provides up to
eight virtual pci ethernet cards for each virtual machine. for each such card, you can individually
select the following:

• the hardware that will be virtualized.
• the virtualization mode that the virtual card operates in, with respect to your physical
networking hardware on the host.

four of the network cards can be conﬁgured in the network section of the settings dialog in
the graphical user interface of oracle vm virtualbox. you can conﬁgure all eight network cards
on the command line using vboxmanage modifyvm . see chapter 8.8, vboxmanage modifyvm,
page 145.
this chapter explains the various networking settings in more detail.

6.1 virtual networking hardware
for each card, you can individually select what kind of hardware will be presented to the virtual
machine. oracle vm virtualbox can virtualize the following types of networking hardware:

• amd pcnet pci ii (am79c970a)
• amd pcnet fast iii (am79c973), the default setting
• intel pro/1000 mt desktop (82540em)
• intel pro/1000 t server (82543gc)
• intel pro/1000 mt server (82545em)
• paravirtualized network adapter (virtio-net)

the pcnet fast iii is the default because it is supported by nearly all operating systems, as
well as by the gnu grub boot manager. as an exception, the intel pro/1000 family adapters
are chosen for some guest operating system types that no longer ship with drivers for the pcnet
card, such as windows vista.
the intel pro/1000 mt desktop type works with windows vista and later versions. the t
server variant of the intel pro/1000 card is recognized by windows xp guests without additional
driver installation. the mt server variant facilitates ovf imports from other platforms.
the paravirtualized network adapter (virtio-net) is special. if you select this adapter, then
oracle vm virtualbox does not virtualize common networking hardware that is supported by
common guest operating systems. instead, oracle vm virtualbox expects a special software
interface for virtualized environments to be provided by the guest, thus avoiding the complexity
of emulating networking hardware and improving network performance. oracle vm virtualbox
provides support for the industry-standard virtio networking drivers, which are part of the open
source kvm project.
the virtio networking drivers are available for the following guest operating systems:

104

6 virtual networking

• linux kernels version 2.6.25 or later can be conﬁgured to provide virtio support. some
distributions have also back-ported virtio to older kernels.
• for windows 2000, xp, and vista, virtio drivers can be downloaded and installed from the
kvm project web page:
http://www.linux-kvm.org/page/windowsguestdrivers .

oracle vm virtualbox also has limited support for jumbo frames. these are networking packets
with more than 1500 bytes of data, provided that you use the intel card virtualization and
bridged networking. jumbo frames are not supported with the amd networking devices. in those
cases, jumbo packets will silently be dropped for both the transmit and the receive direction.
guest operating systems trying to use this feature will observe this as a packet loss, which may
lead to unexpected application behavior in the guest. this does not cause problems with guest
operating systems in their default conﬁguration, as jumbo frames need to be explicitly enabled.

6.2 introduction to networking modes

each of the networking adapters can be separately conﬁgured to operate in one of the following
modes:

• not attached. in this mode, oracle vm virtualbox reports to the guest that a network
card is present, but that there is no connection. this is as if no ethernet cable was plugged
into the card. using this mode, it is possible to pull the virtual ethernet cable and disrupt
the connection, which can be useful to inform a guest operating system that no network
connection is available and enforce a reconﬁguration.
• network address translation (nat). if all you want is to browse the web, download ﬁles,
and view email inside the guest, then this default mode should be sufﬁcient for you, and
you can skip the rest of this section. please note that there are certain limitations when
using windows ﬁle sharing. see chapter 6.3.3, nat limitations, page 108.
• nat network. a nat network is a type of internal network that allows outbound connec-
tions. see chapter 6.4, network address translation service, page 108.
• bridged networking. this is for more advanced networking needs, such as network sim-
ulations and running servers in a guest. when enabled, oracle vm virtualbox connects to
one of your installed network cards and exchanges network packets directly, circumventing
your host operating system’s network stack.
• internal networking. this can be used to create a different kind of software-based net-
work which is visible to selected virtual machines, but not to applications running on the
host or to the outside world.
• host-only networking. this can be used to create a network containing the host and a set
of virtual machines, without the need for the host’s physical network interface. instead, a
virtual network interface, similar to a loopback interface, is created on the host, providing
connectivity among virtual machines and the host.
• generic networking. rarely used modes which share the same generic network interface,
by allowing the user to select a driver which can be included with oracle vm virtualbox or
be distributed in an extension pack.
the following sub-modes are available:
– udp tunnel: used to interconnect virtual machines running on different hosts di-
rectly, easily, and transparently, over an existing network infrastructure.

105

6 virtual networking

– vde (virtual distributed ethernet) networking: used to connect to a virtual dis-
tributed ethernet switch on a linux or a freebsd host. at the moment this option
requires compilation of oracle vm virtualbox from sources, as the oracle packages
do not include it.

the following table provides an overview of the most important networking modes.

mode vm→host vm←host vm1↔vm2 vm→net/lan vm←net/lan

host-only + + + – –

internal – – + – –

bridged + + + + +

nat + port forward – + port forward

natservice + port forward + + port forward

the following sections describe the available network modes in more detail.

6.3 network address translation (nat)

network address translation (nat) is the simplest way of accessing an external network from
a virtual machine. usually, it does not require any conﬁguration on the host network and guest
system. for this reason, it is the default networking mode in oracle vm virtualbox.
a virtual machine with nat enabled acts much like a real computer that connects to the in-
ternet through a router. the router, in this case, is the oracle vm virtualbox networking engine,
which maps trafﬁc from and to the virtual machine transparently. in oracle vm virtualbox this
router is placed between each virtual machine and the host. this separation maximizes security
since by default virtual machines cannot talk to each other.
the disadvantage of nat mode is that, much like a private network behind a router, the virtual
machine is invisible and unreachable from the outside internet. you cannot run a server this way
unless you set up port forwarding. see chapter 6.3.1, conﬁguring port forwarding with nat,
page 107.
the network frames sent out by the guest operating system are received by oracle vm
virtualbox’s nat engine, which extracts the tcp/ip data and resends it using the host oper-
ating system. to an application on the host, or to another computer on the same network as the
host, it looks like the data was sent by the oracle vm virtualbox application on the host, using
an ip address belonging to the host. oracle vm virtualbox listens for replies to the packages
sent, and repacks and resends them to the guest machine on its private network.

note: even though the nat engine separates the vm from the host, the vm has ac-
cess to the host’s loopback interface and the network services running on it. the host’s
loopback interface is accessible as ip address 10.0.2.2. this access to the host’s loop-
back interface can be extremely useful in some cases, for example when running a web
application under development in the vm and the database server on the loopback
interface on the host.

the virtual machine receives its network address and conﬁguration on the private network
from a dhcp server integrated into oracle vm virtualbox. the ip address thus assigned to the
virtual machine is usually on a completely different network than the host. as more than one
card of a virtual machine can be set up to use nat, the ﬁrst card is connected to the private

106

6 virtual networking

network 10.0.2.0, the second card to the network 10.0.3.0 and so on. if you need to change the
guest-assigned ip range, see chapter 9.8, fine tuning the oracle vm virtualbox nat engine, page
255.

6.3.1 conﬁguring port forwarding with nat
as the virtual machine is connected to a private network internal to oracle vm virtualbox and
invisible to the host, network services on the guest are not accessible to the host machine or to
other computers on the same network. however, like a physical router, oracle vm virtualbox
can make selected services available to the world outside the guest through port forwarding.
this means that oracle vm virtualbox listens to certain ports on the host and resends all packets
which arrive there to the guest, on the same or a different port.
to an application on the host or other physical or virtual machines on the network, it looks as
though the service being proxied is actually running on the host. this also means that you cannot
run the same service on the same ports on the host. however, you still gain the advantages of
running the service in a virtual machine. for example, services on the host machine or on other
virtual machines cannot be compromised or crashed by a vulnerability or a bug in the service,
and the service can run in a different operating system than the host system.
to conﬁgure port forwarding you can use the graphical port forwarding editor which can be
found in the network settings dialog for network adaptors conﬁgured to use nat. here, you
can map host ports to guest ports to allow network trafﬁc to be routed to a speciﬁc port in the
guest.
alternatively, the command line tool vboxmanage can be used. see chapter 8.8, vboxmanage
modifyvm, page 145.
you will need to know which ports on the guest the service uses and to decide which ports to
use on the host. you may want to use the same ports on the guest and on the host. you can use
any ports on the host which are not already in use by a service. for example, to set up incoming
nat connections to an ssh server in the guest, use the following command:

vboxmanage modifyvm "vm name" --natpf1 "guestssh,tcp,,2222,,22"

in the above example, all tcp trafﬁc arriving on port 2222 on any host interface will be
forwarded to port 22 in the guest. the protocol name tcp is a mandatory attribute deﬁning
which protocol should be used for forwarding, udp could also be used. the name guestssh is
purely descriptive and will be auto-generated if omitted. the number after --natpf denotes the
network card, as with other vboxmanage commands.
to remove this forwarding rule, use the following command:

vboxmanage modifyvm "vm name" --natpf1 delete "guestssh"

if for some reason the guest uses a static assigned ip address not leased from the built-in dhcp
server, it is required to specify the guest ip when registering the forwarding rule, as follows:

vboxmanage modifyvm "vm name" --natpf1 "guestssh,tcp,,2222,10.0.2.19,22"

this example is identical to the previous one, except that the nat engine is being told that the
guest can be found at the 10.0.2.19 address.
to forward all incoming trafﬁc from a speciﬁc host interface to the guest, specify the ip of that
host interface as follows:

vboxmanage modifyvm "vm name" --natpf1 "guestssh,tcp,127.0.0.1,2222,,22"

this example forwards all tcp trafﬁc arriving on the localhost interface at 127.0.0.1 through
port 2222 to port 22 in the guest.
it is possible to conﬁgure incoming nat connections while the vm is running, see chapter
8.13, vboxmanage controlvm, page 163.

107

6 virtual networking

6.3.2 pxe booting with nat
pxe booting is now supported in nat mode. the nat dhcp server provides a boot ﬁle
name of the form vmname.pxe if the directory tftp exists in the directory where the user’s
virtualbox.xml ﬁle is kept. it is the responsibility of the user to provide vmname.pxe .

6.3.3 nat limitations
there are some limitations of nat mode which users should be aware of, as follows:

• icmp protocol limitations. some frequently used network debugging tools, such as ping
or traceroute , rely on the icmp protocol for sending and receiving messages. oracle vm
virtualbox icmp support has some limitations, meaning ping should work but some other
tools may not work reliably.
• receiving of udp broadcasts. the guest does not reliably receive udp broadcasts. in
order to save resources, it only listens for a certain amount of time after the guest has
sent udp data on a particular port. as a consequence, netbios name resolution based on
broadcasts does not always work, but wins always works. as a workaround, you can use
the numeric ip of the desired server in the \\server\share notation.
• some protocols are not supported. protocols other than tcp and udp are not supported.
gre is not supported. this means some vpn products, such as pptp from microsoft, cannot
be used. there are other vpn products which use only tcp and udp.
• forwarding host ports below 1024. on unix-based hosts, such as linux, oracle solaris,
and mac os x, it is not possible to bind to ports below 1024 from applications that are not
run by root . as a result, if you try to conﬁgure such a port forwarding, the vm will refuse
to start.

these limitations normally do not affect standard network use. but the presence of nat has
also subtle effects that may interfere with protocols that are normally working. one example is
nfs, where the server is often conﬁgured to refuse connections from non-privileged ports, which
are those ports not below 1024.

6.4 network address translation service

the network address translation (nat) service works in a similar way to a home router, group-
ing the systems using it into a network and preventing systems outside of this network from
directly accessing systems inside it, but letting systems inside communicate with each other and
with systems outside using tcp and udp over ipv4 and ipv6.
a nat service is attached to an internal network. virtual machines which are to make use of it
should be attached to that internal network. the name of internal network is chosen when the
nat service is created and the internal network will be created if it does not already exist. the
following is an example command to create a nat network:

vboxmanage natnetwork add --netname natnet1 --network "192.168.15.0/24" --enable

here, natnet1 is the name of the internal network to be used and 192.168.15.0/24 is the
network address and mask of the nat service interface. by default in this static conﬁguration the
gateway will be assigned the address 192.168.15.1, the address following the interface address,
though this is subject to change. to attach a dhcp server to the internal network, modify the
example command as follows:

vboxmanage natnetwork add --netname natnet1 --network "192.168.15.0/24" --enable --dhcp on

108

6 virtual networking

to add a dhcp server to an existing network, use the following command:

vboxmanage natnetwork modify --netname natnet1 --dhcp on

to disable the dhcp server, use the following command:

vboxmanage natnetwork modify --netname natnet1 --dhcp off

a dhcp server provides a list of registered nameservers, but does not map servers from the
127/8 network.
to start the nat service, use the following command:

vboxmanage natnetwork start --netname natnet1

if the network has a dhcp server attached then it will start together with the nat network
service.
to stop the nat network service, together with any dhcp server:

vboxmanage natnetwork stop --netname natnet1

to delete the nat network service:

vboxmanage natnetwork remove --netname natnet1

this command does not remove the dhcp server if one is enabled on the internal network.
port-forwarding is supported, using the --port-forward-4 switch for ipv4 and
--port-forward-6 for ipv6. for example:

vboxmanage natnetwork modify \
--netname natnet1 --port-forward-4 "ssh:tcp:[]:1022:[192.168.15.5]:22"

this adds a port-forwarding rule from the host’s tcp 1022 port to the port 22 on the guest
with ip address 192.168.15.5. host port, guest port and guest ip are mandatory. to delete the
rule, use the following command:

vboxmanage natnetwork modify --netname natnet1 --port-forward-4 delete ssh

it is possible to bind a nat service to speciﬁed interface. for example:

vboxmanage setextradata global "nat/win-nat-test-0/sourceip4" 192.168.1.185

to see the list of registered nat networks, use the following command:

vboxmanage list natnetworks

note: even though the nat service separates the vm from the host, the vm has ac-
cess to the host’s loopback interface and the network services running on it. the host’s
loopback interface is accessible as ip address 10.0.2.2 (assuming the default conﬁgura-
tion, in other conﬁgurations it’s the respective address in the conﬁgured ipv4 or ipv6
network range). this access to the host’s loopback interface can be extremely useful
in some cases, for example when running a web application under development in the
vm and the database server on the loopback interface on the host.

109

6 virtual networking

6.5 bridged networking
with bridged networking, oracle vm virtualbox uses a device driver on your host system that
ﬁlters data from your physical network adapter. this driver is therefore called a net ﬁlter driver.
this enables oracle vm virtualbox to intercept data from the physical network and inject data
into it, effectively creating a new network interface in software. when a guest is using such a
new software interface, it looks to the host system as though the guest were physically connected
to the interface using a network cable. the host can send data to the guest through that interface
and receive data from it. this means that you can set up routing or bridging between the guest
and the rest of your network.

note: even though tap interfaces are no longer necessary on linux for bridged net-
working, you can still use tap interfaces for certain advanced setups, since you can
connect a vm to any host interface.

to enable bridged networking, open the settings dialog of a virtual machine, go to the net-
work page and select bridged network in the drop-down list for the attached to ﬁeld. select a
host interface from the list at the bottom of the page, which contains the physical network inter-
faces of your systems. on a typical macbook, for example, this will allow you to select between
en1: airport, which is the wireless interface, and en0: ethernet, which represents the interface
with a network cable.

note: bridging to a wireless interface is done differently from bridging to a wired in-
terface, because most wireless adapters do not support promiscuous mode. all trafﬁc
has to use the mac address of the host’s wireless adapter, and therefore oracle vm
virtualbox needs to replace the source mac address in the ethernet header of an out-
going packet to make sure the reply will be sent to the host interface. when oracle vm
virtualbox sees an incoming packet with a destination ip address that belongs to one
of the virtual machine adapters it replaces the destination mac address in the ether-
net header with the vm adapter’s mac address and passes it on. oracle vm virtualbox
examines arp and dhcp packets in order to learn the ip addresses of virtual machines.

depending on your host operating system, the following limitations apply:

• mac os x hosts. functionality is limited when using airport, the mac’s wireless networking
system, for bridged networking. currently, oracle vm virtualbox supports only ipv4 and
ipv6 over airport. for other protocols, such as ipx, you must choose a wired interface.
• linux hosts. functionality is limited when using wireless interfaces for bridged network-
ing. currently, oracle vm virtualbox supports only ipv4 and ipv6 over wireless. for other
protocols, such as ipx, you must choose a wired interface.
also, setting the mtu to less than 1500 bytes on wired interfaces provided by the sky2
driver on the marvell yukon ii ec ultra ethernet nic is known to cause packet losses
under certain conditions.
some adapters strip vlan tags in hardware. this does not allow you to use vlan trunking
between vm and the external network with pre-2.6.27 linux kernels, or with host operating
systems other than linux.
• oracle solaris hosts. there is no support for using wireless interfaces. filtering guest
trafﬁc using ipfilter is also not completely supported due to technical restrictions of the
oracle solaris networking subsystem. these issues may be addressed in later releases of
oracle solaris 11.

110

6 virtual networking

on oracle solaris 11 hosts build 159 and above, it is possible to use oracle solaris cross-
bow virtual network interfaces (vnics) directly with oracle vm virtualbox without any
additional conﬁguration other than each vnic must be exclusive for every guest network
interface.
when using vlan interfaces with oracle vm virtualbox, they must be named according to
the ppa-hack naming scheme, such as e1000g513001. otherwise, the guest may receive
packets in an unexpected format.

6.6 internal networking

internal networking is similar to bridged networking in that the vm can directly communicate
with the outside world. however, the outside world is limited to other vms on the same host
which connect to the same internal network.
even though technically, everything that can be done using internal networking can also be
done using bridged networking, there are security advantages with internal networking. in
bridged networking mode, all trafﬁc goes through a physical interface of the host system. it is
therefore possible to attach a packet sniffer such as wireshark to the host interface and log all
trafﬁc that goes over it. if, for any reason, you prefer two or more vms on the same machine
to communicate privately, hiding their data from both the host system and the user, bridged
networking therefore is not an option.
internal networks are created automatically as needed. there is no central conﬁguration.
every internal network is identiﬁed simply by its name. once there is more than one active
virtual network card with the same internal network id, the oracle vm virtualbox support driver
will automatically wire the cards and act as a network switch. the oracle vm virtualbox support
driver implements a complete ethernet switch and supports both broadcast/multicast frames and
promiscuous mode.
in order to attach a vm’s network card to an internal network, set its networking mode to
internal networking. there are two ways to accomplish this:

• use the vm’s settings dialog in the oracle vm virtualbox graphical user interface. in the
networking category of the settings dialog, select internal networking from the drop-
down list of networking modes. select the name of an existing internal network from the
drop-down list below, or enter a new name into the name ﬁeld.
• use the command line, for example:

vboxmanage modifyvm "vm name" --nic<x> intnet

optionally, you can specify a network name with the command:

vboxmanage modifyvm "vm name" --intnet<x> "network name"

if you do not specify a network name, the network card will be attached to the network
intnet by default.

unless you conﬁgure the virtual network cards in the guest operating systems that are partici-
pating in the internal network to use static ip addresses, you may want to use the dhcp server
that is built into oracle vm virtualbox to manage ip addresses for the internal network. see
chapter 8.42, vboxmanage dhcpserver, page 214.
as a security measure, by default, the linux implementation of internal networking only allows
vms running under the same user id to establish an internal network. however, it is possible to
create a shared internal networking interface, accessible by users with different user ids.

111

6 virtual networking

6.7 host-only networking

host-only networking can be thought of as a hybrid between the bridged and internal networking
modes. as with bridged networking, the virtual machines can talk to each other and the host
as if they were connected through a physical ethernet switch. as with internal networking, a
physical networking interface need not be present, and the virtual machines cannot talk to the
world outside the host since they are not connected to a physical networking interface.
when host-only networking is used, oracle vm virtualbox creates a new software interface on
the host which then appears next to your existing network interfaces. in other words, whereas
with bridged networking an existing physical interface is used to attach virtual machines to, with
host-only networking a new loopback interface is created on the host. and whereas with internal
networking, the trafﬁc between the virtual machines cannot be seen, the trafﬁc on the loopback
interface on the host can be intercepted.
host-only networking is particularly useful for preconﬁgured virtual appliances, where multi-
ple virtual machines are shipped together and designed to cooperate. for example, one virtual
machine may contain a web server and a second one a database, and since they are intended to
talk to each other, the appliance can instruct oracle vm virtualbox to set up a host-only network
for the two. a second, bridged, network would then connect the web server to the outside world
to serve data to, but the outside world cannot connect to the database.
to change a virtual machine’s virtual network interface to host only mode, do either of the
following:

• go to the network page in the virtual machine’s settings dialog and select host-only
networking.
• on the command line, enter vboxmanage modifyvm "vmname --nicx hostonly . see
chapter 8.8, vboxmanage modifyvm, page 145.

before you can attach a vm to a host-only network you have to create at least one host-only
interface. you can use the virtualbox manager for this. choose file, preferences, network,
host-only network, (+)add host-only network.
alternatively, you can use the command line:

vboxmanage hostonlyif create

see chapter 8.35, vboxmanage hostonlyif, page 201.
for host-only networking, as with internal networking, you may ﬁnd the dhcp server useful
that is built into oracle vm virtualbox. this can be enabled to then manage the ip addresses in
the host-only network since otherwise you would need to conﬁgure all ip addresses statically.

• in the oracle vm virtualbox graphical user interface, you can conﬁgure all these items
in the global settings by choosing file, preferences, network. this lists all host-only
networks which are presently in use. click on the network name and then on edit. you
can then modify the adapter and dhcp settings.
• alternatively, you can use vboxmanage dhcpserver on the command line. see chapter
8.42, vboxmanage dhcpserver, page 214.

note: on linux and mac os x hosts the number of host-only interfaces is limited to
128. there is no such limit for oracle solaris and windows hosts.

112

6 virtual networking

6.8 udp tunnel networking

this networking mode enables you to interconnect virtual machines running on different hosts.
technically this is done by encapsulating ethernet frames sent or received by the guest network
card into udp/ip datagrams, and sending them over any network available to the host.
udp tunnel mode has the following parameters:

• source udp port: the port on which the host listens. datagrams arriving on this port
from any source address will be forwarded to the receiving part of the guest network card.
• destination address: ip address of the target host of the transmitted data.
• destination udp port: port number to which the transmitted data is sent.

when interconnecting two virtual machines on two different hosts, their ip addresses must be
swapped. on a single host, source and destination udp ports must be swapped.
in the following example, host 1 uses the ip address 10.0.0.1 and host 2 uses ip address
10.0.0.2. to conﬁgure using the command-line:

vboxmanage modifyvm "vm 01 on host 1" --nic<x> generic
vboxmanage modifyvm "vm 01 on host 1" --nicgenericdrv<x> udptunnel
vboxmanage modifyvm "vm 01 on host 1" --nicproperty<x> dest=10.0.0.2
vboxmanage modifyvm "vm 01 on host 1" --nicproperty<x> sport=10001
vboxmanage modifyvm "vm 01 on host 1" --nicproperty<x> dport=10002

vboxmanage modifyvm "vm 02 on host 2" --nic<y> generic
vboxmanage modifyvm "vm 02 on host 2" --nicgenericdrv<y> udptunnel
vboxmanage modifyvm "vm 02 on host 2" --nicproperty<y> dest=10.0.0.1
vboxmanage modifyvm "vm 02 on host 2" --nicproperty<y> sport=10002
vboxmanage modifyvm "vm 02 on host 2" --nicproperty<y> dport=10001

of course, you can always interconnect two virtual machines on the same host, by setting the
destination address parameter to 127.0.0.1 on both. it will act similarly to an internal network in
this case. however, the host can see the network trafﬁc which it could not in the normal internal
network case.

note: on unix-based hosts, such as linux, oracle solaris, and mac os x, it is not
possible to bind to ports below 1024 from applications that are not run by root . as a
result, if you try to conﬁgure such a source udp port, the vm will refuse to start.

6.9 vde networking

virtual distributed ethernet (vde) is a ﬂexible, virtual network infrastructure system, spanning
across multiple hosts in a secure way. it enables l2/l3 switching, including spanning-tree pro-
tocol, vlans, and wan emulation. it is an optional part of oracle vm virtualbox which is only
included in the source code.
vde is a project developed by renzo davoli, associate professor at the university of bologna,
italy.
the basic building blocks of the infrastructure are vde switches, vde plugs, and vde wires
which interconnect the switches.
the oracle vm virtualbox vde driver has a single parameter: vde network. this is the name
of the vde network switch socket to which the vm will be connected.
the following basic example shows how to connect a virtual machine to a vde switch.

1. create a vde switch:

113

6 virtual networking

vde _ switch -s /tmp/switch1

2. conﬁgure vms using the command-line:

vboxmanage modifyvm "vm name" --nic<x> generic

vboxmanage modifyvm "vm name" --nicgenericdrv<x> vde

to connect to an automatically allocated switch port:

vboxmanage modifyvm "vm name" --nicproperty<x> network=/tmp/switch1

to connect to a speciﬁc switch port n :

vboxmanage modifyvm "vm name" --nicproperty<x> network=/tmp/switch1[<n>]

this command can be useful for vlans.
3. (optional) map between a vde switch port and a vlan.
using the switch command line:

vde$ vlan/create <vlan>

vde$ port/setvlan <port> <vlan>

vde is available on linux and freebsd hosts only. it is only available if the vde software and
the vde plugin library from the virtualsquare project are installed on the host system.

note: for linux hosts, the shared library libvdeplug.so must be available in the search
path for shared libraries.

for more information on setting up vde networks, please see the documentation accompany-
ing the software. see also http://wiki.virtualsquare.org/wiki/index.php/vde_basic_
networking .

6.10 limiting bandwidth for network input/output

oracle vm virtualbox supports limiting of the maximum bandwidth used for network transmis-
sion. several network adapters of one vm may share limits through bandwidth groups. it is
possible to have more than one such limit.

note: oracle vm virtualbox shapes vm trafﬁc only in the transmit direction, delaying
the packets being sent by virtual machines. it does not limit the trafﬁc being received
by virtual machines.

limits are conﬁgured through vboxmanage . the following example creates a bandwidth group
named limit, sets the limit to 20 mbps and assigns the group to the ﬁrst and second adapters of
the vm:

vboxmanage bandwidthctl "vm name" add limit --type network --limit 20m
vboxmanage modifyvm "vm name" --nicbandwidthgroup1 limit
vboxmanage modifyvm "vm name" --nicbandwidthgroup2 limit

114

6 virtual networking

all adapters in a group share the bandwidth limit, meaning that in the example above the
bandwidth of both adapters combined can never exceed 20 mbps. however, if one adapter does
not require bandwidth the other can use the remaining bandwidth of its group.
the limits for each group can be changed while the vm is running, with changes being picked
up immediately. the following example changes the limit for the group created in the previous
example to 100 kbps:

vboxmanage bandwidthctl "vm name" set limit --limit 100k

to completely disable shaping for the ﬁrst adapter of vm use the following command:

vboxmanage modifyvm "vm name" --nicbandwidthgroup1 none

it is also possible to disable shaping for all adapters assigned to a bandwidth group while vm
is running, by specifying the zero limit for the group. for example, for the bandwidth group
named limit:

vboxmanage bandwidthctl "vm name" set limit --limit 0

6.11 improving network performance

oracle vm virtualbox provides a variety of virtual network adapters that can be attached to the
host’s network in a number of ways. depending on which types of adapters and attachments are
used the network performance will be different. performance-wise the virtio network adapter is
preferable over intel pro/1000 emulated adapters, which are preferred over the pcnet family
of adapters. both virtio and intel pro/1000 adapters enjoy the beneﬁt of segmentation and
checksum ofﬂoading. segmentation ofﬂoading is essential for high performance as it allows
for less context switches, dramatically increasing the sizes of packets that cross the vm/host
boundary.

note: neither virtio nor intel pro/1000 drivers for windows xp support segmentation
ofﬂoading. therefore windows xp guests never reach the same transmission rates as
other guest types. refer to ms knowledge base article 842264 for additional informa-
tion.

three attachment types: internal, bridged, and host-only, have nearly identical performance.
the internal type is a little bit faster and uses less cpu cycles as the packets never reach the
host’s network stack. the nat attachment type is the slowest and most secure of all attachment
types, as it provides network address translation. the generic driver attachment is special and
cannot be considered as an alternative to other attachment types.
the number of cpus assigned to vm does not improve network performance and in some cases
may hurt it due to increased concurrency in the guest.
here is a short summary of things to check in order to improve network performance:

• whenever possible use the virtio network adapter. otherwise, use one of the intel
pro/1000 adapters.
• use a bridged attachment instead of nat.
• make sure segmentation ofﬂoading is enabled in the guest os. usually it will be enabled
by default. you can check and modify ofﬂoading settings using the ethtool command on
linux guests.

115

6 virtual networking

• perform a full detailed analysis of network trafﬁc on the vm’s network adaptor using a
third party tool such as wireshark. to do this, a promiscuous mode policy needs to be used
on the vm’s network adaptor. use of this mode is only possible on the following network
types: nat network, bridged adapter, internal network, and host-only adapter.
to setup a promiscuous mode policy, either select from the drop down list located in
the network settings dialog for the network adaptor or use the command line tool
vboxmanage . see chapter 8.8, vboxmanage modifyvm, page 145.
promiscuous mode policies are as follows:
– deny , which hides any trafﬁc not intended for the vm’s network adaptor. this is the
default setting.
– allow-vms , which hides all host trafﬁc from the vm’s network adaptor, but allows it
to see trafﬁc from and to other vms.
– allow-all , which removes all restrictions. the vm’s network adaptor sees all trafﬁc.

116

7 remote virtual machines

7.1 remote display (vrdp support)

oracle vm virtualbox can display virtual machines remotely, meaning that a virtual machine can
execute on one computer even though the machine will be displayed on a second computer, and
the machine will be controlled from there as well, as if the virtual machine was running on that
second computer.
for maximum ﬂexibility, oracle vm virtualbox implements remote machine display through a
generic extension interface called the virtualbox remote desktop extension (vrde). the base
open source oracle vm virtualbox package only provides this interface, while implementations
can be supplied by third parties with oracle vm virtualbox extension packages, which must be
installed separately from the base package. see chapter 1.5, installing oracle vm virtualbox and
extension packs, page 6.
oracle provides support for the virtualbox remote display protocol (vrdp) in such an oracle
vm virtualbox extension package.
vrdp is a backwards-compatible extension to microsoft’s remote desktop protocol (rdp). as
a result, you can use any standard rdp client to control the remote vm.
even when the extension is installed, the vrdp server is disabled by default. it can easily be
enabled on a per-vm basis either in the virtualbox manager in the display settings, see chapter
3.6, display settings, page 54, or with the vboxmanage command, as follows:

$ vboxmanage modifyvm <vm-name> --vrde on

by default, the vrdp server uses tcp port 3389 . you will need to change the default port if
you run more than one vrdp server, since the port can only be used by one server at a time. you
might also need to change it on windows hosts since the default port might already be used by
the rdp server that is built into windows itself. ports 5000 through 5050 are typically not used
and might be a good choice.
the port can be changed either in the display settings of the graphical user interface or with
the --vrdeport option of the vboxmanage modifyvm command. you can specify a comma-
separated list of ports or ranges of ports. use a dash between two port numbers to specify a
range. the vrdp server will bind to one of the available ports from the speciﬁed list. for example,
vboxmanage modifyvm vm-name --vrdeport 5000,5010-5012 conﬁgures the server to bind
to one of the ports 5000, 5010, 5011, or 5012. see chapter 8.8, vboxmanage modifyvm, page
145.
the actual port used by a running vm can be either queried with the vboxmanage showvminfo
command or seen in the gui on the runtime tab of the session information dialog, which is
accessible from the machine menu of the vm window.
oracle vm virtualbox supports ipv6. if the host os supports ipv6 the vrdp server will auto-
matically listen for ipv6 connections in addition to ipv4.

7.1.1 common third-party rdp viewers
since vrdp is backwards-compatible to rdp, you can use any standard rdp viewer to connect
to such a remote virtual machine. for this to work, you must specify the ip address of your host
system, not of the virtual machine, as the server address to connect to. you must also specify the
port number that the vrdp server is using.
the following examples are for the most common rdp viewers:

117

7 remote virtual machines

• on windows, you can use the microsoft terminal services connector, mstsc.exe , that is
included with windows. press the windows key + r, to display the run dialog. enter
mstsc to start the program. you can also ﬁnd the program in start, all programs, acces-
sories, remote desktop connection. if you use the run dialog, you can enter options
directly. for example:

mstsc 1.2.3.4:3389

replace 1.2.3.4 with the host ip address, and 3389 with a different port, if necessary.

note:

– ipv6 addresses must be enclosed in square brackets to specify a port. for example:
mstsc [fe80::1:2:3:4]:3389

– when connecting to localhost in order to test the connection, the addresses
localhost and 127.0.0.1 might not work using mstsc.exe . instead, the ad-
dress 127.0.0.2[:3389] has to be used.

• on other systems, you can use the standard open source rdesktop program. this ships
with most linux distributions, but oracle vm virtualbox also comes with a modiﬁed variant
of rdesktop for remote usb support. see chapter 7.1.4, remote usb, page 121.
with rdesktop , use a command line such as the following:

$ rdesktop -a 16 -n 1.2.3.4:3389

replace 1.2.3.4 with the host ip address, and 3389 with a different port, if necessary. the
-a 16 option requests a color depth of 16 bits per pixel, which we recommend. for best
performance, after installation of the guest operating system, you should set its display
color depth to the same value. the -n option enables use of the numpad keys.
• you can use the remmina remote desktop client with vrdp. this application is included
with some linux distributions, such as debian and ubuntu.
• if you run the kde desktop, you can use krdc , the kde rdp viewer. a typical command
line is as follows:

$ krdc rdp://1.2.3.4:3389

replace 1.2.3.4 with the host ip address, and 3389 with a different port, if necessary. the
rdp:// preﬁx is required with krdc to switch it into rdp mode.
• with sun ray thin clients you can use uttsc , which is part of the sun ray windows
connector package. see the sun ray documentation for details.

7.1.2 vboxheadless, the remote desktop server
while any vm started from the virtualbox manager is capable of running virtual machines re-
motely, it is not convenient to have to run the full gui if you never want to have vms displayed
locally in the ﬁrst place. in particular, if you are running server hardware whose only purpose
is to host vms, and all your vms are supposed to run remotely over vrdp, then it is pointless
to have a graphical user interface on the server at all. this is especially true for linux or oracle

118

7 remote virtual machines

solaris hosts, as the virtualbox manager comes with dependencies on the qt and sdl libraries.
this is inconvenient if you would rather not have the x window system on your server at all.
oracle vm virtualbox therefore comes with a front-end called vboxheadless , which produces
no visible output on the host at all, but still can optionally deliver vrdp data. this front-end has
no dependencies on the x window system on linux and oracle solaris hosts.

note: in legacy releases of oracle vm virtualbox, the headless server was called
vboxvrdp . for backwards compatibility, the oracle vm virtualbox installation still in-
cludes an executable with that name.

to start a virtual machine with vboxheadless , you have the following options:

• use the vboxmanage command, as follows:

$ vboxmanage startvm <vm-name> --type headless

the --type option causes oracle vm virtualbox to use vboxheadless as the front-end to
the internal virtualization engine, instead of the qt front-end.
• use the vboxheadless command, as follows:

vboxheadless --startvm <uuid>|<vmname>

this way of starting the vm helps troubleshooting problems reported by
vboxmanage startvm , because you can sometimes see more detailed error mes-
sages, especially for early failures before the vm execution is started. in normal situations
vboxmanage startvm is preferred, since it runs the vm directly as a background process
which has to be done explicitly when directly starting with vboxheadless . the full
documentation of the command is in chapter 7.3, vboxheadless, page 126.
• start vboxheadless from the virtualbox manager gui, by pressing the shift key when
starting a virtual machine or by selecting headless start from the machine menu.

when you use the vboxheadless command to start a vm, the vrdp server will be enabled
according to the vm conﬁguration. you can override the vm’s setting using --vrde command
line parameter. to enable the vrdp server, start the vm as follows:

vboxheadless --startvm <uuid>|<vmname> --vrde on

to disable the vrdp server:

vboxheadless --startvm <uuid>|<vmname> --vrde off

to have the vrdp server enabled depending on the vm conﬁguration, as for other front-ends:

vboxheadless --startvm <uuid>|<vmname> --vrde config

this command is the same as the following:

vboxheadless --startvm <uuid>|<vmname>

if you start the vm with vboxmanage startvm then the conﬁguration settings of the vm are
always used.

119

7 remote virtual machines

7.1.3 step by step: creating a virtual machine on a headless server
the following instructions describe how to create a virtual machine on a headless server over
a network connection. this example creates a virtual machine, establishes an rdp connection
and installs a guest operating system. all of these tasks are done without having to touch the
headless server. you need the following prerequisites:

• oracle vm virtualbox on a server machine with a supported host operating system. the
oracle vm virtualbox extension pack for the vrdp server must be installed, see chapter
7.1, remote display (vrdp support), page 117. the procedures assume a linux server is
used.
• an iso ﬁle accessible from the server, containing the installation data for the guest operat-
ing system to install. windows xp is used in the example.
• a terminal connection to that host through which you can access a command line, such as
ssh .
• an rdp viewer on the remote client. see chapter 7.1.1, common third-party rdp viewers,
page 117 for examples.

note that on the server machine, since we will only use the headless server, qt and the x
window system are not required.

1. on the headless server, create a new virtual machine. for example:

vboxmanage createvm --name "windows xp" --ostype windowsxp --register

if you do not specify --register , you will have to manually use the registervm command
later.
you do not need to specify --ostype , but doing so selects some sensible default values for
certain vm parameters. for example, the ram size and the type of the virtual network
device. to get a complete list of supported operating systems you can use the following
command:

vboxmanage list ostypes

2. make sure the settings for the vm are appropriate for the guest operating system that we
will install. for example:

vboxmanage modifyvm "windows xp" --memory 256 --acpi on --boot1 dvd --nic1 nat

3. create a virtual hard disk for the vm. for example, to create a 10 gb virtual hard disk:

vboxmanage createhd --filename "winxp.vdi" --size 10000

4. add an ide controller to the new vm. for example:

vboxmanage storagectl "windows xp" --name "ide controller"
--add ide --controller piix4

5. set the vdi ﬁle you created as the ﬁrst virtual hard disk of the new vm. for example:

vboxmanage storageattach "windows xp" --storagectl "ide controller"
--port 0 --device 0 --type hdd --medium "winxp.vdi"

120

7 remote virtual machines

6. attach the iso ﬁle that contains the operating system installation that you want to install
later to the virtual machine. this is done so that the vm can boot from it.

vboxmanage storageattach "windows xp" --storagectl "ide controller"
--port 0 --device 1 --type dvddrive --medium /full/path/to/iso.iso

7. enable the virtualbox remote desktop extension, the vrdp server, as follows:

vboxmanage modifyvm "windows xp" --vrde on

8. start the virtual machine using the vboxheadless command:

vboxheadless --startvm "windows xp"

if the conﬁguration steps worked, you should see a copyright notice. if you are returned to
the command line, then something did not work correctly.
9. on the client machine, start the rdp viewer and connect to the server. see chapter 7.1.1,
common third-party rdp viewers, page 117 for details of how to use various common rdp
viewers.
the installation routine of your guest operating system should be displayed in the rdp
viewer.

7.1.4 remote usb
as a special feature additional to the vrdp support, oracle vm virtualbox also supports remote
usb devices over the wire. that is, an oracle vm virtualbox guest that runs on one computer can
access the usb devices of the remote computer on which the vrdp data is being displayed the
same way as usb devices that are connected to the actual host. this enables running of virtual
machines on an oracle vm virtualbox host that acts as a server, where a client can connect from
elsewhere that needs only a network adapter and a display capable of running an rdp viewer.
when usb devices are plugged into the client, the remote oracle vm virtualbox server can access
them.
for these remote usb devices, the same ﬁlter rules apply as for other usb devices. see chapter
3.11.1, usb settings, page 60. all you have to do is specify remote, or any, when setting up these
rules.
accessing remote usb devices is only possible if the rdp client supports this extension. on
linux and oracle solaris hosts, the oracle vm virtualbox installation provides a suitable vrdp
client called rdesktop-vrdp . some versions of uttsc , a client tailored for the use with sun ray
thin clients, also support accessing remote usb devices. rdp clients for other platforms will be
provided in future oracle vm virtualbox versions.
to make a remote usb device available to a vm, rdesktop-vrdp should be started as follows:

rdesktop-vrdp -r usb -a 16 -n my.host.address

see chapter 12.7.5, usb not working, page 325 for further details on how to properly set up
the permissions for usb devices. furthermore it is advisable to disable automatic loading of any
host driver on the remote host which might work on usb devices to ensure that the devices are
accessible by the rdp client. if the setup was properly done on the remote host, plug and unplug
events are visible in the vbox.log ﬁle of the vm.

121

7 remote virtual machines

7.1.5 rdp authentication
for each virtual machine that is remotely accessible using rdp, you can individually determine
if and how client connections are authenticated. for this, use the vboxmanage modifyvm com-
mand with the --vrdeauthtype option. see chapter 8.8, vboxmanage modifyvm, page 145. the
following methods of authentication are available:
• the null method means that there is no authentication at all. any client can connect
to the vrdp server and thus the virtual machine. this is very insecure and only to be
recommended for private networks.
• the external method provides external authentication through a special authentication
library. oracle vm virtualbox ships with two special authentication libraries:
1. the default authentication library, vboxauth , authenticates against user credentials
of the hosts. depending on the host platform, this means the following:
– on linux hosts, vboxauth.so authenticates users against the host’s pam system.
– on windows hosts, vboxauth.dll authenticates users against the host’s winlo-
gon system.
– on mac os x hosts, vboxauth.dylib authenticates users against the host’s di-
rectory service.
in other words, the external method by default performs authentication with the user
accounts that exist on the host system. any user with valid authentication credentials
is accepted. for example, the username does not have to correspond to the user
running the vm.
2. an additional library called vboxauthsimple performs authentication against creden-
tials conﬁgured in the extradata section of a virtual machine’s xml settings ﬁle. this
is probably the simplest way to get authentication that does not depend on a running
and supported guest. the following steps are required:
a) enable vboxauthsimple with the following command:
vboxmanage setproperty vrdeauthlibrary "vboxauthsimple"
b) to enable the library for a particular vm, you must switch authentication to ex-
ternal, as follows:
vboxmanage modifyvm <vm-name> --vrdeauthtype external
replace vm-name with the vm name or uuid.
c) you then need to conﬁgure users and passwords by writing items into the ma-
chine’s extradata. since the xml machine settings ﬁle, into whose extradata
section the password needs to be written, is a plain text ﬁle, oracle vm virtualbox
uses hashes to encrypt passwords. the following command must be used:
vboxmanage setextradata <vm-name> "vboxauthsimple/users/<user>" <hash>
replace vm-name with the vm name or uuid, user with the user name who
should be allowed to log in and hash with the encrypted password. the following
command example obtains the hash value for the password secret :
$ vboxmanage internalcommands passwordhash "secret"
2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b
you then use vboxmanage setextradata to store this value in the machine’s
extradata section.
as a combined example, to set the password for the user john and the machine
my vm to secret , use this command:
vboxmanage setextradata "my vm" "vboxauthsimple/users/john"
2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b

122

7 remote virtual machines

• the guest authentication method performs authentication with a special component that
comes with the guest additions. as a result, authentication is not performed on the host,
but with the guest user accounts.
this method is currently still in testing and not yet supported.

in addition to the methods described above, you can replace the default external authenti-
cation module with any other module. for this, oracle vm virtualbox provides a well-deﬁned
interface that enables you to write your own authentication module. this is described in detail
in the oracle vm virtualbox software development kit (sdk) reference. see chapter 11, oracle
vm virtualbox programming interfaces, page 310.

7.1.6 rdp encryption
rdp features data stream encryption, which is based on the rc4 symmetric cipher, with keys up
to 128-bit. the rc4 keys are replaced at regular intervals, every 4096 packets.
rdp provides the following different authentication methods:

• rdp 4 authentication was used historically. with rdp 4, the rdp client does not perform
any checks in order to verify the identity of the server it connects to. since user credentials
can be obtained using a man in the middle (mitm) attack, rdp4 authentication is insecure
and should generally not be used.
• rdp 5.1 authentication employs a server certiﬁcate for which the client possesses the pub-
lic key. this way it is guaranteed that the server possess the corresponding private key.
however, as this hard-coded private key became public some years ago, rdp 5.1 authenti-
cation is also insecure.
• rdp 5.2 or later authentication uses enhanced rdp security, which means that an external
security protocol is used to secure the connection. rdp 4 and rdp 5.1 use standard rdp
security. the vrdp server supports enhanced rdp security with tls protocol and, as a
part of the tls handshake, sends the server certiﬁcate to the client.
the security/method vrde property sets the desired security method, which is used for
a connection. valid values are as follows:
– negotiate. both enhanced (tls) and standard rdp security connections are al-
lowed. the security method is negotiated with the client. this is the default setting.
– rdp. only standard rdp security is accepted.
– tls. only enhanced rdp security is accepted. the client must support tls.
the version of openssl used by oracle vm virtualbox supports tls versions 1.0, 1.1,
1.2, and 1.3.
for example, the following command enables a client to use either standard or enhanced
rdp security connection:

vboxmanage modifyvm <vm-name> --vrdeproperty "security/method=negotiate"

if the security/method property is set to either negotiate or tls, the tls protocol will
be automatically used by the server, if the client supports tls. however, in order to use
tls the server must possess the server certiﬁcate, the server private key and the certiﬁ-
cate authority (ca) certiﬁcate. the following example shows how to generate a server
certiﬁcate.
1. create a ca self signed certiﬁcate.
openssl req -new -x509 -days 365 -extensions v3 _ ca \
-keyout ca _ key _ private.pem -out ca _ cert.pem

123

7 remote virtual machines

2. generate a server private key and a request for signing.
openssl genrsa -out server _ key _ private.pem
openssl req -new -key server _ key _ private.pem -out server _ req.pem
3. generate the server certiﬁcate.
openssl x509 -req -days 365 -in server _ req.pem \
-ca ca _ cert.pem -cakey ca _ key _ private.pem -set _ serial 01 -out server _ cert.pem
the server must be conﬁgured to access the required ﬁles. for example:

vboxmanage modifyvm <vm-name> \
--vrdeproperty "security/cacertificate=path/ca _ cert.pem"

vboxmanage modifyvm <vm-name> \
--vrdeproperty "security/servercertificate=path/server _ cert.pem"

vboxmanage modifyvm <vm-name> \
--vrdeproperty "security/serverprivatekey=path/server _ key _ private.pem"

as the client that connects to the server determines what type of encryption will be used, with
rdesktop , the linux rdp viewer, use the -4 or -5 options.

7.1.7 multiple connections to the vrdp server
the vrdp server of oracle vm virtualbox supports multiple simultaneous connections to the
same running vm from different clients. all connected clients see the same screen output and
share a mouse pointer and keyboard focus. this is similar to several people using the same
computer at the same time, taking turns at the keyboard.
the following command enables multiple connection mode:

vboxmanage modifyvm <vm-name> --vrdemulticon on

7.1.8 multiple remote monitors
to access two or more remote vm displays you have to enable the vrdp multiconnection mode.
see chapter 7.1.7, multiple connections to the vrdp server, page 124.
the rdp client can select the virtual monitor number to connect to using the domain login
parameter ( -d ). if the parameter ends with @ followed by a number, oracle vm virtualbox
interprets this number as the screen index. the primary guest screen is selected with @1 , the ﬁrst
secondary screen is @2 , and so on.
the microsoft rdp 6 client does not let you specify a separate domain name. instead, enter
domain\username in the username ﬁeld. for example, @2\name . name must be supplied, and
must be the name used to log in if the vrdp server is set up to require credentials. if it is not,
you may use any text as the username.

7.1.9 vrdp video redirection
the vrdp server can redirect video streams from the guest to the rdp client. video frames are
compressed using the jpeg algorithm allowing a higher compression ratio than standard rdp
bitmap compression methods. it is possible to increase the compression ratio by lowering the
video quality.
the vrdp server automatically detects video streams in a guest as frequently updated rectan-
gular areas. as a result, this method works with any guest operating system without having to
install additional software in the guest. in particular, the guest additions are not required.
on the client side, however, currently only the windows 7 remote desktop connection client
supports this feature. if a client does not support video redirection, the vrdp server falls back to
regular bitmap updates.
the following command enables video redirection:

124

7 remote virtual machines

vboxmanage modifyvm <vm-name> --vrdevideochannel on

the quality of the video is deﬁned as a value from 10 to 100 percent, representing a jpeg com-
pression level, where lower numbers mean lower quality but higher compression. the quality
can be changed using the following command:

vboxmanage modifyvm <vm-name> --vrdevideochannelquality 75

7.1.10 vrdp customization
you can disable display output, mouse and keyboard input, audio, remote usb, or clipboard
individually in the vrdp server.
the following commands change the corresponding server settings:

$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disabledisplay=1
$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disableinput=1
$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disableusb=1
$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disableaudio=1
$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disableclipboard=1
$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disableupstreamaudio=1

to reenable a feature, use a similar command without the trailing 1. for example:

$ vboxmanage modifyvm <vm-name> --vrdeproperty client/disabledisplay=

7.2 teleporting
oracle vm virtualbox supports teleporting. teleporting is moving a virtual machine over a net-
work from one oracle vm virtualbox host to another, while the virtual machine is running. this
works regardless of the host operating system that is running on the hosts. you can teleport
virtual machines between oracle solaris and mac os x hosts, for example.
teleporting requires that a machine be currently running on one host, which is called the
source. the host to which the virtual machine will be teleported is called the target. the machine
on the target is then conﬁgured to wait for the source to contact the target. the machine’s
running state will then be transferred from the source to the target with minimal downtime.
teleporting happens over any tcp/ip network. the source and the target only need to agree
on a tcp/ip port which is speciﬁed in the teleporting settings.
at this time, there are a few prerequisites for this to work, as follows:

• on the target host, you must conﬁgure a virtual machine in oracle vm virtualbox with
exactly the same hardware settings as the machine on the source that you want to teleport.
this does not apply to settings which are merely descriptive, such as the vm name, but ob-
viously for teleporting to work, the target machine must have the same amount of memory
and other hardware settings. otherwise teleporting will fail with an error message.
• the two virtual machines on the source and the target must share the same storage, hard
disks as well as ﬂoppy disks and cd/dvd images. this means that they either use the same
iscsi targets or that the storage resides somewhere on the network and both hosts have
access to it using nfs or smb/cifs.
this also means that neither the source nor the target machine can have any snapshots.

to conﬁgure teleporting, perform the following steps:

1. on the target host, conﬁgure the virtual machine to wait for a teleport request to arrive
when it is started, instead of actually attempting to start the machine. this is done with
the following vboxmanage command:

125

7 remote virtual machines

vboxmanage modifyvm <targetvmname> --teleporter on --teleporterport <port>

targetvmname is the name of the virtual machine on the target host and port is a tcp/ip
port number to be used on both the source and the target hosts. for example, use 6000.
see chapter 8.8, vboxmanage modifyvm, page 145.
2. start the vm on the target host. instead of running, the vm shows a progress dialog,
indicating that it is waiting for a teleport request to arrive.
3. start the vm on the source host as usual. when it is running and you want it to be tele-
ported, issue the following command on the source host:

vboxmanage controlvm <sourcevmname> teleport --host <targethost> --port <port>

where sourcevmname is the name of the virtual machine on the source host, which is the
machine that is currently running. targethost is the host or ip name of the target host on
which the machine is waiting for the teleport request, and port must be the same number
as speciﬁed in the command on the target host. see chapter 8.13, vboxmanage controlvm,
page 163.

for testing, you can also teleport machines on the same host. in that case, use localhost as the
hostname on both the source and the target host.

note: in rare cases, if the cpus of the source and the target are very different, teleport-
ing can fail with an error message, or the target may hang. this may happen especially
if the vm is running application software that is highly optimized to run on a particular
cpu without correctly checking that certain cpu features are actually present. ora-
cle vm virtualbox ﬁlters what cpu capabilities are presented to the guest operating
system. advanced users can attempt to restrict these virtual cpu capabilities with the
vboxmanage modifyvm --cpuid command. see chapter 8.8, vboxmanage modifyvm,
page 145.

7.3 vboxheadless

oracle vm virtualbox remote desktop server.

synopsis
vboxheadless [--startvm= [uuid | vmname] ] [--vrde= on | off | config ]
[--vrdeproperty=prop-name=[prop-value]] [--settingspw=[password]]
[--settingspwfile=password-file] [--start-paused=vmname]
[--capture] [--width=width] [--height=height] [--bitrate=bit-rate]
[--filename=filename]

description
the vboxheadless command is an alternate front end that enables you to remotely manage
virtual machines (vms). the front end is a cli rather than the virtualbox manager graphical
user interface (gui).
for information about using this command, see chapter 7.1.2, vboxheadless, the remote desk-
top server, page 118.

126

7 remote virtual machines

command options
--startvm=<uuid> | <vmname>

speciﬁes the universally unique identiﬁer (uuid) or name of the vm to start.
use the vboxmanage list vms command to obtain vm information.
the short versions of this option are -s and -startvm .

--vrde=on | off | config

speciﬁes how to use the vrdp server. the default value is config . valid values are as
follows:
• on enables the vrdp server.
vboxheadless --startvm=<vmname> --vrde=on
• off disables the vrdp server.
vboxheadless --startvm=<vmname> --vrde=off
• config enables the vrdp server depending on the vm conﬁguration.
vboxheadless --startvm=<vmname> --vrde=config
the short version of this option is -v .

--vrdeproperty=<prop-name>=<prop-value>

speciﬁes a value for one of the following properties:
• the tcp/ports property value is a comma-separated list of ports to which the vrde
server can bind. use a hyphen ( - ) between two port numbers to specify a range of
ports.
• the tcp/address property value is the interface ip address to which to bind the vrde
server.

--settingspw=[<password>]

speciﬁes a settings password to access encrypted settings. if you do not specify the pass-
word on the command line, vboxheadless prompts you for the password.

--settingspwfile=<password-file>

speciﬁes the ﬁle that contains the settings password.

--start-paused=<vmname>

starts the speciﬁed vm in the paused state.

--capture

records the vm screen output to a ﬁle. in addition to this option, you must use the
--filename option to specify the name of the ﬁle.

--width=<width>

speciﬁes the frame width of the recording in pixels. this option is associated with the
--capture option.

127

7 remote virtual machines

--height=<height>

speciﬁes the frame height of the recording in pixels. this option is associated with the
--capture option.

--bitrate=<bit-rate>

speciﬁes the bit rate of the recording in kilobits per second. this option is associated with
the --capture option.

--filename=<filename>

speciﬁes the name of the ﬁle in which to store the recording. the codec used is based on
the ﬁle extension that you choose. you must specify this option if you use the --capture
option.

examples
the following command starts the ol7u4 vm:

$ vboxheadless --startvm "ol7u4"

the following command starts the ol7u6 vm in the paused state.

$ vboxheadless --startvm "ol7u6" --start-paused

the following command starts the ol7u6 vm and records the session. the recording is saved
to the ol7u6-recording webm ﬁle.

$ vboxheadless --startvm "ol7u6" --capture --filename ol7u6-recording.webm

see also
chapter 8.4, vboxmanage list, page 142, chapter 8.12, vboxmanage startvm, page 162

128

8 vboxmanage

8.1 introduction
as brieﬂy mentioned in chapter 1.16, alternative front-ends, page 30, vboxmanage is the
command-line interface to oracle vm virtualbox. with it, you can completely control oracle
vm virtualbox from the command line of your host operating system. vboxmanage supports all
the features that the graphical user interface gives you access to, but it supports a lot more than
that. it exposes all the features of the virtualization engine, even those that cannot be accessed
from the gui.
you will need to use the command line if you want to do the following:

• use a different user interface than the main gui such as the vboxheadless server.
• control some of the more advanced and experimental conﬁguration settings for a vm.

there are two main things to keep in mind when using vboxmanage . first, vboxmanage must
always be used with a speciﬁc subcommand, such as list or createvm or startvm . all the
subcommands that vboxmanage supports are described in detail in chapter 8, vboxmanage, page
129.
second, most of these subcommands require that you specify a particular virtual machine after
the subcommand. there are two ways you can do this:

• you can specify the vm name, as it is shown in the oracle vm virtualbox gui. note that if
that name contains spaces, then you must enclose the entire name in double quotes. this
is always required with command line arguments that contain spaces. for example:

vboxmanage startvm "windows xp"

• you can specify the uuid, which is the internal unique identiﬁer that oracle vm virtualbox
uses to refer to the virtual machine. assuming that the vm called “windows xp” has the
uuid shown below, the following command has the same effect as the previous example:

vboxmanage startvm 670e746d-abea-4ba6-ad02-2a3b043810a5

you can enter vboxmanage list vms to have all currently registered vms listed with all their
settings, including their respective names and uuids.
some typical examples of how to control oracle vm virtualbox from the command line are
listed below:

• to create a new virtual machine from the command line and immediately register it with
oracle vm virtualbox, use vboxmanage createvm with the --register option, as follows:

$ vboxmanage createvm --name "suse 10.2" --register
virtualbox command line management interface version <version-number>
(c) 2005-2018 oracle corporation
all rights reserved.

virtual machine ’suse 10.2’ is created.
uuid: c89fc351-8ec6-4f02-a048-57f4d25288e5
settings file: ’/home/username/.config/virtualbox/machines/suse 10.2/suse 10.2.xml’

129

8 vboxmanage

as can be seen from the above output, a new virtual machine has been created with a new
uuid and a new xml settings ﬁle.
for more details, see chapter 8.7, vboxmanage createvm, page 145.
• to show the conﬁguration of a particular vm, use vboxmanage showvminfo . see chapter
8.5, vboxmanage showvminfo, page 144 for details and an example.
• to change settings while a vm is powered off, use vboxmanage modifyvm . for example:

vboxmanage modifyvm "windows xp" --memory 512

see also chapter 8.8, vboxmanage modifyvm, page 145.
• to change the storage conﬁguration, such as to add a storage controller and then a virtual
disk, use vboxmanage storagectl and vboxmanage storageattach . see chapter 8.18,
vboxmanage storagectl, page 174 and chapter 8.17, vboxmanage storageattach, page 170.
• to control vm operation, use one of the following:
– to start a vm that is currently powered off, use vboxmanage startvm . see chapter
8.12, vboxmanage startvm, page 162.
– to pause or save a vm that is currently running or change some of its settings, use
vboxmanage controlvm . see chapter 8.13, vboxmanage controlvm, page 163.

8.2 commands overview

when running vboxmanage without parameters or when supplying an invalid command line, the
following command syntax list is shown. note that the output will be slightly different depending
on the host platform. if in doubt, check the output of vboxmanage for the commands available
on your particular host.

usage:

vboxmanage [<general option>] <command>

general options:

[-v|--version] print version number and exit
[-q|--nologo] suppress the logo
[--settingspw <pw>] provide the settings password
[--settingspwfile <file>] provide a file containing the settings password
[@<response-file>] load arguments from the given response file (bourne style)

commands:

list [--long|-l] [--sorted|-s] vms|runningvms|ostypes|hostdvds|hostfloppies|
intnets|bridgedifs|hostonlyifs|natnets|dhcpservers|
hostinfo|hostcpuids|hddbackends|hdds|dvds|floppies|
usbhost|usbfilters|systemproperties|extpacks|
groups|webcams|screenshotformats|cloudproviders|
cloudprofiles|cloudnets

showvminfo <uuid|vmname> [--details]
[--machinereadable]
showvminfo <uuid|vmname> --log <idx>

registervm <filename>

unregistervm <uuid|vmname> [--delete]

130

8 vboxmanage

createvm --name <name>
[--groups <group>, ...]
[--ostype <ostype>]
[--register]
[--basefolder <path>]
[--uuid <uuid>]
[--default]

modifyvm <uuid|vmname>
[--name <name>]
[--groups <group>, ...]
[--description <desc>]
[--ostype <ostype>]
[--iconfile <filename>]
[--memory <memorysize in mb>]
[--pagefusion on|off]
[--vram <vramsize in mb>]
[--acpi on|off]
[--ioapic on|off]
[--hpet on|off]
[--triplefaultreset on|off]
[--apic on|off]
[--x2apic on|off]
[--paravirtprovider none|default|legacy|minimal|
hyperv|kvm]
[--paravirtdebug <key=value> [,<key=value> ...]]
[--hwvirtex on|off]
[--nestedpaging on|off]
[--largepages on|off]
[--vtxvpid on|off]
[--vtxux on|off]
[--pae on|off]
[--longmode on|off]
[--ibpb-on-vm-exit on|off]
[--ibpb-on-vm-entry on|off]
[--spec-ctrl on|off]
[--l1d-flush-on-sched on|off]
[--l1d-flush-on-vm-entry on|off]
[--mds-clear-on-sched on|off]
[--mds-clear-on-vm-entry on|off]
[--nested-hw-virt on|off]
[--cpu-profile "host|intel 80[86|286|386]"]
[--cpuid-portability-level <0..3>]
[--cpuid-set <leaf[:subleaf]> <eax> <ebx> <ecx> <edx>]
[--cpuid-remove <leaf[:subleaf]>]
[--cpuidremoveall]
[--hardwareuuid <uuid>]
[--cpus <number>]
[--cpuhotplug on|off]
[--plugcpu <id>]
[--unplugcpu <id>]
[--cpuexecutioncap <1-100>]
[--rtcuseutc on|off]
[--graphicscontroller none|vboxvga|vmsvga|vboxsvga]
[--monitorcount <number>]
[--accelerate3d on|off]
[--accelerate2dvideo on|off]
[--firmware bios|efi|efi32|efi64]
[--chipset ich9|piix3]
[--bioslogofadein on|off]
[--bioslogofadeout on|off]
[--bioslogodisplaytime <msec>]
[--bioslogoimagepath <imagepath>]
[--biosbootmenu disabled|menuonly|messageandmenu]
[--biosapic disabled|apic|x2apic]
[--biossystemtimeoffset <msec>]

131

8 vboxmanage

[--biospxedebug on|off]
[--system-uuid-le on|off]
[--boot<1-4> none|floppy|dvd|disk|net>]
[--nic<1-n> none|null|nat|bridged|intnet|hostonly|
generic|natnetwork]
[--nictype<1-n> am79c970a|am79c973|am79c960|
82540em|82543gc|82545em|
virtio]
[--cableconnected<1-n> on|off]
[--nictrace<1-n> on|off]
[--nictracefile<1-n> <filename>]
[--nicproperty<1-n> name=[value]]
[--nicspeed<1-n> <kbps>]
[--nicbootprio<1-n> <priority>]
[--nicpromisc<1-n> deny|allow-vms|allow-all]
[--nicbandwidthgroup<1-n> none|<name>]
[--bridgeadapter<1-n> none|<devicename>]
[--hostonlyadapter<1-n> none|<devicename>]
[--intnet<1-n> <network name>]
[--nat-network<1-n> <network name>]
[--nicgenericdrv<1-n> <driver>]
[--natnet<1-n> <network>|default]
[--natsettings<1-n> [<mtu>],[<socksnd>],
[<sockrcv>],[<tcpsnd>],
[<tcprcv>]]
[--natpf<1-n> [<rulename>],tcp|udp,[<hostip>],
<hostport>,[<guestip>],<guestport>]
[--natpf<1-n> delete <rulename>]
[--nattftpprefix<1-n> <prefix>]
[--nattftpfile<1-n> <file>]
[--nattftpserver<1-n> <ip>]
[--natbindip<1-n> <ip>]
[--natdnspassdomain<1-n> on|off]
[--natdnsproxy<1-n> on|off]
[--natdnshostresolver<1-n> on|off]
[--nataliasmode<1-n> default|[log],[proxyonly],
[sameports]]
[--macaddress<1-n> auto|<mac>]
[--mouse ps2|usb|usbtablet|usbmultitouch]
[--keyboard ps2|usb]
[--uart<1-n> off|<i/o base> <irq>]
[--uartmode<1-n> disconnected|
server <pipe>|
client <pipe>|
tcpserver <port>|
tcpclient <hostname:port>|
file <file>|
<devicename>]
[--uarttype<1-n> 16450|16550a|16750]
[--lpt<1-n> off|<i/o base> <irq>]
[--lptmode<1-n> <devicename>]
[--guestmemoryballoon <balloonsize in mb>]
[--vm-process-priority default|flat|low|normal|high]
[--audio none|null|dsound|oss|alsa|pulse|
oss|pulse|coreaudio]
[--audioin on|off]
[--audioout on|off]
[--audiocontroller ac97|hda|sb16]
[--audiocodec stac9700|ad1980|stac9221|sb16]
[--clipboard-mode disabled|hosttoguest|guesttohost|
bidirectional]
[--draganddrop disabled|hosttoguest|guesttohost|
bidirectional]
[--vrde on|off]
[--vrdeextpack default|<name>]
[--vrdeproperty <name=[value]>]
[--vrdeport <hostport>]

132

8 vboxmanage

[--vrdeaddress <hostip>]
[--vrdeauthtype null|external|guest]
[--vrdeauthlibrary default|<name>]
[--vrdemulticon on|off]
[--vrdereusecon on|off]
[--vrdevideochannel on|off]
[--vrdevideochannelquality <percent>]
[--usbohci on|off]
[--usbehci on|off]
[--usbxhci on|off]
[--usbrename <oldname> <newname>]
[--snapshotfolder default|<path>]
[--teleporter on|off]
[--teleporterport <port>]
[--teleporteraddress <address|empty>]
[--teleporterpassword <password>]
[--teleporterpasswordfile <file>|stdin]
[--tracing-enabled on|off]
[--tracing-config <config-string>]
[--tracing-allow-vm-access on|off]
[--usbcardreader on|off]
[--autostart-enabled on|off]
[--autostart-delay <seconds>]
[--recording on|off]
[--recordingscreens all|<screen id> [<screen id> ...]]
[--recordingfile <filename>]
[--recordingvideores <width> <height>]
[--recordingvideorate <rate>]
[--recordingvideofps <fps>]
[--recordingmaxtime <s>]
[--recordingmaxsize <mb>]
[--recordingopts <key=value> [,<key=value> ...]]
[--defaultfrontend default|<name>]

movevm <uuid|vmname>
--type basic
[--folder <path>]

import <ovfname/ovaname>
[--dry-run|-n]
[--options keepallmacs|keepnatmacs|importtovdi]
[--vmname <name>]
[--cloud]
[--cloudprofile <cloud profile name>]
[--cloudinstanceid <instance id>]
[--cloudbucket <bucket name>]
[more options]
(run with -n to have options displayed
for a particular ovf. it doesn’t work for the cloud import.)

export <machines> --output|-o <name>.<ovf/ova/tar.gz>
[--legacy09|--ovf09|--ovf10|--ovf20|--opc10]
[--manifest]
[--iso]
[--options manifest|iso|nomacs|nomacsbutnat]
[--vsys <number of virtual system>]
[--vmname <name>]
[--product <product name>]
[--producturl <product url>]
[--vendor <vendor name>]
[--vendorurl <vendor url>]
[--version <version info>]
[--description <description info>]
[--eula <license text>]
[--eulafile <filename>]
[--cloud <number of virtual system>]
[--vmname <name>]

133

8 vboxmanage

[--cloudprofile <cloud profile name>]
[--cloudbucket <bucket name>]
[--cloudkeepobject <true/false>]
[--cloudlaunchmode emulated|paravirtualized]
[--cloudlaunchinstance <true/false>]
[--clouddomain <domain>]
[--cloudshape <shape>]
[--clouddisksize <disk size in gb>]
[--cloudocivcn <oci vcn id>]
[--cloudocisubnet <oci subnet id>]
[--cloudpublicip <true/false>]
[--cloudprivateip <ip>]

startvm <uuid|vmname>...
[--type gui|sdl|headless|separate]
[-e|--putenv <name>[=<value>]]

controlvm
<uuid|vmname>
pause|resume|reset|poweroff|savestate|
acpipowerbutton|acpisleepbutton|
keyboardputscancode <hex> [<hex> ...]|
keyboardputstring <string1> [<string2> ...]|
keyboardputfile <filename>|
setlinkstate<1-n> on|off |
nic<1-n> null|nat|bridged|intnet|hostonly|generic|
natnetwork [<devicename>] |
nictrace<1-n> on|off |
nictracefile<1-n> <filename> |
nicproperty<1-n> name=[value] |
nicpromisc<1-n> deny|allow-vms|allow-all |
natpf<1-n> [<rulename>],tcp|udp,[<hostip>],
<hostport>,[<guestip>],<guestport> |
natpf<1-n> delete <rulename> |
guestmemoryballoon <balloonsize in mb> |
usbattach <uuid>|<address>
[--capturefile <filename>] |
usbdetach <uuid>|<address> |
audioin on|off |
audioout on|off |
clipboard mode disabled|hosttoguest|guesttohost|
bidirectional |
draganddrop disabled|hosttoguest|guesttohost|
bidirectional |
vrde on|off |
vrdeport <port> |
vrdeproperty <name=[value]> |
vrdevideochannelquality <percent> |
setvideomodehint <xres> <yres> <bpp>
[[<display>] [<enabled:yes|no> |
[<xorigin> <yorigin>]]] |
setscreenlayout <display> on|primary <xorigin> <yorigin> <xres> <yres> <bpp> | off
screenshotpng <file> [display] |
recording on|off |
recording screens all|none|<screen>,[<screen>...] |
recording filename <file> |
recording videores <width>x<height> |
recording videorate <rate> |
recording videofps <fps> |
recording maxtime <s> |
recording maxfilesize <mb> |
setcredentials <username>
--passwordfile <file> | <password>
<domain>
[--allowlocallogon <yes|no>] |
teleport --host <name> --port <port>
[--maxdowntime <msec>]
[--passwordfile <file> |

134

8 vboxmanage

--password <password>] |
plugcpu <id> |
unplugcpu <id> |
cpuexecutioncap <1-100>
webcam <attach [path [settings]]> | <detach [path]> | <list>
addencpassword <id>
<password file>|-
[--removeonsuspend <yes|no>]
removeencpassword <id>
removeallencpasswords
changeuartmode<1-n> disconnected|
server <pipe>|
client <pipe>|
tcpserver <port>|
tcpclient <hostname:port>|
file <file>|
<devicename>
vm-process-priority default|flat|low|normal|high

discardstate <uuid|vmname>

adoptstate <uuid|vmname> <state _ file>

closemedium
[disk|dvd|floppy] <uuid|filename>
[--delete]

storageattach
<uuid|vmname>
--storagectl <name>
[--port <number>]
[--device <number>]
[--type dvddrive|hdd|fdd]
[--medium none|emptydrive|additions|
<uuid|filename>|host:<drive>|iscsi]
[--mtype normal|writethrough|immutable|shareable|
readonly|multiattach]
[--comment <text>]
[--setuuid <uuid>]
[--setparentuuid <uuid>]
[--passthrough on|off]
[--tempeject on|off]
[--nonrotational on|off]
[--discard on|off]
[--hotpluggable on|off]
[--bandwidthgroup <name>]
[--forceunmount]
[--server <name>|<ip>]
[--target <target>]
[--tport <port>]
[--lun <lun>]
[--encodedlun <lun>]
[--username <username>]
[--password <password>]
[--passwordfile <file>]
[--initiator <initiator>]
[--intnet]

storagectl
<uuid|vmname>
--name <name>
[--add ide|sata|scsi|floppy|sas|usb|pcie|virtio]
[--controller lsilogic|lsilogicsas|buslogic|
intelahci|piix3|piix4|ich6|i82078|
[ usb|nvme|virtio]
[--portcount <1-n>]
[--hostiocache on|off]
[--bootable on|off]
[--rename <name>]
[--remove]

135

8 vboxmanage

bandwidthctl
<uuid|vmname>
add <name> --type disk|network
--limit <megabytes per second>[k|m|g|k|m|g] |
set <name>
--limit <megabytes per second>[k|m|g|k|m|g] |
remove <name> |
list [--machinereadable]
(limit units: k=kilobit, m=megabit, g=gigabit,
k=kilobyte, m=megabyte, g=gigabyte)

showmediuminfo [disk|dvd|floppy] <uuid|filename>

createmedium
[disk|dvd|floppy] --filename <filename>
[--size <megabytes>|--sizebyte <bytes>]
[--diffparent <uuid>|<filename>]
[--format vdi|vmdk|vhd] (default: vdi)]
[--variant standard,fixed,split2g,stream,esx,
formatted]
[[--property <name>=<value>] --property <name>=<value]...

modifymedium [disk|dvd|floppy] <uuid|filename>
[--type normal|writethrough|immutable|shareable|
readonly|multiattach]
[--autoreset on|off]
[--property <name=[value]>]
[--compact]
[--resize <megabytes>|--resizebyte <bytes>]
[--move <path>]
[--setlocation <path>]
[--description <description string>]
clonemedium [disk|dvd|floppy] <uuid|inputfile> <uuid|outputfile>
[--format vdi|vmdk|vhd|raw|<other>]
[--variant standard,fixed,split2g,stream,esx]
[--existing]

mediumproperty
[disk|dvd|floppy] set <uuid|filename>
<property> <value>

[disk|dvd|floppy] get <uuid|filename>
<property>

[disk|dvd|floppy] delete <uuid|filename>
<property>

encryptmedium
<uuid|filename>
[--newpassword <file>|-]
[--oldpassword <file>|-]
[--cipher <cipher identifier>]
[--newpasswordid <password identifier>]

checkmediumpwd
<uuid|filename>
<pwd file>|-

convertfromraw <filename> <outputfile>
[--format vdi|vmdk|vhd]
[--variant standard,fixed,split2g,stream,esx]
[--uuid <uuid>]
convertfromraw stdin <outputfile> <bytes>
[--format vdi|vmdk|vhd]
[--variant standard,fixed,split2g,stream,esx]
[--uuid <uuid>]

getextradata
global|<uuid|vmname>
<key>|[enumerate]

setextradata global|<uuid|vmname>

136

8 vboxmanage

<key>
[<value>] (no value deletes key)

setproperty
machinefolder default|<folder> |
hwvirtexclusive on|off |
vrdeauthlibrary default|<library> |
websrvauthlibrary default|null|<library> |
vrdeextpack null|<library> |
autostartdbpath null|<folder> |
loghistorycount <value>
defaultfrontend default|<name>
logginglevel <log setting>
proxymode system|noproxy|manual
proxyurl <url>

usbfilter
add <index,0-n>
--target <uuid|vmname>|global
--name <string>
--action ignore|hold (global filters only)
[--active yes|no] (yes)
[--vendorid <xxxx>] (null)
[--productid <xxxx>] (null)
[--revision <iiff>] (null)
[--manufacturer <string>] (null)
[--product <string>] (null)
[--remote yes|no] (null, vm filters only)
[--serialnumber <string>] (null)
[--maskedinterfaces <xxxxxxxx>]

usbfilter
modify <index,0-n>
--target <uuid|vmname>|global
[--name <string>]
[--action ignore|hold] (global filters only)
[--active yes|no]
[--vendorid <xxxx>|""]
[--productid <xxxx>|""]
[--revision <iiff>|""]
[--manufacturer <string>|""]
[--product <string>|""]
[--remote yes|no] (null, vm filters only)
[--serialnumber <string>|""]
[--maskedinterfaces <xxxxxxxx>]

usbfilter
remove <index,0-n>
--target <uuid|vmname>|global

guestproperty
get <uuid|vmname>
<property> [--verbose]

guestproperty
set <uuid|vmname>
<property> [<value> [--flags <flags>]]

guestproperty
delete|unset <uuid|vmname>
<property>

guestproperty
enumerate <uuid|vmname>
[--patterns <patterns>]

guestproperty
wait <uuid|vmname> <patterns>
[--timeout <msec>] [--fail-on-timeout]

guestcontrol
<uuid|vmname> [--verbose|-v] [--quiet|-q]
[--username <name>] [--domain <domain>]
[--passwordfile <file> | --password <password>]

run [common-options]
[--exe <path to executable>] [--timeout <msec>]

137

8 vboxmanage

[-e|--putenv <name>[=<value>]] [--unquoted-args]
[--ignore-operhaned-processes] [--profile]
[--no-wait-stdout|--wait-stdout]
[--no-wait-stderr|--wait-stderr]
[--dos2unix] [--unix2dos]
-- <program/arg0> [argument1] ... [argumentn]]

start [common-options]
[--exe <path to executable>] [--timeout <msec>]
[-e|--putenv <name>[=<value>]] [--unquoted-args]
[--ignore-operhaned-processes] [--profile]
-- <program/arg0> [argument1] ... [argumentn]]

copyfrom [common-options]
[--follow] [-r|--recursive]
<guest-src0> [guest-src1 [...]] <host-dst>

copyfrom [common-options]
[--follow] [-r|--recursive]
[--target-directory <host-dst-dir>]
<guest-src0> [guest-src1 [...]]

copyto [common-options]
[--follow] [-r|--recursive]
<host-src0> [host-src1 [...]] <guest-dst>

copyto [common-options]
[--follow] [-r|--recursive]
[--target-directory <guest-dst>]
<host-src0> [host-src1 [...]]

mkdir|createdir[ectory] [common-options]
[--parents] [--mode <mode>]
<guest directory> [...]

rmdir|removedir[ectory] [common-options]
[-r|--recursive]
<guest directory> [...]

removefile|rm [common-options] [-f|--force]
<guest file> [...]

mv|move|ren[ame] [common-options]
<source> [source1 [...]] <dest>

mktemp|createtemp[orary] [common-options]
[--secure] [--mode <mode>] [--tmpdir <directory>]
<template>

stat [common-options]
<file> [...]

guestcontrol <uuid|vmname> [--verbose|-v] [--quiet|-q]

list <all|sessions|processes|files> [common-opts]

closeprocess [common-options]
< --session-id <id>
| --session-name <name or pattern>
<pid1> [pid1 [...]]

closesession [common-options]
< --all | --session-id <id>
| --session-name <name or pattern> >

updatega|updateguestadditions|updateadditions
[--source <guest additions .iso>]

138

8 vboxmanage

[--wait-start] [common-options]
[-- [<argument1>] ... [<argumentn>]]

watch [common-options]

metrics list [ * |host|<vmname> [<metric _ list>]]
(comma-separated)

metrics setup
[--period <seconds>] (default: 1)
[--samples <count>] (default: 1)
[--list]
[ * |host|<vmname> [<metric _ list>]]
metrics query [ * |host|<vmname> [<metric _ list>]]

metrics enable
[--list]
[ * |host|<vmname> [<metric _ list>]]

metrics disable
[--list]
[ * |host|<vmname> [<metric _ list>]]

metrics collect
[--period <seconds>] (default: 1)
[--samples <count>] (default: 1)
[--list]
[--detach]
[ * |host|<vmname> [<metric _ list>]]

natnetwork
add --netname <name>
--network <network>
[--enable|--disable]
[--dhcp on|off]
[--port-forward-4 <rule>]
[--loopback-4 <rule>]
[--ipv6 on|off]
[--port-forward-6 <rule>]
[--loopback-6 <rule>]

natnetwork remove --netname <name>

natnetwork
modify --netname <name>
[--network <network>]
[--enable|--disable]
[--dhcp on|off]
[--port-forward-4 <rule>]
[--loopback-4 <rule>]
[--ipv6 on|off]
[--port-forward-6 <rule>]
[--loopback-6 <rule>]

natnetwork start --netname <name>

natnetwork stop --netname <name>

natnetwork list [<pattern>]

hostonlyif
ipconfig <name>
[--dhcp |
--ip<ipv4> [--netmask<ipv4> (def: 255.255.255.0)] |
--ipv6<ipv6> [--netmasklengthv6<length> (def: 64)]]
create |
remove <name>

usbdevsource add <source name>

139

8 vboxmanage

--backend <backend>
--address <address>
usbdevsource remove <source name>

vboxmanage snapshot <uuid|vmname>
vboxmanage snapshot <uuid|vmname> take <snapshot-name> [--description=description] [--live]
[--uniquename number,timestamp,space,force]
vboxmanage snapshot <uuid|vmname> delete <snapshot-name>
vboxmanage snapshot <uuid|vmname> restore <snapshot-name>
vboxmanage snapshot <uuid|vmname> restorecurrent
vboxmanage snapshot <uuid|vmname> edit <snapshot-name | --current> [--description=description]
[--name=new-name]
vboxmanage snapshot <uuid|vmname> list [--details | --machinereadable]
vboxmanage snapshot <uuid|vmname> showvminfo <snapshot-name>

vboxmanage clonevm <vmname|uuid> [--basefolder=basefolder] [--groups=group,...]
[--mode=machine | --mode=machinechildren | --mode=all] [--name=name] [--options=option,...]
[--register] [--snapshot=snapshot-name] [--uuid=uuid]

vboxmanage mediumio <--disk=uuid|filename | --dvd=uuid|filename | --floppy=uuid|filename>
[--password-file=-|filename] formatfat [--quick]
vboxmanage mediumio <--disk=uuid|filename | --dvd=uuid|filename | --floppy=uuid|filename>
[--password-file=-|filename] cat [--hex] [--offset=byte-offset] [--size=bytes]
[--output=-|filename]
vboxmanage mediumio <--disk=uuid|filename | --dvd=uuid|filename | --floppy=uuid|filename>
[--password-file=-|filename] stream [--format=image-format] [--variant=image-variant]
[--output=-|filename]

vboxmanage sharedfolder add <uuid | vmname> <--name=name> <--hostpath=hostpath> [--readonly]
[--transient] [--automount] [--auto-mount-point=path]
vboxmanage sharedfolder remove <uuid | vmname> <--name=name> [--transient]

vboxmanage dhcpserver add <--network=netname | --interface=ifname> <--server-ip=address>
<--netmask=mask> <--lower-ip=address> <--upper-ip=address> <--enable | --disable>
[[--global] [--set-opt=dhcp-opt-no value...] [--set-opt-hex=dhcp-opt-no hexstring...]
[--force-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...] [--min-lease-time=seconds]
[--default-lease-time=seconds] [--max-lease-time=seconds] ...]
[<--group=name> [--set-opt=dhcp-opt-no value...] [--set-opt-hex=dhcp-opt-no hexstring...]
[--force-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...] [--incl-mac=address...]
[--excl-mac=address...] [--incl-mac-wild=pattern...] [--excl-mac-wild=pattern...]
[--incl-vendor=string...] [--excl-vendor=string...] [--incl-vendor-wild=pattern...]
[--excl-vendor-wild=pattern...] [--incl-user=string...] [--excl-user=string...]
[--incl-user-wild=pattern...] [--excl-user-wild=pattern...] [--min-lease-time=seconds]
[--default-lease-time=seconds] [--max-lease-time=seconds] ...]
[<--vm=name|uuid> [--nic=1-n] [--set-opt=dhcp-opt-no value...] [--set-opt-hex=dhcp-opt-no
hexstring...] [--force-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...]
[--min-lease-time=seconds] [--default-lease-time=seconds] [--max-lease-time=seconds]
[--fixed-address=address] ...]
[<--mac-address=address> [--set-opt=dhcp-opt-no value...] [--set-opt-hex=dhcp-opt-no
hexstring...] [--force-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...]
[--min-lease-time=seconds] [--default-lease-time=seconds] [--max-lease-time=seconds]
[--fixed-address=address] ...]
vboxmanage dhcpserver modify <--network=netname | --interface=ifname> [--server-ip=address]
[--lower-ip=address] [--upper-ip=address] [--netmask=mask] [--enable | --disable]
[[--global] [--del-opt=dhcp-opt-no...] [--set-opt=dhcp-opt-no value...]
[--set-opt-hex=dhcp-opt-no hexstring...] [--force-opt=dhcp-opt-no...]
[--unforce-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...]
[--unsupress-opt=dhcp-opt-no...] [--min-lease-time=seconds] [--default-lease-time=seconds]
[--max-lease-time=seconds] [--remove-config] ...]
[<--group=name> [--set-opt=dhcp-opt-no value...] [--set-opt-hex=dhcp-opt-no
hexstring...] [--force-opt=dhcp-opt-no...] [--unforce-opt=dhcp-opt-no...]
[--supress-opt=dhcp-opt-no...] [--unsupress-opt=dhcp-opt-no...] [--del-mac=address...]
[--incl-mac=address...] [--excl-mac=address...] [--del-mac-wild=pattern...]
[--incl-mac-wild=pattern...] [--excl-mac-wild=pattern...] [--del-vendor=string...]
[--incl-vendor=string...] [--excl-vendor=string...] [--del-vendor-wild=pattern...]

140

8 vboxmanage

[--incl-vendor-wild=pattern...] [--excl-vendor-wild=pattern...] [--del-user=string...]
[--incl-user=string...] [--excl-user=string...] [--del-user-wild=pattern...]
[--incl-user-wild=pattern...] [--excl-user-wild=pattern...] [--zap-conditions]
[--min-lease-time=seconds] [--default-lease-time=seconds] [--max-lease-time=seconds]
[--remove-config] ...]
[<--vm=name|uuid> [--nic=1-n] [--del-opt=dhcp-opt-no...] [--set-opt=dhcp-opt-no
value...] [--set-opt-hex=dhcp-opt-no hexstring...] [--force-opt=dhcp-opt-no...]
[--unforce-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...]
[--unsupress-opt=dhcp-opt-no...] [--min-lease-time=seconds] [--default-lease-time=seconds]
[--max-lease-time=seconds] [--fixed-address=address] [--remove-config] ...]
[<--mac-address=address> [--del-opt=dhcp-opt-no...] [--set-opt=dhcp-opt-no
value...] [--set-opt-hex=dhcp-opt-no hexstring...] [--force-opt=dhcp-opt-no...]
[--unforce-opt=dhcp-opt-no...] [--supress-opt=dhcp-opt-no...]
[--unsupress-opt=dhcp-opt-no...] [--min-lease-time=seconds] [--default-lease-time=seconds]
[--max-lease-time=seconds] [--fixed-address=address] [--remove-config] ...]
vboxmanage dhcpserver remove <--network=netname | --interface=ifname>
vboxmanage dhcpserver restart <--network=netname | --interface=ifname>
vboxmanage dhcpserver findlease <--network=netname | --interface=ifname> <--mac-address=mac>

vboxmanage debugvm <uuid|vmname> dumpvmcore [--filename=name]
vboxmanage debugvm <uuid|vmname> info <item> [args...]
vboxmanage debugvm <uuid|vmname> injectnmi
vboxmanage debugvm <uuid|vmname> log [--release | --debug] [group-settings...]
vboxmanage debugvm <uuid|vmname> logdest [--release | --debug] [destinations...]
vboxmanage debugvm <uuid|vmname> logflags [--release | --debug] [flags...]
vboxmanage debugvm <uuid|vmname> osdetect
vboxmanage debugvm <uuid|vmname> osinfo
vboxmanage debugvm <uuid|vmname> osdmesg [--lines=lines]
vboxmanage debugvm <uuid|vmname> getregisters [--cpu=id] [reg-set.reg-name...]
vboxmanage debugvm <uuid|vmname> setregisters [--cpu=id] [reg-set.reg-name=value...]
vboxmanage debugvm <uuid|vmname> show [--human-readable | --sh-export | --sh-eval | --cmd-set]
[settings-item...]
vboxmanage debugvm <uuid|vmname> stack [--cpu=id]
vboxmanage debugvm <uuid|vmname> statistics [--reset] [--descriptions] [--pattern=pattern]

vboxmanage extpack install [--replace] [--accept-license=sha256] <tarball>
vboxmanage extpack uninstall [--force] <name>
vboxmanage extpack cleanup

vboxmanage unattended detect <--iso=install-iso> [--machine-readable]
vboxmanage unattended install <uuid|vmname> <--iso=install-iso> [--user=login]
[--password=password] [--password-file=file] [--full-user-name=name] [--key=product-key]
[--install-additions] [--no-install-additions] [--additions-iso=add-iso] [--install-txs]
[--no-install-txs] [--validation-kit-iso=testing-iso] [--locale=ll _ cc] [--country=cc]
[--time-zone=tz] [--hostname=fqdn] [--package-selection-adjustment=keyword] [--dry-run]
[--auxiliary-base-path=path] [--image-index=number] [--script-template=file]
[--post-install-template=file] [--post-install-command=command] [--extra-install-kernel-parameters=params]
[--language=lang] [--start-vm=session-type]

vboxmanage cloud <--provider=name> <--profile=name> list instances [--state=string]
[--compartment-id=string]
vboxmanage cloud <--provider=name> <--profile=name> list images <--compartment-id=string>
[--state=string]
vboxmanage cloud <--provider=name> <--profile=name> instance create <--domain-name=name>
<--image-id=id | --boot-volume-id=id> <--display-name=name> <--shape=type> <--subnet=id>
[--boot-disk-size=size in gb] [--publicip=true/false] [--privateip=ip address]
[--public-ssh-key=key string...] [--launch-mode=native/emulated/paravirtualized]
vboxmanage cloud <--provider=name> <--profile=name> instance info <--id=unique id>
vboxmanage cloud <--provider=name> <--profile=name> instance terminate <--id=unique id>
vboxmanage cloud <--provider=name> <--profile=name> instance start <--id=unique id>
vboxmanage cloud <--provider=name> <--profile=name> instance pause <--id=unique id>
vboxmanage cloud <--provider=name> <--profile=name> image create <--display-name=name>
[--bucket-name=name] [--object-name=name] [--instance-id=unique id]
vboxmanage cloud <--provider=name> <--profile=name> image info <--id=unique id>

141

8 vboxmanage

vboxmanage cloud <--provider=name> <--profile=name> image delete <--id=unique id>
vboxmanage cloud <--provider=name> <--profile=name> image import <--id=unique id>
[--bucket-name=name] [--object-name=name]
vboxmanage cloud <--provider=name> <--profile=name> image export <--id=unique id>
<--display-name=name> [--bucket-name=name] [--object-name=name]
vboxmanage cloud <--provider=name> <--profile=name> network setup <--local-gateway-iso=path>
[--gateway-os-name=string] [--gateway-os-version=string] [--gateway-shape=string]
[--tunnel-network-name=string] [--tunnel-network-range=string]
[--guest-additions-iso=path] [--proxy=string]
vboxmanage cloud <--provider=name> <--profile=name> network create <--name=string>
<--network-id=string> [--enable | --disable]
vboxmanage cloud network update <--name=string> [--network-id=string] [--enable | --disable]
vboxmanage cloud network delete <--name=string>
vboxmanage cloud network info <--name=string>

vboxmanage cloudprofile <--provider=name> <--profile=name> add [--clouduser=unique id]
[--fingerprint=md5 string] [--keyfile=path] [--passphrase=string] [--tenancy=unique id]
[--compartment=unique id] [--region=string]
vboxmanage cloudprofile <--provider=name> <--profile=name> update [--clouduser=unique id]
[--fingerprint=md5 string] [--keyfile=path] [--passphrase=string] [--tenancy=unique id]
[--compartment=unique id] [--region=string]
vboxmanage cloudprofile <--provider=name> <--profile=name> delete
vboxmanage cloudprofile <--provider=name> <--profile=name> show

each time vboxmanage is invoked, only one command can be executed. however, a command
might support several subcommands which then can be invoked in one single call. the following
sections provide detailed reference information on the different commands.

8.3 general options

• -v|--version : show the version of this tool and exit.
• --nologo : suppress the output of the logo information. this option is useful for scripts.
• --settingspw : speciﬁy a settings password.
• --settingspwfile : specify a ﬁle containing the settings password.

the settings password is used for certain settings which need to be stored in encrypted form
for security reasons. at the moment, the only encrypted setting is the iscsi initiator secret, see
chapter 8.17, vboxmanage storageattach, page 170. as long as no settings password is speciﬁed,
this information is stored in plain text. after using the --settingspw|--settingspwfile option
once, it must be always used. otherwise, the encrypted setting cannot be unencrypted.

8.4 vboxmanage list

the list command gives relevant information about your system and information about oracle
vm virtualbox’s current settings.
the following subcommands are available with vboxmanage list :

• vms : lists all virtual machines currently registered with oracle vm virtualbox. by default
this displays a compact list with each vm’s name and uuid. if you also specify --long or
-l , this will be a detailed list as with the showvminfo command, see chapter 8.5, vbox-
manage showvminfo, page 144.
• runningvms : lists all currently running virtual machines by their unique identiﬁers
(uuids) in the same format as with vms .

142

8 vboxmanage

• ostypes : lists all guest operating systems presently known to oracle vm virtualbox, along
with the identiﬁers used to refer to them with the modifyvm command.
• hostdvds , hostfloppies : lists the dvd, ﬂoppy, bridged networking, and host-only net-
working interfaces on the host, along with the name used to access them from within
oracle vm virtualbox.
• intnets : displays information about the internal networks.
• bridgedifs , hostonlyifs , natnets , dhcpservers : lists the bridged network interfaces,
host-only network interfaces, nat network interfaces, and dhcp servers currently avail-
able on the host. see chapter 6, virtual networking, page 104.
• hostinfo : displays information about the host system, such as cpus, memory size, and
operating system version.
• hostcpuids : lists the cpuid parameters for the host cpus. this can be used for a more
ﬁne grained analyis of the host’s virtualization capabilities.
• hddbackends : lists all known virtual disk back-ends of oracle vm virtualbox. for each
such format, such as vdi, vmdk, or raw, this subcommand lists the back-end’s capabilities
and conﬁguration.
• hdds , dvds , floppies : shows information about virtual disk images currently in use by
oracle vm virtualbox, including all their settings, the unique identiﬁers (uuids) associ-
ated with them by oracle vm virtualbox and all ﬁles associated with them. this is the
command-line equivalent of the virtual media manager. see chapter 5.3, the virtual media
manager, page 92.
• usbhost : shows information about usb devices attached to the host, including informa-
tion useful for constructing usb ﬁlters and whether they are currently in use by the host.
• usbfilters : lists all global usb ﬁlters registered with oracle vm virtualbox and displays
the ﬁlter parameters. global usb ﬁlters are for devices which are accessible to all virtual
machines.
• systemproperties : displays some global oracle vm virtualbox settings, such as mini-
mum and maximum guest ram and virtual hard disk size, folder settings and the current
authentication library in use.
• extpacks : displays all oracle vm virtualbox extension packs that are currently installed.
see chapter 1.5, installing oracle vm virtualbox and extension packs, page 6 and chapter
8.41, vboxmanage extpack, page 212.
• groups : displays details of the vm groups. see chapter 1.9, using vm groups, page 15.
• webcams : displays a list of webcams attached to the running vm. the output format is a
list of absolute paths or aliases that were used for attaching the webcams to the vm using
the webcam attach command.
• screenshotformats : displays a list of available screenshot formats.
• cloudproviders : displays a list of cloud providers that are supported by oracle vm
virtualbox. oracle cloud infrastructure is an example of a cloud provider.
• cloudprofiles : displays a list of cloud proﬁles that have been conﬁgured.
cloud proﬁles are used when exporting vms to a cloud service. see chapter 1.14.5, export-
ing an appliance to oracle cloud infrastructure, page 24.

143

8 vboxmanage

8.5 vboxmanage showvminfo

the showvminfo command shows information about a particular virtual machine. this is the
same information as vboxmanage list vms --long would show for all virtual machines.
you will see information as shown in the following example.

$ vboxmanage showvminfo "windows xp"
virtualbox command line management interface version <version-number>
(c) 2005-2018 oracle corporation
all rights reserved.

name: windows xp
guest os: other/unknown
uuid: 1bf3464d-57c6-4d49-92a9-a5cc3816b7e7
config file: /home/username/.config/virtualbox/machines/windows xp/windows xp.xml
memory size: 512mb
vram size: 12mb
number of cpus: 2
boot menu mode: message and menu
boot device (1): dvd
boot device (2): harddisk
boot device (3): not assigned
boot device (4): not assigned
acpi: on
ioapic: on
...

use the --machinereadable option to produce the same output, but in machine readable
format with a property=value string on each line. for example:

...
groups="/"
ostype="oracle (64-bit)"
uuid="457af700-bc0a-4258-aa3c-13b03da171f2"
...

8.6 vboxmanage registervm/unregistervm

the registervm command enables you to import a virtual machine deﬁnition in an xml ﬁle
into oracle vm virtualbox. the machine must not conﬂict with one already registered in oracle
vm virtualbox and it may not have any hard or removable disks attached. it is advisable to place
the deﬁnition ﬁle in the machines folder before registering it.

note: when creating a new virtual machine with vboxmanage createvm , as shown in
chapter 8.7, vboxmanage createvm, page 145, you can directly specify the --register
option to avoid having to register it separately.

the unregistervm command unregisters a virtual machine. if --delete is also speciﬁed, the
following ﬁles will also be deleted automatically:
• all hard disk image ﬁles, including differencing ﬁles, which are used by the machine and
not shared with other machines.
• saved state ﬁles that the machine created. one if the machine was in saved state and one
for each online snapshot.
• the machine xml ﬁle and its backups.

144

8 vboxmanage

• the machine log ﬁles.
• the machine directory, if it is empty after having deleted all of the above ﬁles.

8.7 vboxmanage createvm

the vboxmanage createvm command creates a new xml virtual machine deﬁnition ﬁle.
you must specify the name of the vm by using --name <name> . this name is used by default
as the ﬁle name of the settings ﬁle that has the .xml extension and the machine folder, which
is a subfolder of the .config/virtualbox/machines folder. note that the machine folder path
name varies based on the os type and the oracle vm virtualbox version.
ensure that the vm name conforms to the host os’s ﬁle name requirements. if you later
rename the vm, the ﬁle and folder names will be updated to match the new name automatically.
the --basefolder <path> option speciﬁes the machine folder path name. note that the
names of the ﬁle and the folder do not change if you rename the vm.
the --group <group-id>, ... option assigns the vm to the speciﬁed groups. note that
group ids always start with / so that they can be nested. by default, each vm is assigned
membership to the / group.
the --ostype <ostype> option speciﬁes the guest os to run in the vm. run the
vboxmanage list ostypes command to see the available os types.
the --uuid <uuid> option speciﬁes the universal unique identiﬁer (uuid) of the vm. the
uuid must be unique within the namespace of the host or of its vm group memberships. by
default, the vboxmanage command automatically generates the uuid.
the --default option applies a default hardware conﬁguration for the speciﬁed guest os. by
default, the vm is created with minimal hardware.
the --register option registers the vm with your oracle vm virtualbox installation. by
default, the vboxmanage createvm command creates only the xml conﬁguration for the vm
but does not registered the vm. if you do not register the vm at creation, you can run the
vboxmanage registervm command after you create the vm.

8.8 vboxmanage modifyvm

this command changes the properties of a registered virtual machine which is not running.
most of the properties that this command makes available correspond to the vm settings that
oracle vm virtualbox graphical user interface displays in each vm’s settings dialog. these
are described in chapter 3, conﬁguring virtual machines, page 45. however, some of the more
advanced settings are only available through the vboxmanage interface.
these commands require that the machine is powered off, neither running nor in a saved
state. some machine settings can also be changed while a machine is running. those settings
will then have a corresponding subcommand with the vboxmanage controlvm subcommand.
see chapter 8.13, vboxmanage controlvm, page 163.

8.8.1 general settings
the following general settings are available through vboxmanage
modifyvm :

• --name <name> : changes the vm’s name and can be used to rename the internal virtual
machine ﬁles, as described in chapter 8.7, vboxmanage createvm, page 145.
• --groups <group>, ... : changes the group membership of a vm. groups always start
with a / and can be nested. by default vms are in group / .

145

8 vboxmanage

• --description <desc> : changes the vm’s description, which is a way to record details
about the vm in a way which is meaningful for the user. the gui interprets html format-
ting, the command line allows arbitrary strings potentially containing multiple lines.
• --ostype <ostype> : speciﬁes what guest operating system is supposed to run
in the vm. to learn about the various identiﬁers that can be used here, use
vboxmanage list ostypes .
• --iconfile <filename> : speciﬁes the absolute path on the host ﬁle system for the oracle
vm virtualbox icon to be displayed in the vm.
• --memory <memorysize> : sets the amount of ram, in mb, that the virtual machine
should allocate for itself from the host. see chapter 1.7, creating your first virtual ma-
chine, page 8.
• --pagefusion on|off : enables and disables the page fusion feature. page fusion is
disabled by default. the page fusion feature minimises memory duplication between vms
with similar conﬁgurations running on the same host. see chapter 4.10.2, page fusion,
page 86.
• --vram <vramsize> : sets the amount of ram that the virtual graphics card should have.
see chapter 3.6, display settings, page 54.
• --acpi on|off and --ioapic on|off : determines whether the vm has acpi and i/o
apic support. see chapter 3.5.1, motherboard tab, page 52.
• --pciattach <host pci address [@ guest pci bus address]> : attaches a speci-
ﬁed pci network controller on the host to a speciﬁed pci bus on the guest.
• --pcidetach <host pci address> : detaches a speciﬁed pci network controller on the
host from the attached pci bus on the guest.
• --hardwareuuid <uuid> : the uuid presented to the guest through memory tables
(dmi/smbios), hardware, and guest properties. by default this is the same as the vm
uuid. this setting is useful when cloning a vm. teleporting takes care of this automati-
cally.
• --cpus <cpucount> : sets the number of virtual cpus for the virtual machine, see chapter
3.5.2, processor tab, page 53. if cpu hot-plugging is enabled, this then sets the maximum
number of virtual cpus that can be plugged into the virtual machines.
• --cpuhotplug on|off : enables cpu hot-plugging. when enabled, virtual cpus can be
added to and removed from a virtual machine while it is running. see chapter 9.4, cpu
hot-plugging, page 248.
• --plugcpu|unplugcpu <id> : if cpu hot-plugging is enabled, this setting adds or removes
a virtual cpu on the virtual machine. <id> speciﬁes the index of the virtual cpu to be
added or removed and must be a number from 0 to the maximum number of cpus conﬁg-
ured with the --cpus option. cpu 0 can never be removed.
• --cpuexecutioncap <1-100> : controls how much cpu time a virtual cpu can use. a
value of 50 implies a single virtual cpu can use up to 50% of a single host cpu.
• --pae on|off : enables and disables pae. see chapter 3.5.2, processor tab, page 53.
• --longmode on|off : enables and disables long mode. see chapter 3.5.2, processor tab,
page 53.

146

8 vboxmanage

• --spec-ctrl on|off : enables and disables the exposure of speculation control interfaces
to the guest, provided they are available on the host. depending on the host cpu and
workload, enabling speculation control may signiﬁcantly reduce performance.
• --cpu-profile <host|intel 80[86|286|386]> : enables speciﬁcation of a proﬁle for
guest cpu emulation. specify either one based on the host system cpu (host), or one from
a number of older intel micro-architectures: 8086, 80286, 80386.
• --hpet on|off : enables and disables a high precision event timer (hpet) which can
replace the legacy system timers. this is turned off by default. note that windows supports
a hpet only from vista onwards.
• --hwvirtex on|off : enables and disables the use of hardware virtualization extensions,
such as intel vt-x or amd-v, in the processor of your host system. see chapter 10.3,
hardware virtualization, page 307.
• --triplefaultreset on|off : enables resetting of the guest instead of triggering a guru
meditation. some guests raise a triple fault to reset the cpu so sometimes this is desired
behavior. works only for non-smp guests.
• --apic on|off : enables and disables i/o apic. with i/o apic, operating systems can use
more than 16 interrupt requests (irqs) thus avoiding irq sharing for improved reliability.
this setting is enabled by default. see chapter 3.5.1, motherboard tab, page 52.
• --x2apic on|off : enables and disables cpu x2apic support. cpu x2apic support helps
operating systems run more efﬁciently on high core count conﬁgurations, and optimizes in-
terrupt distribution in virtualized environments. this setting is enabled by default. disable
this setting when using host or guest operating systems that are incompatible with x2apic
support.
• --paravirtprovider none|default|legacy|minimal|hyperv|kvm : speciﬁes which
paravirtualization interface to provide to the guest operating system. specifying none ex-
plicitly turns off exposing any paravirtualization interface. the option default selects an
appropriate interface when starting the vm, depending on the guest os type. this is the
default option chosen when creating new vms. the legacy option is used for vms which
were created with older oracle vm virtualbox versions and will pick a paravirtualization
interface when starting the vm with oracle vm virtualbox 5.0 and newer. the minimal
provider is mandatory for mac os x guests. kvm and hyperv are recommended for linux
and windows guests respectively. these options are explained in chapter 10.5, paravirtu-
alization providers, page 308.
• --paravirtdebug <keyword=value> [,<keyword=value> ...] : speciﬁes debugging
options speciﬁc to the paravirtualization provider conﬁgured for this vm. see the provider
speciﬁc options in chapter 9.29, paravirtualized debugging, page 290 for a list of supported
keyword-value pairs for each provider.
• --nestedpaging on|off : if hardware virtualization is enabled, this additional setting
enables or disables the use of the nested paging feature in the processor of your host
system. see chapter 10.3, hardware virtualization, page 307 and chapter 13.4.1, cve-
2018-3646, page 330.
• --largepages on|off : if hardware virtualization and nested paging are enabled, for intel
vt-x only, an additional performance improvement of up to 5% can be obtained by enabling
this setting. this causes the hypervisor to use large pages to reduce tlb use and overhead.
• --vtxvpid on|off : if hardware virtualization is enabled, for intel vt-x only, this addi-
tional setting enables or disables the use of the tagged tlb (vpid) feature in the processor
of your host system. see chapter 10.3, hardware virtualization, page 307.

147

8 vboxmanage

• --vtxux on|off : if hardware virtualization is enabled, for intel vt-x only, this setting
enables or disables the use of the unrestricted guest mode feature for executing your guest.
• --nested-hw-virt on|off : if hardware virtualization is enabled, this setting enables or
disables passthrough of hardware virtualization features to the guest. see chapter 9.33,
nested virtualization, page 296.
• --accelerate3d on|off : if the guest additions are installed, this setting enables or dis-
ables hardware 3d acceleration. see chapter 4.5.1, hardware 3d acceleration (opengl and
direct3d 8/9), page 79.
• --accelerate2dvideo on|off : if the guest additions are installed, this setting enables
or disables 2d video acceleration. see chapter 4.5.2, hardware 2d video acceleration for
windows guests, page 80.
• --chipset piix3|ich9 : by default, oracle vm virtualbox emulates an intel piix3
chipset. usually there is no reason to change the default setting unless this is required
to relax some of its constraints. see chapter 3.5.1, motherboard tab, page 52.
• you can inﬂuence the bios logo that is displayed when a virtual machine starts up with a
number of settings. by default, an oracle vm virtualbox logo is displayed.
with --bioslogofadein on|off and --bioslogofadeout on|off , you can determine
whether the logo should fade in and out, respectively.
with --bioslogodisplaytime <msec> you can set how long the logo should be visible,
in milliseconds.
with --bioslogoimagepath <imagepath> you can replace the image that is shown with
your own logo. the image must be an uncompressed 256 color bmp ﬁle without color
space information (windows 3.0 format). the image must not be bigger than 640 x 480.
• --biosbootmenu disabled|menuonly|messageandmenu : speciﬁes whether the bios en-
ables the user to select a temporary boot device. the menuonly option suppresses the
message, but the user can still press f12 to select a temporary boot device.
• --biosapic x2apic|apic|disabled : speciﬁes the ﬁrmware apic level to be used. op-
tions are: x2apic, apic or disabled (no apic or x2apic) respectively.
note that if x2apic is speciﬁed and x2apic is unsupported by the vcpu, biosapic down-
grades to apic, if supported. otherwise biosapic downgrades to disabled. similarly, if apic
is speciﬁed, and apic is unsupported, a downgrade to disabled results.
• --biossystemtimeoffset <ms> : speciﬁes a ﬁxed time offset, in milliseconds, of the guest
relative to the host time. if the offset is positive, the guest time runs ahead of the host time.
• --biospxedebug on|off : enables or disables additional debugging output when using
the intel pxe boot rom. the output is written to the release log ﬁle. see chapter 12.1.2,
collecting debugging information, page 312.
• --system-uuid-le on|off : enables or disables representing the system uuid in little
endian form. the default value is on for new vms. for old vms the setting is off to keep
the content of the dmi/smbios table unchanged, which can be important for windows
license activation.
• --boot<1-4> none|floppy|dvd|disk|net : speciﬁes the boot order for the virtual ma-
chine. there are four slots, which the vm will try to access from 1 to 4, and for each of
which you can set a device that the vm should attempt to boot from.
• --rtcuseutc on|off : sets the real-time clock (rtc) to operate in utc time. see chapter
3.5.1, motherboard tab, page 52.

148

8 vboxmanage

• --graphicscontroller none|vboxvga|vmsvga|vboxsvga : speciﬁes the use of a graph-
ics controller, with an option to choose a speciﬁc type. see chapter 3.6.1, screen tab, page
54.
• --snapshotfolder default|<path> : speciﬁes the folder where snapshots are kept for a
virtual machine.
• --firmware bios|efi|efi32|efi64 : speciﬁes the ﬁrmware to be used to boot the vm:
available options are: bios, or one of the efi options: eﬁ, eﬁ32, or eﬁ64. use efi options
with care.
• --guestmemoryballoon <size> sets the default size of the guest memory balloon. this
is the memory allocated by the oracle vm virtualbox guest additions from the guest op-
erating system and returned to the hypervisor for reuse by other virtual machines. <size>
must be speciﬁed in megabytes. the default size is 0 megabytes. see chapter 4.10.1,
memory ballooning, page 85.
• --defaultfrontend default|<name> : speciﬁes the default frontend to be used when
starting this vm. see chapter 8.12, vboxmanage startvm, page 162.
• --vm-process-priority default|flat|low|normal|high : speciﬁes the priority
scheme of the vm process to be used when starting this vm and during vm execution.
see chapter 8.12, vboxmanage startvm, page 162.

8.8.2 networking settings
the following networking settings are available through vboxmanage modifyvm . with all these
settings, the decimal number directly following the option name, 1-n in the list below, speciﬁes
the virtual network adapter whose settings should be changed.

• --nic<1-n> none|null|nat|natnetwork|bridged|intnet|hostonly|generic : con-
ﬁgures the type of networking for each of the vm’s virtual network cards. options are:
not present ( none ), not connected to the host ( null ), use network address translation
( nat ), use the new network address translation engine ( natnetwork ), bridged networking
( bridged ), or use internal networking ( intnet ), host-only networking ( hostonly ), or ac-
cess rarely used sub-modes ( generic ). these options correspond to the modes described
in chapter 6.2, introduction to networking modes, page 105.
• --nictype<1-n> am79c970a|am79c973|am79c970|82540em|82543gc|82545em|virtio :
enables you to specify the networking hardware that oracle vm virtualbox presents to
the guest for a speciﬁed vm virtual network card. see chapter 6.1, virtual networking
hardware, page 104.
• --cableconnected<1-n> on|off : enables you to temporarily disconnect a virtual net-
work interface, as if a network cable had been pulled from a real network card. this might
be useful, for example for resetting certain software components in the vm.
• with the nictrace options, you can optionally trace network trafﬁc by dumping it to a ﬁle,
for debugging purposes.
with --nictrace<1-n> on|off , you can enable network tracing for a particular virtual
network card.
if enabled, you must specify with --nictracefile<1-n> <filename> the absolute path
of the ﬁle the trace should be logged to.

149

8 vboxmanage

• --nicproperty<1-n> <paramname>="paramvalue" : this option, in combination with
nicgenericdrv enables you to pass parameters to rarely-used network backends.
these parameters are backend engine-speciﬁc, and are different between udp tunnel and
the vde backend drivers. for examples, see chapter 6.8, udp tunnel networking, page 113.
• --nicspeed<1-n> <kbps> : only has an effect if generic networking has been enabled for
a particular virtual network card. see the --nic option. this mode enables access to rarely
used networking sub-modes, such as vde network or udp tunnel. this option speciﬁes the
throughput rate in kbps.
• --nicbootprio<1-n> <priority> : speciﬁes the order in which nics are tried for booting
over the network, using pxe. the priority is an integer in the 0 to 4 range. priority 1 is the
highest, priority 4 is low. priority 0, which is the default unless otherwise speciﬁed, is the
lowest.
note that this option only has an effect when the intel pxe boot rom is used.
• --nicpromisc<1-n> deny|allow-vms|allow-all : enables you to specify how promis-
cuous mode is handled for the speciﬁed vm virtual network card. this setting is only
relevant for bridged networking. deny , the default setting, hides any trafﬁc not intended
for the vm. allow-vms hides all host trafﬁc from the vm, but allows the vm to see trafﬁc
to and from other vms. allow-all removes this restriction completely.
• --nicbandwidthgroup<1-n> none|<name> : adds and removes an assignment of a band-
width group for the speciﬁed virtual network interface. specifying none removes any cur-
rent bandwidth group assignment from the speciﬁed virtual network interface. specifying
<name> adds an assignment of a bandwidth group to the speciﬁed virtual network interface.
see chapter 6.10, limiting bandwidth for network input/output, page 114.
• --bridgeadapter<1-n> none|<devicename> : only has an effect if bridged networking
has been enabled for a virtual network card. see the --nic option. use this option to
specify which host interface the given virtual network interface will use. see chapter 6.5,
bridged networking, page 110.
• --hostonlyadapter<1-n> none|<devicename> : only has an effect if host-only network-
ing has been enabled for a virtual network card. see the --nic option. use this option to
specify which host-only networking interface the given virtual network interface will use.
see chapter 6.7, host-only networking, page 112.
• --intnet<1-n> network : only has an effect if internal networking has been enabled for
a virtual network card. see the --nic option. use this option to specify the name of the
internal network. see chapter 6.6, internal networking, page 111.
• --nat-network<1-n> <network name> : if the networking type is set to natnetwork , not
nat , then this setting speciﬁes the name of the nat network this adapter is connected to.
optional.
• --nicgenericdrv<1-n> <backend driver> : only has an effect if generic networking
has been enabled for a virtual network card. see the --nic option. this mode enables you
to access rarely used networking sub-modes, such as vde network or udp tunnel.
• --macaddress<1-n> auto|<mac> : with this option you can set the mac address of a par-
ticular network adapter on the vm. normally, each network adapter is assigned a random
address by oracle vm virtualbox at vm creation.

150

8 vboxmanage

8.8.2.1 nat networking settings
the following nat networking settings are available through vboxmanage modifyvm . with all
these settings, the decimal number directly following the option name, 1-n in the list below,
speciﬁes the virtual network adapter whose settings should be changed.

• --natnet<1-n> <network>|default : if the networking type is set to nat , not
natnetwork , then this setting speciﬁes the ip address range to be used for this network.
see chapter 9.8, fine tuning the oracle vm virtualbox nat engine, page 255.

• --natpf<1-n> [<name>],tcp|udp,[<hostip>],<hostport>,[<guestip>],
<guestport> : deﬁnes a nat port-forwarding rule. see chapter 6.3.1, conﬁguring
port forwarding with nat, page 107.
• --natpf<1-n> delete <name> : deletes a nat port-forwarding rule. see chapter 6.3.1,
conﬁguring port forwarding with nat, page 107.
• --nattftpprefix<1-n> <prefix> : deﬁnes a preﬁx for the built-in tftp server. for ex-
ample, where the boot ﬁle is located. see chapter 6.3.2, pxe booting with nat, page 108
and chapter 9.8.2, conﬁguring the boot server (next server) of a nat network interface,
page 255.
• --nattftpfile<1-n> <bootfile> : deﬁnes the tft boot ﬁle. see chapter 9.8.2, conﬁg-
uring the boot server (next server) of a nat network interface, page 255.
• --nattftpserver<1-n> <tftpserver> : deﬁnes the tftp server address to boot from.
see chapter 9.8.2, conﬁguring the boot server (next server) of a nat network interface,
page 255.
• --nattbindip<1-n> <ip;> : oracle vm virtualbox’s nat engine normally routes tcp/ip
packets through the default interface assigned by the host’s tcp/ip stack. use this setting
to instruct the nat engine to bind to a speciﬁed ip address instead. see chapter 9.8.3,
tuning tcp/ip buffers for nat, page 255.
• --natdnspassdomain<1-n> on|off : speciﬁes whether the built-in dhcp server passes
the domain name for network name resolution.
• --natdnsproxy<1-n> on|off : makes the nat engine proxy all guest dns requests to the
host’s dns servers. see chapter 9.8.5, enabling dns proxy in nat mode, page 256.
• --natdnshostresolver<1-n> on|off : makes the nat engine use the host’s resolver
mechanisms to handle dns requests. see chapter 9.8.5, enabling dns proxy in nat mode,
page 256.

• --natsettings<1-n> [<mtu>],[<socksnd>],[<sockrcv>],[<tcpsnd>],
[<tcprcv>] : controls several nat settings. see chapter 9.8.3, tuning tcp/ip buffers for
nat, page 255.
• --nataliasmode<1-n> default|[log],[proxyonly],[sameports] : deﬁnes behaviour
of the nat engine core: log - enables logging, proxyonly - switches off aliasing mode and
makes nat transparent, sameports - enforces the nat engine to send packets through the
same port as they originated on, default - disable all aliasing modes. see chapter 9.8.7,
conﬁguring aliasing of the nat engine, page 257.

151

8 vboxmanage

8.8.3 miscellaneous settings
the following hardware settings, such as serial port, audio, clipboard, drag and drop, monitor,
and usb settings are available through vboxmanage modifyvm :
• --mouse <ps2|usb|usbtablet|usbmultitouch> : speciﬁes the mode of the mouse to be
used in the vm. available options are: ps2, usb, usbtablet, usbmultitouch.
• --keyboard <ps2|usb> : speciﬁes the mode of the keyboard to be used in the vm. avail-
able options are: ps2, usb.
• --uart<1-n> off|<i/o base> <irq> : conﬁgures virtual serial ports for the vm. see
chapter 3.10, serial ports, page 59.
• --uartmode<1-n> <arg> : controls how oracle vm virtualbox connects a given virtual
serial port, conﬁgured with the --uartx setting, to the host on which the virtual machine
is running. as described in chapter 3.10, serial ports, page 59, for each such port, you can
specify <arg> as one of the following options:
– disconnected : even though the serial port is shown to the guest, it has no “other
end”. this is like a real com port without a cable.
– server <pipename> : on a windows host, this tells oracle vm virtualbox to create a
named pipe on the host named <pipename> and connect the virtual serial device to it.
note that windows requires that the name of a named pipe begins with \\.\pipe\ .
on a linux host, instead of a named pipe, a local domain socket is used.
– client <pipename> : operates as for server , except that the pipe, or local domain
socket, is not created by oracle vm virtualbox but is assumed to exist already.
– tcpserver <port> : conﬁgures oracle vm virtualbox to create a tcp socket on the
host with tcp <port> and connect the virtual serial device to it. note that unix-like
systems require ports over 1024 for normal users.
– tcpclient <hostname:port> : operates as for tcpserver , except that the tcp
socket is not created by oracle vm virtualbox, but is assumed to exist already.
– file <file> : redirects the serial port output to a raw ﬁle <ﬁle> speciﬁed by its
absolute path on the host ﬁle system.
– <devicename> : if, instead of the above options, the device name of a physical hard-
ware serial port of the host is speciﬁed, the virtual serial port is connected to that
hardware port. on a windows host, the device name will be a com port such as
com1 . on a linux host, the device name will be /dev/ttys0 or similar. this enables
you to wire up a real serial port to a virtual machine.
• uarttype <1-n> 16450|16550a|16750 : conﬁgures the uart type for a virtual serial
port. the default uart type is 16550a.
• --lptmode<1-n> <device> : speciﬁes the device name of the parallel port that the par-
allel port feature will be using. use this before --lpt . this feature depends on the host
operating system. for windows hosts, use a device name such as lpt1. on linux hosts, use
a device name such as /dev/lp0.
• --lpt<1-n> <i/o base> <irq> : speciﬁes the i/o address of the parallel port and the
irq number that the parallel port feature will be using. optional. use this after --lptmod .
i/o base address and irq are the values that guest sees. for example, the values avalable
under guest device manager.
• --audio none|null|dsound|oss|alsa|pulse|coreaudio : speciﬁes whether the vm
should have audio support, and if so, which type. the list of supported audio types de-
pends on the host and can be determined with vboxmanage modifyvm .

152

8 vboxmanage

• --audiocontroller ac97|hda|sb16 : speciﬁes the audio controller to be used with the
vm.
• --audiocodec stac9700|ad1980|stac9221|sb16 : speciﬁes the audio codec to be used
with the vm.
• --audioin on : speciﬁes whether capturing audio from the host is enabled or disabled.
• --audioout on : speciﬁes whether audio playback from the guest is enabled or disabled.
• --clipboard-mode disabled|hosttoguest|guesttohost|bidirectional : conﬁgues
how the guest or host operating system’s clipboard should be shared with the host or guest.
see chapter 3.4, general settings, page 50. this setting requires that the guest additions
be installed in the virtual machine.
• --clipboard-file-transfers enabled|disabled : speciﬁes if clipboard ﬁle transfers
are allowed between host and guest oses or not.
• --draganddrop disabled|hosttoguest|guesttohost|bidirectional : speciﬁes the
drag and drop mode to use between the host and the virtual machine. see chapter 4.4,
drag and drop, page 77. this requires that the guest additions be installed in the virtual
machine.
• --monitorcount <count> : enables multi-monitor support. see chapter 3.6, display set-
tings, page 54.
• --usb on|off : enables and disables the vm’s virtual usb controller. see chapter 3.11.1,
usb settings, page 60.
• --usbehci on|off : enables and disables the vm’s virtual usb 2.0 controller. see chapter
3.11.1, usb settings, page 60.
• --usbxhci on|off : enables and disables the vm’s virtual usb 3.0 controller. see chapter
3.11.1, usb settings, page 60.
• --usbrename <oldname> <newname> : enables renaming of the vm’s virtual usb con-
troller from <oldname> to <newname>.

8.8.4 recording settings
the vboxmanage modifyvm command enables you to modify recording settings for video record-
ing, audio recording, or both.
use the following options to update the recording settings:
• --recording on|off enables or disables the recording of a vm session into a webm/vp8
ﬁle. when this option value is on , recording begins when the vm session starts.
• --recordingscreens all|<screen-id> [<screen-id> ...] enables you to specify
which vm screens to record. the recording for each screen that you specify is saved to
its own ﬁle.
• --recordingfile <filename> speciﬁes the ﬁle in which to save the recording.
• --recordingmaxsize <mb> speciﬁes the maximum size of the recorded video ﬁle in
megabytes. the recording stops when the ﬁle reaches the speciﬁed size. if this value is
zero, the recording continues until you stop the recording.
• --recordingmaxtime <seconds> speciﬁes the maximum amount time to record in sec-
onds. the recording stops after the speciﬁed number of seconds elapses. if this value is
zero, the recording continues until you stop the recording.

153

8 vboxmanage

• --recordingopts <keyword>=<value>[,<keyword>=<value> ...] speciﬁes addi-
tional video-recording options in a comma-separated keyword-value format. for example,
foo=bar,a=b .
only use this option only if you are an advanced user. for information about keywords, see
oracle vm virtualbox programming guide and reference.
• --recordingvideofps <fps> speciﬁes the maximum number of video frames per second
(fps) to record. frames that have a higher frequency are skipped. increasing this value
reduces the number of skipped frames and increases the ﬁle size.
• --recordingvideorate <bit-rate> speciﬁes the bit rate of the video in kilobits per sec-
ond. increasing this value improves the appearance of the video at the cost of an increased
ﬁle size.
• --recordingvideores <width>x<height> speciﬁes the video resolution of the recorded
video in pixels.

8.8.5 remote machine settings
the following settings that affect remote machine behavior are available through
vboxmanage modifyvm :
• --vrde on|off : enables and disables the virtualbox remote desktop extension (vrde)
server.
• --vrdeproperty "tcp/ports|address=<value>" : sets the port numbers and ip address
on the vm that the vrde server can bind to.
– for tcp/ports, <value> should be a port or a range of ports that the vrde server can
bind to. default or 0 means port 3389, the standard port for rdp. see the description
for the --vrdeport option in chapter 8.8.5, remote machine settings, page 154.
– for tcp/address, <value> should be the ip address of the host network interface
that the vrde server will bind to. if speciﬁed, the server will accept connections only
on the speciﬁed host network interface. see the description for the --vrdeaddress
option in chapter 8.8.5, remote machine settings, page 154.
• --vrdeproperty "videochannel/enabled|quality|downscaleprotection=<value>" :
sets the vrdp video redirection properties.
– for videochannel/enabled, <value> can be set to “1”, switching the vrdp video
channel on. see chapter 7.1.9, vrdp video redirection, page 124.
– for videochannel/quality, <value> should be set between 10 and 100% inclusive,
representing a jpeg compression level on the vrde server video channel. lower
values mean lower quality but higher compression. see chapter 7.1.9, vrdp video
redirection, page 124.
– for videochannel/downscaleprotection, <value> can be set to “1” to enable the
videochannel downscale protection feature. when enabled, if a video’s size equals
the shadow buffer size, then it is regarded as a full screen video, and is displayed. but
if its size is between fullscreen and the downscale threshold then it is not displayed,
as it could be an application window, which would be unreadable when downscaled.
when the downscale protection feature is disabled, an attempt is always made to
display videos.
• --vrdeproperty "client/disabledisplay|disableinput|disableaudio|disableusb=1" :
disables one of the vrde server features: display, input, audio or usb respectively. to
reenable a feature, use “client/disabledisplay=“ for example. see chapter 7.1.10, vrdp
customization, page 125.

154

8 vboxmanage

• --vrdeproperty "client/disableclipboard|disableupstreamaudio=1" : disables
one of the vrde server features: clipboard or upstreamaudio respectively. to reenable
a feature, use “client/disableclipboard=“ for example. see chapter 7.1.10, vrdp cus-
tomization, page 125.
• --vrdeproperty "client/disablerdpdr=1" : disables the vrde server feature: rdp
device redirection for smart cards. to reenable this feature, use “client/disablerdpr=“.
• --vrdeproperty "h3dredirect/enabled=1" : enables the vrde server feature: 3d redi-
rection. to disable this feature, use “h3dredirect/enabled=“.
• --vrdeproperty "security/method|servercertificate|serverprivatekey|cacertificate=<value>" :
sets the desired security method and path of server certiﬁcate, path of server private key,
path of ca certiﬁcate, that are used for a connection.
– --vrdeproperty "security/method=<value>" sets the desired security method,
which is used for a connection. valid values are:
∗ negotiate : both enhanced (tls) and standard rdp security connections are
allowed. the security method is negotiated with the client. this is the default
setting.
∗ rdp : only standard rdp security is accepted.
∗ tls : only enhanced rdp security is accepted. the client must support tls.
see chapter 7.1.6, rdp encryption, page 123.
– --vrdeproperty "security/servercertificate=<value>" where <value> is
the absolute path of the server certiﬁcate. see chapter 7.1.6, rdp encryption, page
123.
– --vrdeproperty "security/serverprivatekey=<value>" where <value> is the
absolute path of the server private key. see chapter 7.1.6, rdp encryption, page 123.
– --vrdeproperty "security/cacertificate=<value>" where <value> is the ab-
solute path of the ca self signed certiﬁcate. see chapter 7.1.6, rdp encryption, page
123.
• --vrdeproperty "audio/ratecorrectionmode|logpath=<value>" sets the audio con-
nection mode, or path of the audio logﬁle.
– --vrdeproperty "audio/ratecorrectionmode=<value>" where <value> is the
desired rate correction mode. allowed values are:
∗ vrdp_audio_mode_void : no mode speciﬁed, use to unset any audio mode al-
ready set.
∗ vrdp_audio_mode_rc : rate correction mode.
∗ vrdp_audio_mode_lpf : low pass ﬁlter mode.
∗ vrdp_audio_mode_cs : client sync mode to prevent underﬂow or overﬂow of the
client queue.
– --vrdeproperty "audio/logpath=<value>" where <value> is the absolute path
of the audio log ﬁle.
• --vrdeextpack default|<name> : speciﬁes the library to use for accessing the vm re-
motely. the default is to use the rdp code which is part of the oracle vm virtualbox
extension pack.

155

8 vboxmanage

• --vrdeport default|<ports> : a port or a range of ports the vrde server can bind to.
default or 0 means port 3389, the standard port for rdp. you can specify a comma-
separated list of ports or ranges of ports. use a dash between two port numbers to specify
a range. the vrde server will bind to one of the available ports from the speciﬁed list.
only one machine can use a given port at a time. for example, the option --vrdeport
5000,5010-5012 will tell the server to bind to one of following ports: 5000, 5010, 5011,
or 5012.
• --vrdeaddress <ip address> : the ip address of the host network interface the vrde
server will bind to. if speciﬁed, the server will accept connections only on the speciﬁed
host network interface.
the setting can be used to specify whether the vrdp server should accept either ipv4, ipv6,
or both connections:
– only ipv4: --vrdeaddress "0.0.0.0"
– only ipv6: --vrdeaddress "::"
– both ipv6 and ipv4: --vrdeaddress ""
this is the default setting.
• --vrdeauthtype null|external|guest : enables you to indicate use of authorization,
and specify how authorization will be performed. see chapter 7.1.5, rdp authentication,
page 122.
• --vrdeauthlibrary default|<name> : speciﬁes the library used for rdp authentication.
see chapter 7.1.5, rdp authentication, page 122.
• --vrdemulticon on|off : enables multiple connections to be made to the same vrde
server, if the server supports this feature. see chapter 7.1.7, multiple connections to the
vrdp server, page 124.
• --vrdereusecon on|off : this speciﬁes the vrde server behavior when multiple con-
nections are disabled. when this option is enabled, the server will allow a new client to
connect and will drop the existing connection. when this option is disabled, the default
setting, a new connection will not be accepted if there is already a client connected to the
server.
• --vrdevideochannel on|off : enables video redirection, if it is supported by the vrde
server. see chapter 7.1.9, vrdp video redirection, page 124.
• --vrdevideochannelquality <percent> : speciﬁes the image quality for video redirec-
tion. see chapter 7.1.9, vrdp video redirection, page 124.

8.8.6 teleporting settings
with the following commands for vboxmanage modifyvm you can conﬁgure a machine to be a
target for teleporting. see chapter 7.2, teleporting, page 125.

• --teleporter on|off : enables and disables the teleporter feature whereby when the
machine is started, it waits to receive a teleporting request from the network instead of
booting normally. teleporting requests are received on the port and address speciﬁed using
the following parameters.
• --teleporterport <port> , --teleporteraddress <address> : these settings must be
used with --teleporter . they specify the port and address the virtual machine should
listen to in order to receive a teleporting request sent from another virtual machine. <port>
can be any free tcp/ip port number, such as 6000. <address> can be any ip address or

156

8 vboxmanage

hostname and speciﬁes the tcp/ip socket to bind to. the default is 0.0.0.0, which means
any address.
• --teleporterpassword <password> : if this optional setting is used, then the teleporting
request will only succeed if the source machine speciﬁes the same password as the one
given with this command.
• --teleporterpasswordfile <password> : if this optional setting is used, then the tele-
porting request will only succeed if the source machine speciﬁes the same password as the
one speciﬁed in the ﬁle give with this command. use stdin to read the password from
stdin.
• --cpuid <leaf> <eax> <ebx> <ecx> <edx> : advanced users can use this setting before
a teleporting operation, to restrict the virtual cpu capabilities that oracle vm virtualbox
presents to the guest operating system. this must be run on both the source and the target
machines involved in the teleporting and will then modify what the guest sees when it ex-
ecutes the cpuid machine instruction. this might help with misbehaving applications that
wrongly assume that certain cpu capabilities are present. the meaning of the parameters
is hardware dependent, refer to the amd or intel processor documentation.

8.8.7 debugging settings
the following settings are only relevant for low-level vm debugging. regular users will never
need these settings.

• --tracing-enabled on|off : enables the tracebuffer. this consumes some memory for
the tracebuffer and adds extra overhead.
• --tracing-config <config-string> : enables tracing conﬁguration. in particular, this
deﬁnes which group of tracepoints are enabled.
• --tracing-allow-vm-access on|off : enables and disables vm access to the tracebuffer.
by default, this setting is disabled.

8.8.8 usb card reader settings
the following setting deﬁnes access to a usb card reader by the guest environment. usb card
readers are typically used for accessing data on memory cards such as compactflash (cf), secure
digital (sd), or multimediacard (mmc).

• --usbcardreader on|off : enables and disables the usb card reader interface.

8.8.9 autostarting vms during host system boot
these settings conﬁgure the vm autostart feature, which automatically starts the vm at host
system boot-up. note that there are prerequisites that need to be addressed before using this
feature. see chapter 9.21, starting virtual machines during system boot, page 284.

• --autostart-enabled on|off : enables and disables vm autostart at host system boot-
up, using the speciﬁed user name.
• --autostart-delay <seconds> : speciﬁes a delay, in seconds, following host system
boot-up, before the vm autostarts.

157

8 vboxmanage

8.9 vboxmanage movevm

this command moves a virtual machine to a new location on the host.
associated ﬁles of the virtual machine, such as settings ﬁles and disk image ﬁles, are moved to
the new location. the oracle vm virtualbox conﬁguration is updated automatically.
the movevm subcommand requires the name of the virtual machine which should be moved.
also required is the type of move operation, speciﬁed by --type basic . other types of move
operation may be supported in future releases.
the --folder setting conﬁgures the new location on the host ﬁle system. enter a relative
pathname or a full pathname.

8.10 vboxmanage import

this command imports one or more virtual machines into oracle vm virtualbox. you can import
from either of the following:

• a virtual appliance in ovf format.
• a cloud service, such as oracle cloud infrastructure. only a single cloud instance can be
imported.

see chapter 1.14, importing and exporting virtual machines, page 21 for more details on im-
porting vms into oracle vm virtualbox.

8.10.1 import from ovf
the import subcommand takes at least the path name of an ovf ﬁle as input and expects the
disk images, if needed, to be in the same directory as the ovf ﬁle. many additional command-
line options are supported. these enable you to control in detail what is being imported and to
modify the import parameters, depending on the content of the ovf ﬁle.
it is therefore recommended to ﬁrst run the import subcommand with the --dry-run or -n
option. this will then print a description of the appliance’s contents to the screen how it would
be imported into oracle vm virtualbox, together with the optional command-line options to
inﬂuence the import behavior.
use of the --options keepallmacs|keepnatmacs|keepdisknames option enables addi-
tional ﬁne tuning of the import operation. the ﬁrst two options enable you to specify how the
mac addresses of every virtual network card should be handled. they can either be reinitialized,
which is the default setting, left unchanged ( keepallmacs ) or left unchanged when the network
type is nat ( keepnatmacs ). if you add keepdisknames all new disk images are assigned the
same names as the originals, otherwise they are renamed.
as an example, the following is a screen output for a sample appliance containing a windows
xp guest:

vboxmanage import windowsxp.ovf --dry-run
interpreting windowsxp.ovf...
ok.
virtual system 0:
0: suggested os type: "windowsxp"
(change with "--vsys 0 --ostype <type>"; use "list ostypes" to list all)
1: suggested vm name "windows xp professional _ 1"
(change with "--vsys 0 --vmname <name>")
2: suggested vm group "/"
(change with "--vsys 0 --group <group>")
3: suggested vm settings file name "/home/klaus/virtualbox vms/dummy2 2/dummy2 2.vbox"
(change with "--vsys 0 --settingsfile <filename>")
4: suggested vm base folder "/home/klaus/virtualbox vms"

158

8 vboxmanage

(change with "--vsys 0 --basefolder <path>")
5: end-user license agreement
(display with "--vsys 0 --eula show";
accept with "--vsys 0 --eula accept")
6: number of cpus: 1
(change with "--vsys 0 --cpus <n>")
7: guest memory: 956 mb (change with "--vsys 0 --memory <mb>")
8: sound card (appliance expects "ensoniq1371", can change on import)
(disable with "--vsys 0 --unit 5 --ignore")
9: usb controller
(disable with "--vsys 0 --unit 6 --ignore")
10: network adapter: orig bridged, config 2, extra type=bridged
11: floppy
(disable with "--vsys 0 --unit 8 --ignore")
12: scsi controller, type buslogic
(change with "--vsys 0 --unit 9 --scsitype {buslogic|lsilogic}";
disable with "--vsys 0 --unit 9 --ignore")
13: ide controller, type piix4
(disable with "--vsys 0 --unit 10 --ignore")
14: hard disk image: source image=windowsxp.vmdk,
target path=/home/user/disks/windowsxp.vmdk, controller=9;channel=0
(change controller with "--vsys 0 --unit 11 --controller <id>";
disable with "--vsys 0 --unit 11 --ignore")

the individual conﬁguration items are numbered, and depending on their type support differ-
ent command-line options. the import subcommand can be directed to ignore many such items
with a --vsys x --unit y --ignore option, where x is the number of the virtual system and
y the item number, as printed on the screen. x is zero, unless there are several virtual system
descriptions in the appliance.
in the above example, item #1 speciﬁes the name of the target machine in oracle vm
virtualbox. items #12 and #13 specify hard disk controllers, respectively. item #14 describes a
hard disk image. in this case, the additional --controller option indicates which item the disk
image should be connected to, with the default coming from the ovf ﬁle.
you can combine several items for the same virtual system using the --vsys option. for
example, to import a machine as described in the ovf, but without the sound card and without
the usb controller, and with the disk image connected to the ide controller instead of the scsi
controller, use the following command:

vboxmanage import windowsxp.ovf
--vsys 0 --unit 8 --ignore --unit 9 --ignore --unit 14 --controller 13

8.10.2 import from oracle cloud infrastructure
as the result of this operation, a ﬁle with the sufﬁx .oci is downloaded to the local host. this
ﬁle is a tar archive which contains a bootable instance image in qcow2 format and a json ﬁle
with some metadata related to the imported instance.
the downloaded ﬁle is deleted after a successful import. if import fails, the downloaded ﬁle
may not be deleted and the vboxsvc log ﬁle may indicate the location where the ﬁle was stored.
during import the bootable image is extracted from the archive and converted into vmdk
format. the json ﬁle is also extracted and stored in the vm machine folder.
the command syntax for importing an oracle cloud infrastructure instance begins with
vboxmanage import oci:// --cloud .
you can list the available oracle cloud infrastructure vm instances and their ids by using the
following command:

vboxmanage cloud --provider=oci --profile=<cloud-profile-name> list instances

to import a vm from a cloud service such as oracle cloud infrastructure, use the --cloud
option to specify the import from the cloud. some of the following options are settings for the

159

8 vboxmanage

vm, for others you must enter an oracle cloud identiﬁer (ocid) for a resource. use the oracle
cloud infrastructure console to view ocids.
the following parameters can be speciﬁed:

• --vmname : speciﬁes a new name for the imported vm. this name is used as the vm name
by oracle vm virtualbox.
• --cloudinstanceid : the id of an existing instance in the cloud.
• --cloudprofile : speciﬁes the cloud proﬁle that is used to connect to the cloud service
provider. the cloud proﬁle contains your oracle cloud infrastructure account details, such
as your user ocid and the ﬁngerprint for your public key. to use a cloud proﬁle, you must
have the required permissions on oracle cloud infrastructure.
• --cloudbucket : speciﬁes the bucket name in which to store the object created from an
instance bootable volume. in oracle cloud infrastructure, a bucket is a logical container
for storing objects.

the following import options have the same meaning as for ovf import:

• --ostype : an os type supported by oracle vm virtualbox. use the
vboxmanage list ostypes command to see the whole list of supported oses. if
the type was not set, the unknown type is used.
• --basefolder : the folder where the new vm is stored.
• --description : a string describing the vm.
• --memory : the amount of ram memory assigned for the vm, in mb. if this option is not
set either the default memory size for the os type is used, or the value is taken from the
oracle cloud infrastructure instance.
• --cpus : the number of virtual cpus assigned for the vm. if this option is not set, either the
default virtual cpus setting for the os type is used, or the value is taken from the oracle
cloud infrastructure instance.

the import options --disk , --controller , --scsitype , --unit , --settingsfile are not
valid for cloud import.
the following example shows a typical command line for importing an instance from oracle
cloud infrastructure:

# vboxmanage import oci:// --cloud --vmname import _ from _ oci --memory 4000
--cpus 3 --ostype freebsd _ 64 --cloudprofile "standard user"
--cloudinstanceid ocid1.instance.oc1.iad.abuwc... --cloudbucket mybucket

8.11 vboxmanage export

this command exports one or more virtual machines from oracle vm virtualbox. you can export
to either of the following:

• a virtual appliance in ovf format, including copying their virtual disk images to com-
pressed vmdk.
• a cloud service, such as oracle cloud infrastructure. a single vm can be exported in vmdk
format.

see chapter 1.14, importing and exporting virtual machines, page 21 for more details on ex-
porting vms from oracle vm virtualbox.

160

8 vboxmanage

8.11.1 export to ovf
list the machine, or the machines, that you would like to export to the same ovf ﬁle and specify
the target ovf ﬁle after an additional --output or -o option. note that the directory of the target
ovf ﬁle will also receive the exported disk images in the compressed vmdk format, regardless
of the original format, and should have enough disk space left for them.
beside a simple export of a given virtual machine, you can append several product information
to the appliance ﬁle. use --product , --producturl , --vendor , --vendorurl , --version and
--description to specify this additional information. for legal reasons you may add a license
text or the content of a license ﬁle by using the --eula and --eulafile option respectively.
as with ovf import, you use the --vsys x option to apply these options to the correct virtual
machine.
for virtualization products which are not fully compatible with the ovf standard 1.0 you
can enable an ovf 0.9 legacy mode with the --legacy09 option. other options are --ovf09 ,
--ovf10 , --ovf20 .
to specify options controlling the exact content of the appliance ﬁle, you can use --options
to request the creation of a manifest ﬁle, which enables detection of corrupted appliances on
import, the additional export of dvd images, and the exclusion of mac addresses. you can
specify a list of options, such as --options manifest,nomacs . for details, check the help
output of vboxmanage export .

8.11.2 export to oracle cloud infrastructure
by default, an exported disk image is converted into stream vmdk format. this ensures compat-
ibility with oracle cloud infrastructure.
list the machine that you want to export to oracle cloud infrastructure and specify the target
cloud service provider by using the --output or -o option.
to export a vm to a cloud service such as oracle cloud infrastructure, use the --cloud option
to specify the vm to export. this option works in the same way as the --vsys option for ovf
export.
some of the following options are settings for the vm instance. as a result, you must enter an
oracle cloud identiﬁer (ocid) for a resource. use the oracle cloud infrastructure console to
view ocids.

• --output/-o : speciﬁes the short name of the cloud service provider to which you export.
for oracle cloud infrastructure, enter oci:// .
• --cloud number-of-virtual-system : speciﬁes a number that identiﬁes the vm that you
are exporting. numbering starts at 0 for the ﬁrst vm.
• --vmname name : speciﬁes the name of the exported vm. this name is used as the vm
instance name in oracle cloud infrastructure.
• --cloudprofile cloud-profile-name : speciﬁes the cloud proﬁle that is used to connect
to the cloud service provider. the cloud proﬁle contains your oracle cloud infrastructure
account details, such as your user ocid and the ﬁngerprint for your public key. see chapter
1.14.5, exporting an appliance to oracle cloud infrastructure, page 24.
to use a cloud proﬁle, you must have the required permissions on oracle cloud infrastruc-
ture.
• --cloudshape shape : speciﬁes the shape used for the vm instance. the shape deﬁnes the
number of cpus and the amount of memory allocated to the vm instance. the shape must
be compatible with the exported image.
• --clouddomain domain : speciﬁes the availability domain to use for the vm instance. enter
the full name of the availability domain.

161

8 vboxmanage

• --clouddisksize disk-size-in-gb : speciﬁes the disk size used for the exported disk
image in gigabytes. the minimum value is 50 gb and the maximum value is 300 gb.
• --cloudbucket bucket-name : speciﬁes the bucket in which to store the uploaded ﬁles.
in oracle cloud infrastructure, a bucket is a logical container for storing objects.
• --cloudocivcn oci-vcn-id : speciﬁes the virtual cloud network (vcn) to use for the vm
instance. enter the ocid for the vcn.
• --cloudocisubnet oci-subnet-id : speciﬁes the subnet of the vcn to use for the vm
instance. enter the ocid for the subnet.
• --cloudkeepobject true | false : speciﬁes whether to store the exported disk image
in oracle object storage.
• --cloudlaunchinstance true | false : speciﬁes whether to start the vm instance after
the export to oracle cloud infrastructure completes.
• --cloudpublicip true | false : speciﬁes whether to enable a public ip address for the
vm instance.

the following example shows a typical command line for exporting a vm to oracle cloud
infrastructure.

# vboxmanage export myvm --output oci:// --cloud 0 --vmname myvm _ cloud \
--cloudprofile "standard user" --cloudbucket mybucket \
--cloudshape vm.standard2.1 --clouddomain us-ashburn-ad-1 --clouddisksize 50 \
--cloudocivcn ocid1.vcn.oc1.iad.aaaa... --cloudocisubnet ocid1.subnet.oc1.iad.aaaa... \
--cloudkeepobject true --cloudlaunchinstance true --cloudpublicip true

8.12 vboxmanage startvm

this command starts a virtual machine that is currently in the powered off or saved states.
the optional --type speciﬁer determines whether the machine will be started in a window or
whether the output should go through vboxheadless , with vrde enabled or not. see chapter
7.1.2, vboxheadless, the remote desktop server, page 118. the list of types is subject to change,
and it is not guaranteed that all types are accepted by any product variant.
the global or per-vm default value for the vm frontend type will be taken if the type is not
explicitly speciﬁed. if none of these are set, the gui variant will be started.
the following values are allowed:

gui

starts a vm showing a gui window. this is the default.

headless

starts a vm without a window for remote display only.

separate

starts a vm with a detachable ui. technically, it is a headless vm with user interface in a
separate process. this is an experimental feature as it lacks certain functionality, such as
3d acceleration.

162

8 vboxmanage

note: if you experience problems with starting virtual machines with particular fron-
tends and there is no conclusive error information, consider starting virtual machines
directly by running the respective front-end, as this can give additional error informa-
tion.

8.13 vboxmanage controlvm

the controlvm subcommand enables you to change the state of a virtual machine that is cur-
rently running. the following can be speciﬁed:

• vboxmanage controlvm <vm> pause : temporarily puts a virtual machine on hold, with-
out permanently changing its state. the vm window is gray, to indicate that the vm is
currently paused. this is equivalent to selecting the pause item in the machine menu of
the gui.
• use vboxmanage controlvm <vm> resume : undoes a previous pause command. this is
equivalent to selecting the resume item in the machine menu of the gui.
• vboxmanage controlvm <vm> reset : has the same effect on a virtual machine as press-
ing the reset button on a real computer. a cold reboot of the virtual machine is done,
which immediately restarts and reboots the guest operating system. the state of the vm is
not saved beforehand, and data may be lost. this is equivalent to selecting the reset item
in the machine menu of the gui.
• vboxmanage controlvm <vm> poweroff : has the same effect on a virtual machine as
pulling the power cable on a real computer. the state of the vm is not saved beforehand,
and data may be lost. this is equivalent to selecting the close item in the machine menu
of the gui, or clicking the vm window’s close button, and then selecting power off the
machine in the displayed dialog.
after this, the vm’s state will be powered off. from that state, it can be started again. see
chapter 8.12, vboxmanage startvm, page 162.
• vboxmanage controlvm <vm> savestate : saves the current state of the vm to disk and
then stops the vm. this is equivalent to selecting the close item in the machine menu of
the gui or clicking the vm window’s close button, and then selecting save the machine
state in the displayed dialog.
after this, the vm’s state will be saved. from this state, it can be started again. see chapter
8.12, vboxmanage startvm, page 162.
• vboxmanage controlvm <vm> acpipowerbutton : sends an acpi shutdown signal to the
vm, as if the power button on a real computer had been pressed. so long as the vm is
running a fairly modern guest operating system providing acpi support, this should trigger
a proper shutdown mechanism from within the vm.
• vboxmanage controlvm <vm> keyboardputscancode <hex> [<hex>...] : sends com-
mands using keycodes to the vm. keycodes are documented in the public domain. for
example: http://www.win.tue.nl/~aeb/linux/kbd/scancodes-1.html.
• vboxmanage controlvm "vm name" teleport --hostname <name> --port <port> [--passwordfile <file> | --password <password>] :
makes the machine the source of a teleporting operation and initiates a teleport to the
given target. see chapter 7.2, teleporting, page 125. if the optional password is speciﬁed,
it must match the password that was given to the modifyvm command for the target
machine. see chapter 8.8.6, teleporting settings, page 156.

163

8 vboxmanage

the following extra options are available with controlvm that do not directly affect the vm’s
running state:
• setlinkstate<1-n> on|off : connects or disconnects virtual network cables from their
network interfaces.
• nic<1-n> null|nat|bridged|intnet|hostonly|generic|natnetwork[<devicename>] :
speciﬁes the type of networking that should be made available on the speciﬁed vm virtual
network card. they available types are: not connected to the host ( null ), use network
address translation ( nat ), bridged networking ( bridged ), communicate with other
virtual machines using internal networking ( intnet ), host-only networking ( hostonly ),
natnetwork networking ( natnetwork ), or access to rarely used submodes ( generic ).
these options correspond to the modes which are described in detail in chapter 6.2,
introduction to networking modes, page 105.
• with the nictrace options, you can optionally trace network trafﬁc by dumping it to a ﬁle,
for debugging purposes.
nictrace<1-n> on|off : enables network tracing for a particular virtual network card.
before enabling you should specify a ﬁle name to which the trace should
be logged. this can be done with the nictracefile<1-n> <filename> op-
tion to vboxmanage controlvm at runtime or with the <filename> option to
vboxmanage modifyvm otherwise.
• nicpromisc<1-n> deny|allow-vms|allow-all : speciﬁes how the promiscious mode
is handled for the speciﬁed vm virtual network card. this setting is only relevant for
bridged networking. the default setting of deny hides any trafﬁc not intended for this vm.
allow-vms hides all host trafﬁc from this vm but enables the vm to see trafﬁc to and from
other vms. allow-all removes this restriction completely.
• nicproperty<1-n> <paramname>="paramvalue" : this option, in combination with
nicgenericdrv enables you to pass parameters to rarely-used network backends.
those parameters are backend engine-speciﬁc, and are different between udp tunnel and
the vde backend drivers. see chapter 6.8, udp tunnel networking, page 113.

• natpf<1-n> [<name>],tcp|udp,[<hostip>],<hostport>,[<guestip>],
<guestport> : speciﬁes a nat port-forwarding rule. see chapter 6.3.1, conﬁguring
port forwarding with nat, page 107.
• natpf<1-n> delete <name> : deletes a nat port-forwarding rule. see chapter 6.3.1,
conﬁguring port forwarding with nat, page 107.
• the guestmemoryballoon<balloon size in mb> : changes the size of the guest mem-
ory balloon. this is the memory allocated by the oracle vm virtualbox guest additions
from the guest operating system and returned to the hypervisor for reuse by other virtual
machines. this must be speciﬁed in megabytes. see chapter 4.10.1, memory ballooning,
page 85.

• usbattach<uuid|address> [--capturefile <filename>]
and usbdetach <uuid|address> [--capturefile <filename>] : makes host usb de-
vices visible or invisible to the virtual machine on the ﬂy, without the need for creating
ﬁlters ﬁrst. the usb devices can be speciﬁed by uuid (unique identiﬁer) or by address on
the host system. use the --capturefile option to specify the absolute path of a ﬁle for
writing activity logging data.
you can use vboxmanage list usbhost to locate this information.
• audioin on : selects whether capturing audio from the host is enabled or disabled.

164

8 vboxmanage

• audioout on : selects whether audio playback from the guest is enabled or disabled.
• clipboard mode disabled|hosttoguest|guesttohost|bidirectional : selects how
the guest or host operating system’s clipboard should be shared with the host or guest. see
chapter 3.4, general settings, page 50. this requires that the guest additions be installed
in the virtual machine.
• clipboard filetransfers enabled|disabled : speciﬁes if clipboard ﬁle transfers are
allowed between host and guest oses or not.
• draganddrop disabled|hosttoguest|guesttohost|bidirectional : selects the cur-
rent drag and drop mode being used between the host and the virtual machine. see chap-
ter 4.4, drag and drop, page 77. this requires that the guest additions be installed in the
virtual machine.
• vrde on|off : enables and disables the vrde server, if it is installed.
• vrdeport default|<ports> : changes the port or a range of ports that the vrde server
can bind to. default or 0 means port 3389, the standard port for rdp. see the description
for the --vrdeport option in chapter 8.8.5, remote machine settings, page 154.
• vrdeproperty "tcp/ports|address=<value>" : sets the port numbers and ip address
on the vm to which the vrde server can bind.
– for tcp/ports, <value> should be a port or a range of ports to which the vrde
server can bind. default or 0 means port 3389, the standard port for rdp. see the
description for the --vrdeport option in chapter 8.8.5, remote machine settings, page
154.
– for tcp/address, <value>: the ip address of the host network interface that the
vrde server will bind to. if speciﬁed, the server will accept connections only on the
speciﬁed host network interface. see the description for the --vrdeaddress option
in chapter 8.8.5, remote machine settings, page 154.
• vrdeproperty "videochannel/enabled|quality|downscaleprotection=<value>" :
sets the vrdp video redirection properties.
– for videochannel/enabled, <value> can be set to “1” switching the vrdp video
channel on. see chapter 7.1.9, vrdp video redirection, page 124.
– for videochannel/quality, <value> should be set between 10 and 100% inclusive,
representing a jpeg compression level on the vrde server video channel. lower
values mean lower quality but higher compression. see chapter 7.1.9, vrdp video
redirection, page 124.
– for videochannel/downscaleprotection, <value> can be set to “1” to enable the
videochannel downscale protection feature. when enabled, if a video’s size equals
the shadow buffer size, then it is regarded as a full screen video, and is displayed.
if its size is between fullscreen and the downscale threshold it is not displayed, as
it could be an application window, which would be unreadable when downscaled.
when the downscale protection feature is disabled, an attempt is always made to
display videos.
• vrdeproperty "client/disabledisplay|disableinput|disableaudio|disableusb=1" :
disables one of the vrde server features: display, input, audio, or usb. to reenable a fea-
ture, use “client/disabledisplay=“ for example. see chapter 7.1.10, vrdp customization,
page 125.

165

8 vboxmanage

• vrdeproperty "client/disableclipboard|disableupstreamaudio=1" . disables one
of the vrde server features: clipboard or upstreamaudio. to reenable a feature, use
“client/disableclipboard=“ for example. see chapter 7.1.10, vrdp customization, page
125.
• vrdeproperty "client/disablerdpdr=1" : disables the vrde server feature: rdp de-
vice redirection for smart cards. to reenable this feature, use “client/disablerdpr=“.
• vrdeproperty "h3dredirect/enabled=1" : enables the vrde server feature: 3d redi-
rection. to disable this feature, use “h3dredirect/enabled=“.
• vrdeproperty "security/method|servercertificate|serverprivatekey|cacertificate=<value>" :
sets the desired security method, path of the server certiﬁcate, path of the server private
key, and path of ca certiﬁcate, used for a connection.
– vrdeproperty "security/method=<value>" : sets the desired security method,
which is used for a connection. valid values are as follows:
∗ negotiate : both enhanced (tls) and standard rdp security connections are
allowed. the security method is negotiated with the client. this is the default
setting.
∗ rdp : only standard rdp security is accepted.
∗ tls : only enhanced rdp security is accepted. the client must support tls.
see chapter 7.1.6, rdp encryption, page 123.
– vrdeproperty "security/servercertificate=<value>" where <value> is the
absolute path of the server certiﬁcate. see chapter 7.1.6, rdp encryption, page 123.
– vrdeproperty "security/serverprivatekey=<value>" where <value> is the
absolute path of the server private key. see chapter 7.1.6, rdp encryption, page 123.
– vrdeproperty "security/cacertificate=<value>" where <value> is the abso-
lute path of the ca self signed certiﬁcate. see chapter 7.1.6, rdp encryption, page
123.
• vrdeproperty "audio/ratecorrectionmode|logpath=<value>" : sets the audio con-
nection mode, or path of the audio logﬁle.
– vrdeproperty "audio/ratecorrectionmode=<value>" where <value> is the de-
sired rate correction mode, allowed values are:
∗ vrdp_audio_mode_void : no mode speciﬁed, use to unset any audio mode al-
ready set.
∗ vrdp_audio_mode_rc : rate correction mode.
∗ vrdp_audio_mode_lpf : low pass ﬁlter mode.
∗ vrdp_audio_mode_cs : client sync mode to prevent underﬂow or overﬂow of the
client queue.
– vrdeproperty "audio/logpath=<value>" where <value> is the absolute path of
the audio log ﬁle.
• vrdevideochannelquality <percent> : sets the image quality for video redirection. see
chapter 7.1.9, vrdp video redirection, page 124.
• setvideomodehint : requests that the guest system change to a particular video mode.
this requires that the guest additions be installed, and will not work for all guest systems.
• screenshotpng : takes a screenshot of the guest display and saves it in png format.

166

8 vboxmanage

• recording on|off enables or disables the recording of a vm session into a webm/vp8
ﬁle. when this option value is on , recording begins when the vm session starts.
• recordingscreens all|screen-id [screen-id ...] enables you to specify which vm
screens to record. the recording for each screen that you specify is saved to its own ﬁle.
you cannot modify this setting while recording is enabled.
• recordingfile filename speciﬁes the ﬁle in which to save the recording. you cannot
modify this setting while recording is enabled.
• recordingvideores widthxheight speciﬁes the resolution of the recorded video in pix-
els. you cannot modify this setting while recording is enabled.
• recordingvideorate bit-rate speciﬁes the bit rate of the video in kilobits per second.
increasing this value improves the appearance of the video at the cost of an increased ﬁle
size. you cannot modify this setting while recording is enabled.
• recordingvideofps fps speciﬁes the maximum number of video frames per second
(fps) to record. frames that have a higher frequency are skipped. increasing this value
reduces the number of skipped frames and increases the ﬁle size. you cannot modify this
setting while recording is enabled.
• recordingmaxtime seconds speciﬁes the maximum amount time to record in seconds.
the recording stops after the speciﬁed number of seconds elapses. if this value is zero, the
recording continues until you stop the recording.
• recordingmaxsize mb speciﬁes the maximum size of the recorded video ﬁle in megabytes.
the recording stops when the ﬁle reaches the speciﬁed size. if this value is zero, the
recording continues until you stop the recording. you cannot modify this setting while
recording is enabled.
• recordingopts keyword=value[,keyword=value ...] speciﬁes additional recording
options in a comma-separated keyword-value format. for example, foo=bar,a=b . you
cannot modify this setting while recording is enabled.
only use this option only if you are an advanced user. for information about keywords, see
oracle vm virtualbox programming guide and reference.
• setcredentials : used for remote logins on windows guests. see chapter 9.1, automated
guest logins, page 242.
• teleport --host <name> --port <port> : conﬁgures a vm as a target for teleporting.
<name> speciﬁes the virtual machine name. <port> speciﬁes the port on the virtual
machine which should listen for teleporting requests from other virtual machines. it can
be any free tcp/ip port number, such as 6000. see chapter 7.2, teleporting, page 125.
– --maxdowntime <msec> : speciﬁes the maximum downtime, in milliseconds, for the
teleporting target vm. optional.
– --password <password> : the teleporting request will only succeed if the source
machine speciﬁes the same password as the one given with this command. optional.
– --passwordfile <password file> : the teleporting request will only succeed if the
source machine speciﬁes the same password as the one speciﬁed in the password ﬁle
with the path speciﬁed with this command. use stdin to read the password from
stdin. optional.
• plugcpu|unplugcpu <id> : if cpu hot-plugging is enabled, this setting adds and removes
a virtual cpu to the virtual machine. <id> speciﬁes the index of the virtual cpu to be added
or removed and must be a number from 0 to the maximum number of cpus conﬁgured.
cpu 0 can never be removed.

167

8 vboxmanage

• the cpuexecutioncap <1-100> : controls how much cpu time a virtual cpu can use. a
value of 50 implies a single virtual cpu can use up to 50% of a single host cpu.
• vm-process-priority default|flat|low|normal|high : changes the priority scheme
of the vm process. see chapter 8.12, vboxmanage startvm, page 162.
• webcam attach <path|alias> [<keyword=value>[;<keyword=value>...]] : at-
taches a webcam to a running vm. specify the absolute path of the webcam
on the host operating system, or use its alias, obtained by using the command:
vboxmanage list webcams .
note that alias ’.0’ means the default video input device on the host operating system, ’.1’,
’.2’, etc. mean ﬁrst, second, etc. video input device. the device order is host-speciﬁc.
the optional settings parameter is a ; delimited list of name-value pairs, enabling conﬁgu-
ration of the emulated webcam device.
the following settings are supported:
maxframerate: speciﬁes the highest rate in frames per second, at which video frames
are sent to the guest. higher frame rates increase cpu load, so this setting can be useful
when there is a need to reduce cpu load. the default setting is no maximum limit , thus
enabling the guest to use all frame rates supported by the host webcam.
maxpayloadtransfersize: speciﬁes the maximum number of bytes the emulated webcam
can send to the guest in one buffer. the default setting is 3060 bytes, which is used by
some webcams. higher values can slightly reduce cpu load, if the guest is able to use
larger buffers. note that higher maxpayloadtransfersize values may be not supported by
some guest operating systems.
• webcam detach <path|alias> : detaches a webcam from a running vm. specify the ab-
solute path of the webcam on the host, or use its alias obtained from the webcam list
command.
please note the following points, relating to speciﬁc host operating systems:
– windows hosts: when the webcam device is detached from the host, the emulated
webcam device is automatically detached from the guest.
– mac os x hosts: os x version 10.7 or newer is required.
when the webcam device is detached from the host, the emulated webcam de-
vice remains attached to the guest and must be manually detached using the
vboxmanage controlvm webcam detach command.
– linux hosts: when the webcam is detached from the host, the emulated webcam
device is automatically detached from the guest only if the webcam is streaming
video. if the emulated webcam is inactive, it should be manually detached using
the vboxmanage controlvm webcam detach command.
• webcam list : lists webcams attached to the running vm. the output is a list of ab-
solute paths or aliases that were used for attaching the webcams to the vm using the
webcam attach command.
• addencpassword <id> <password file>|- [--removeonsuspend <yes|no>] : sup-
plies an encrypted vm speciﬁed by <id> with the encryption password to enable a headless
start. either specify the absolute path of a password ﬁle on the host ﬁle system: <password
ﬁle>, or use - to instruct vboxmanage to prompt the user for the encryption password.
--removeonsuspend <yes|no> : speciﬁes whether to remove the passsword or keep the
password in vm memory when the vm is suspended. if the vm has been suspended and
the password has been removed, the user needs to resupply the password before the vm

168

8 vboxmanage

can be resumed. this feature is useful in cases where the user does not want the password
to be stored in vm memory, and the vm is suspended by a host suspend event.

note: on oracle vm virtualbox versions 5.0 and later, data stored on hard disk images
can be transparently encrypted for the guest. oracle vm virtualbox uses the aes algo-
rithm in xts mode and supports 128 or 256 bit data encryption keys (dek). the dek
is stored encrypted in the medium properties, and is decrypted during vm startup by
supplying the encryption password.

the vboxmanage encryptmedium command is used to create a dek encrypted medium.
see chapter 9.28.2, encrypting disk images, page 289. when starting an encrypted vm from
the oracle vm virtualbox gui, the user will be prompted for the encryption password.
for a headless encrypted vm start, use the following command:

vboxmanage startvm "vmname" --type headless

then supply the required encryption password as follows:

vboxmanage "vmname" controlvm "vmname" addencpassword ...

• removeencpassword <id> : removes encryption password authorization for password
<id> for all encrypted media attached to the vm.
• removeallencpasswords : removes encryption password authorization for all passwords
for all encrypted media attached to the vm.
• changeuartmode <1-n> : changes the connection mode for a given virtual serial port.

8.14 vboxmanage discardstate

this command discards the saved state of a virtual machine which is not currently running. this
will cause the vm’s operating system to restart next time you start it. this is the equivalent of
pulling out the power cable on a physical machine, and should be avoided if possible.

8.15 vboxmanage adoptstate

if you have a saved state ﬁle ( .sav ) that is separate from the vm conﬁguration, you can use this
command to adopt the ﬁle. this will change the vm to saved state and when you start it, oracle
vm virtualbox will attempt to restore it from the saved state ﬁle you indicated. this command
should only be used in special setups.

8.16 vboxmanage closemedium

this command removes a hard disk, dvd, or ﬂoppy image from a oracle vm virtualbox media
registry.

vboxmanage closemedium
[disk|dvd|floppy] <uuid|filename>
[--delete]

optionally, you can request that the image be deleted. you will get appropriate diagnostics
that the deletion failed, however the image will become unregistered in any case.

169

8 vboxmanage

8.17 vboxmanage storageattach

this command attaches, modiﬁes, and removes a storage medium connected to a storage con-
troller that was previously added with the storagectl command. the syntax is as follows:

vboxmanage storageattach
<uuid|vmname>
--storagectl <name>
[--port <number>]
[--device <number>]
[--type dvddrive|hdd|fdd]
[--medium none|emptydrive|additions|
<uuid>|<filename>|host:<drive>|iscsi]
[--mtype normal|writethrough|immutable|shareable
readonly|multiattach]
[--comment <text>]
[--setuuid <uuid>]
[--setparentuuid <uuid>]
[--passthrough on|off]
[--tempeject on|off]
[--nonrotational on|off]
[--discard on|off]
[--hotpluggable on|off]
[--bandwidthgroup name|none]
[--forceunmount]
[--server <name>|<ip>]
[--target <target>]
[--tport <port>]
[--lun <lun>]
[--encodedlun <lun>]
[--username <username>]
[--password <password>]
[--passwordfile <file>]
[--initiator <initiator>]
[--intnet]

a number of parameters are commonly required. some parameters are required only for iscsi
targets.
the common parameters are as follows:

uuid|vmname

the vm uuid or vm name. mandatory.

--storagectl

name of the storage controller. mandatory. the list of the storage controllers currently
attached to a vm can be obtained with vboxmanage showvminfo . see chapter 8.5, vbox-
manage showvminfo, page 144.

--port

the number of the storage controller’s port which is to be modiﬁed. mandatory, unless the
storage controller has only a single port.

--device

the number of the port’s device which is to be modiﬁed. mandatory, unless the storage
controller has only a single device per port.

170

8 vboxmanage

--type

deﬁne the type of the drive to which the medium is being attached, detached, or modiﬁed.
this argument can only be omitted if the type of medium can be determined from either
the medium given with the --medium argument or from a previous medium attachment.

--medium

speciﬁes what is to be attached. the following values are supported:
• none : any existing device should be removed from the given slot.
• emptydrive : for a virtual dvd or ﬂoppy drive only, this makes the device slot behave
like a removeable drive into which no media has been inserted.
• additions : for a virtual dvd drive only, this attaches the virtualbox guest additions
image to the given device slot.
• if a uuid is speciﬁed, it must be the uuid of a storage medium that is already known
to oracle vm virtualbox. for example, because it has been attached to another virtual
machine. see chapter 8.4, vboxmanage list, page 142 for details of how to list known
media. this medium is then attached to the given device slot.
• if a ﬁlename is speciﬁed, it must be the full path of an existing disk image in iso, raw,
vdi, vmdk, or other format. the disk image is then attached to the given device slot.
• host:<drive> : for a virtual dvd or ﬂoppy drive only, this connects the given device
slot to the speciﬁed dvd or ﬂoppy drive on the host computer.
• iscsi : for virtual hard disks only, this is used for specifying an iscsi target. in this
case, additional parameters must be given. these are described below.
some of the above changes, in particular for removeable media such as ﬂoppies and
cds/dvds, can be effected while a vm is running. others, such as device changes or
changes in hard disk device slots, require the vm to be powered off.

--mtype

deﬁnes how this medium behaves with respect to snapshots and write operations. see
chapter 5.4, special image write modes, page 94.

--comment

an optional description that you want to have stored with this medium. for example, for
an iscsi target, “big storage server downstairs”. this is purely descriptive and not needed
for the medium to function correctly.

--setuuid, --setparentuuid

modiﬁes the uuid or parent uuid of a medium before attaching it to a vm. this is an
expert option. inappropriate use can make the medium unusable or lead to broken vm
conﬁgurations if any other vm is referring to the same media already. the most frequently
used variant is --setuuid "" , which assigns a new random uuid to an image. this option
is useful for resolving duplicate uuid errors if you duplicated an image using a ﬁle copy
utility.

--passthrough

for a virtual dvd drive only, you can enable dvd writing support. this feature is currently
experimental, see chapter 5.9, cd/dvd support, page 99.

171

8 vboxmanage

--tempeject

for a virtual dvd drive only, you can conﬁgure the behavior for guest-triggered medium
eject. if this is set to on, the eject has only a temporary effect. if the vm is powered off and
restarted the originally conﬁgured medium will be still in the drive.

--nonrotational

enables you to enable the non-rotational ﬂag for virtual hard disks. some guests, such as
windows 7 or later, treat such disks like ssds and do not perform disk fragmentation on
such media.

--discard

enables the auto-discard feature for a virtual hard disks. this speciﬁes that a vdi image will
be shrunk in response to the trim command from the guest os. the following requirements
must be met:
• the disk format must be vdi.
• the size of the cleared area must be at least 1 mb.
• oracle vm virtualbox will only trim whole 1 mb blocks. the vdis themselves are
organized into 1 mb blocks, so this will only work if the space being trimmed is at
least a 1 mb contiguous block at a 1 mb boundary. on windows, occasional defrag-
mentation with defrag.exe /d , or on linux running btrfs filesystem defrag as
a background cron job may be beneﬁcial.

note: the guest os must be conﬁgured to issue the trim command, and typically
this means that the guest os is made to see the disk as an ssd. ext4 supports the -o
discard mount ﬂag. mac os x probably requires additional settings. windows should
automatically detect and support ssds, at least in versions 7, 8, and 10. the linux
exfat driver from samsung supports the trim command.

it is unclear whether microsoft’s implementation of exfat supports this feature, even
though that ﬁle system was originally designed for ﬂash.
alternatively, there are other methods to issue trim. for example, the linux fstrim com-
mand, part of the util-linux package. earlier solutions required a user to zero out unused
areas, using zerofree or similar, and to compact the disk. this is only possible when the
vm is ofﬂine.

--bandwidthgroup

sets the bandwidth group to use for the given device. see chapter 5.8, limiting bandwidth
for disk images, page 99.

--forceunmount

for a virtual dvd or ﬂoppy drive only, this forcibly unmounts the dvd/cd/floppy or
mounts a new dvd/cd/floppy even if the previous one is locked down by the guest for
reading. see chapter 5.9, cd/dvd support, page 99.

when iscsi is used with the --medium parameter for iscsi support, additional parameters
must or can be used. see also chapter 5.10, iscsi servers, page 100.

172

8 vboxmanage

--server

the host name or ip address of the iscsi target. required.

--target

target name string. this is determined by the iscsi target and used to identify the storage
resource. required.

--tport

tcp/ip port number of the iscsi service on the target. optional.

--lun

logical unit number of the target resource. optional. often, this value is zero.

--encodedlun

hex-encoded logical unit number of the target resource. optional. often, this value is
zero.

--username, --password, --passwordfile

username and password, called the initiator secret, for target authentication, if required.
optional.

note: username and password are stored without encryption, in clear text, in the
xml machine conﬁguration ﬁle if no settings password is provided. when a settings
password is speciﬁed for the ﬁrst time, the password is stored in encrypted form. as
an alternative to providing the password on the command line, a reference to a ﬁle
containing the text can be provided using the passwordfile option.

--initiator

iscsi initiator. optional.
microsoft iscsi initiator is a system, such as a server that attaches to an ip network and
initiates requests and receives responses from an iscsi target. the san components in
microsoft iscsi initiator are largely analogous to fibre channel san components, and
they include the following:
• to transport blocks of iscsi commands over the ip network, an iscsi driver must be
installed on the iscsi host. an iscsi driver is included with microsoft iscsi initiator.
• a gigabit ethernet adapter that transmits 1000 megabits per second (mbps) is recom-
mended for the connection to an iscsi target. like standard 10/100 adapters, most
gigabit adapters use a preexisting category 5 or category 6e cable. each port on the
adapter is identiﬁed by a unique ip address.
• an iscsi target is any device that receives iscsi commands. the device can be an
end node, such as a storage device, or it can be an intermediate device, such as a
network bridge between ip and fibre channel devices. each port on the storage array
controller or network bridge is identiﬁed by one or more ip addresses

173

8 vboxmanage

--intnet

if speciﬁed, connect to the iscsi target using internal networking. this needs further
conﬁguration, see chapter 9.7.3, access iscsi targets using internal networking, page 254.

8.18 vboxmanage storagectl

this command attaches, modiﬁes, and removes a storage controller. after this, virtual media can
be attached to the controller with the storageattach command.
the syntax for this command is as follows:

vboxmanage storagectl
<uuid|vmname>
--name <name>
[--add ide|sata|scsi|floppy|sas|usb|pcie]
[--controller lsilogic|lsilogicsas|buslogic|
intelahci|piix3|piix4|ich6|i82078|
usb|nvme|virtio]
[--portcount <1-30>]
[--hostiocache on|off]
[--bootable on|off]
[--rename <name>]
[--remove]

the parameters are as follows:

uuid|vmname

the vm uuid or vm name. mandatory.

--name

speciﬁes the name of the storage controller. mandatory.

--add

speciﬁes the type of the system bus to which the storage controller must be connected.

--controller

enables a choice of chipset type being emulated for the given storage controller.

--portcount

this speciﬁes the number of ports the storage controller should support.

--hostiocache

conﬁgures the use of the host i/o cache for all disk images attached to this storage con-
troller. see chapter 5.7, host input/output caching, page 98.

--bootable

speciﬁes whether this controller is bootable.

174

8 vboxmanage

--rename

speciﬁes a new name for the storage controller.

--remove

removes the storage controller from the vm conﬁguration.

8.19 vboxmanage bandwidthctl

this command creates, deletes, modiﬁes, and shows bandwidth groups of the given virtual ma-
chine.

vboxmanage bandwidthctl
<uuid|vmname>
add <name> --type disk|network --limit <mbps>[k|m|g|k|m|g] |
set <name> --limit <mbps>[k|m|g|k|m|g] |
remove <name> |
list [--machinereadable]

the following subcommands are available:

• add : creates a new bandwidth group of a given type.
• set : modiﬁes the limit for an existing bandwidth group.
• remove : deletes a bandwidth group.
• list : shows all bandwidth groups deﬁned for the given vm. use the --machinereadable
option to produce the same output, but in machine readable format. this is of the form:
name=“value” on a line by line basis.

the parameters are as follows:

uuid|vmname

the vm uuid or vm name. mandatory.

--name

name of the bandwidth group. mandatory.

--type

type of the bandwidth group. mandatory. two types are supported: disk and network .
see chapter 5.8, limiting bandwidth for disk images, page 99 or chapter 6.10, limiting
bandwidth for network input/output, page 114 for the description of a particular type.

--limit

speciﬁes the limit for the given bandwidth group. this can be changed while the vm is
running. the default unit is megabytes per second. the unit can be changed by specifying
one of the following sufﬁxes: k for kilobits per second, m for megabits per second, g for
gigabits per second, k for kilobytes per second, m for megabytes per second, g for gigabytes
per second.

175

8 vboxmanage

note: the network bandwidth limits apply only to the trafﬁc being sent by virtual
machines. the trafﬁc being received by vms is unlimited.

note: to remove a bandwidth group it must not be referenced by any disks or adapters
in the running vm.

8.20 vboxmanage showmediuminfo

this command shows information about a medium, notably its size, its size on disk, its type, and
the virtual machines which use it.

note: for compatibility with earlier versions of oracle vm virtualbox,
the showvdiinfo command is also supported and mapped internally to the
showmediuminfo command.

vboxmanage showmediuminfo [disk|dvd|floppy] <uuid|filename>

the medium must be speciﬁed either by its uuid, if the medium is registered, or by its ﬁle-
name. registered images can be listed using vboxmanage list hdds , vboxmanage list dvds ,
or vboxmanage list floppies , as appropriate. see chapter 8.4, vboxmanage list, page 142.

8.21 vboxmanage createmedium

this command creates a new medium. the syntax is as follows:

vboxmanage createmedium
[disk|dvd|floppy] --filename <filename>
[--size <megabytes>|--sizebyte <bytes>]
[--diffparent <uuid>|<filename>
[--format vdi|vmdk|vhd] (default: vdi)
[--variant standard,fixed,split2g,stream,esx]

the parameters are as follows:

--filename <filename>

speciﬁes a ﬁle name <ﬁlename> as an absolute path on the host ﬁle system. mandatory.

--size <megabytes>

speciﬁes the image capacity, in 1 mb units. optional.

--diffparent <uuid>|<filename>

speciﬁes the differencing image parent, either as a uuid or by the absolute pathname of
the ﬁle on the host ﬁle system. useful for sharing a base box disk image among several
vms.

--format vdi|vmdk|vhd

speciﬁes the ﬁle format for the output ﬁle.
default format is vdi. optional.
available options are vdi, vmdk, vhd. the

176

8 vboxmanage

--variant

speciﬁes any required ﬁle format variants for the output ﬁle. this is a comma-separated
list of variant ﬂags. options are standard,fixed,split2g,stream,esx. not all combinations
are supported, and specifying mutually incompatible ﬂags results in an error message.
optional.

note: for compatibility with earlier versions of oracle vm virtualbox, the
createvdi and createhd commands are also supported and mapped internally to
the createmedium command.

8.22 vboxmanage modifymedium

with the modifymedium command, you can change the characteristics of a disk image after it
has been created.

vboxmanage modifymedium
[disk|dvd|floppy] <uuid|filename>
[--type normal|writethrough|immutable|shareable|
readonly|multiattach]
[--autoreset on|off]
[--property <name=[value]>]
[--compact]
[--resize <megabytes>|--resizebyte <bytes>]
[--move <path>]
[--setlocation <path>]

note: for compatibility with earlier versions of oracle vm virtualbox, the
modifyvdi and modifyhd commands are also supported and mapped internally to
the modifymedium command.

the disk image to modify must be speciﬁed either by its uuid, if the medium is registered, or
by its ﬁlename. registered images can be listed using vboxmanage list hdds , see chapter 8.4,
vboxmanage list, page 142. a ﬁlename must be speciﬁed as a valid path, either as an absolute
path or as a relative path starting from the current directory.
the following options are available:

• with the --type argument, you can change the type of an existing image between the
normal, immutable, write-through and other modes. see chapter 5.4, special image write
modes, page 94.
• for immutable hard disks only, the --autoreset on|off option determines whether the
disk is automatically reset on every vm startup. see chapter 5.4, special image write modes,
page 94. by default, autoreset is on.
• the --compact option can be used to compact disk images. compacting removes blocks
that only contains zeroes. using this option will shrink a dynamically allocated image. it
will reduce the physical size of the image without affecting the logical size of the virtual
disk. compaction works both for base images and for differencing images created as part
of a snapshot.
for this operation to be effective, it is required that free space in the guest system ﬁrst be
zeroed out using a suitable software tool. for windows guests, you can use the sdelete

177

8 vboxmanage

tool provided by microsoft. run sdelete -z in the guest to zero the free disk space, before
compressing the virtual disk image. for linux, use the zerofree utility which supports
ext2/ext3 ﬁlesystems. for mac os x guests, use the diskutil secureerase freespace
0 / command from an elevated terminal.
please note that compacting is currently only available for vdi images. a similar effect can
be achieved by zeroing out free blocks and then cloning the disk to any other dynamically
allocated format. you can use this workaround until compacting is also supported for disk
formats other than vdi.
• the --resize x option, where x is the desired new total space in megabytes enables you
to change the capacity of an existing image. this adjusts the logical size of a virtual disk
without affecting the physical size much.
this option currently works only for vdi and vhd formats, and only for the dynamically
allocated variants. it can only be used to expand, but not shrink, the capacity. for example,
if you originally created a 10 gb disk which is now full, you can use the --resize 15360
command to change the capacity to 15 gb (15,360 mb) without having to create a new
image and copy all data from within a virtual machine. note however that this only changes
the drive capacity. you will typically next need to use a partition management tool inside
the guest to adjust the main partition to ﬁll the drive.
the --resizebyte x option does almost the same thing, except that x is expressed in
bytes instead of megabytes.
• the --move <path> option can be used to relocate a medium to a different location
<path> on the host ﬁle system. the path can be either relative to the current directory or
absolute.
• the --setlocation <path> option can be used to set the new location <path> of the
medium on the host ﬁle system if the medium has been moved for any reasons. the path
can be either relative to the current directory or absolute.

note: the new location is used as is, without any sanity checks. the user is responsible
for setting the correct path.

8.23 vboxmanage clonemedium

this command duplicates a virtual disk, dvd, or ﬂoppy medium to a new medium, usually an
image ﬁle, with a new unique identiﬁer (uuid). the new image can be transferred to another
host system or reimported into oracle vm virtualbox using the virtual media manager. see
chapter 5.3, the virtual media manager, page 92 and chapter 5.6, cloning disk images, page 98.
the syntax is as follows:

vboxmanage clonemedium [disk|dvd|floppy] <uuid|inputfile> <uuid|outputfile>

[--format vdi|vmdk|vhd|raw|<other>]
[--variant standard,fixed,split2g,stream,esx]
[--existing]

the medium to clone as well as the target image must be described either by its uuids,
if the mediums are registered, or by its ﬁlename. registered images can be listed by
vboxmanage list hdds . see chapter 8.4, vboxmanage list, page 142. a ﬁlename must be
speciﬁed as valid path, either as an absolute path or as a relative path starting from the current
directory.
the following options are available:

178

8 vboxmanage

--format

set a ﬁle format for the output ﬁle different from the ﬁle format of the input ﬁle.

--variant

set a ﬁle format variant for the output ﬁle. this is a comma-separated list of variant ﬂags.
not all combinations are supported, and specifying inconsistent ﬂags will result in an error
message.

--existing

perform the clone operation to an already existing destination medium. only the portion
of the source medium which ﬁts into the destination medium is copied. this means if
the destination medium is smaller than the source only a part of it is copied, and if the
destination medium is larger than the source the remaining part of the destination medium
is unchanged.

note: for compatibility with earlier versions of oracle vm virtualbox, the clonevdi
and clonehd commands are still supported and mapped internally to the clonemedium
command.

8.24 vboxmanage mediumproperty

this command sets, gets, or deletes a medium property. the syntax is as follows:

vboxmanage mediumproperty [disk|dvd|floppy] set <uuid|filename>
<property> <value>

• use <disk|dvd|floppy> to optionally specify the type of medium: disk (hard drive), dvd,
or ﬂoppy.
• use <uuid|filename> to supply either the uuid or absolute path of the medium or image.
• use <property> to supply the name of the property.
• use <value> to supply the property value.

vboxmanage mediumproperty [disk|dvd|floppy] get <uuid|filename>
<property>

• use <disk|dvd|floppy> to optionally specify the type of medium: disk (hard drive), dvd,
or ﬂoppy.
• use <uuid|filename> to supply either the uuid or absolute path of the medium or image.
• use <property> to supply the name of the property.

vboxmanage mediumproperty [disk|dvd|floppy] delete <uuid|filename>
<property>

• use <disk|dvd|floppy> to optionally specify the type of medium: disk (hard drive), dvd,
or ﬂoppy.
• use <uuid|filename> to supply either the uuid or absolute path of the medium or image.
• use <property> to supply the name of the property.

179

8 vboxmanage

8.25 vboxmanage encryptmedium
this command is used to create a dek encrypted medium or image. see chapter 9.28.2, encrypt-
ing disk images, page 289.
the syntax is as follows:

vboxmanage encryptmedium <uuid|filename>
[--newpassword <file|->]
[--oldpassword <file|->]
[--cipher <cipher id>]
[--newpasswordid <password id>]

• use <uuid|filename> to supply the uuid or absolute path of the medium or image to be
encrypted.
• use --newpassword <file|-> to supply a new encryption password. either specify the
absolute pathname of a password ﬁle on the host operating system, or - to prompt you for
the password on the command line. always use the --newpasswordid option with this
option.
• use --oldpassword <file|-> to supply any old encryption password. either specify the
absolute pathname of a password ﬁle on the host operating system, or - to prompt you for
the old password on the command line.
use this option to gain access to an encrypted medium or image to either change its pass-
word using --newpassword or change its encryption using --cipher .
• use --cipher <cipher> to specify the cipher to use for encryption. this can be either
aes-xts128-plain64 or aes-xts256-plain64 .
use this option to change any existing encryption on the medium or image, or to set up
new encryption on it for the ﬁrst time.
• use --newpasswordid <password id> to supply the new password identiﬁer. this can
be chosen by the user, and is used for correct identiﬁcation when supplying multiple pass-
words during vm startup.
if the user uses the same password when encrypting multiple images and also the same
password identiﬁer, the user needs to supply the password only once during vm startup.

8.26 vboxmanage checkmediumpwd

this command is used to check the current encryption password on a dek encrypted medium or
image. see chapter 9.28.2, encrypting disk images, page 289.
the syntax is as follows:

vboxmanage checkmediumpwd <uuid|filename>
<pwd file|->

• use <uuid|filename> to supply the uuid or absolute path of the medium or image to be
checked.
• use <pwd file|-> to supply the password identiﬁer to be checked. either specify the
absolute pathname of a password ﬁle on the host operating system, or - to prompt you for
the password on the command line.

180

8 vboxmanage

8.27 vboxmanage convertfromraw

this command converts a raw disk image to an oracle vm virtualbox disk image (vdi) ﬁle. the
syntax is as follows:

vboxmanage convertfromraw <filename> <outputfile>
[--format vdi|vmdk|vhd]
[--variant standard,fixed,split2g,stream,esx]
[--uuid <uuid>]
vboxmanage convertfromraw stdin <outputfile> <bytes>
[--format vdi|vmdk|vhd]
[--variant standard,fixed,split2g,stream,esx]
[--uuid <uuid>]

the parameters are as follows:

--bytes

the size of the image ﬁle, in bytes, provided through stdin.

--format

select the disk image format to create. the default format is vdi. other options are vmdk
and vhd.

--variant

choose a ﬁle format variant for the output ﬁle. this is a comma-separated list of variant
ﬂags. not all combinations are supported, and specifying inconsistent ﬂags will result in
an error message.

--uuid

specify the uuid of the output ﬁle.

the stdin form of the command forces vboxmanage to read the content of the disk image
from standard input. this useful when using the command in a pipe.

note: for compatibility with earlier versions of oracle vm virtualbox, the convertdd
command is also supported and mapped internally to the convertfromraw command.

8.28 vboxmanage getextradata/setextradata

these commands enable you to attach and retrieve string data for a virtual machine or for an
oracle vm virtualbox conﬁguration, by specifying global instead of a virtual machine name.
you must specify a keyword as a text string to associate the data with, which you can later use
to retrieve it. for example:

vboxmanage setextradata fedora5 installdate 2006.01.01
vboxmanage setextradata suse10 installdate 2006.02.02

this example would associate the string “2006.01.01” with the keyword installdate for the
virtual machine fedora5, and “2006.02.02” on the machine suse10. you could then retrieve the
information as follows:

181

8 vboxmanage

vboxmanage getextradata fedora5 installdate

this would return the following:

virtualbox command line management interface version <version-number>
(c) 2005-2018 oracle corporation
all rights reserved.

value: 2006.01.01

you could retrieve the information for all keywords as follows:

vboxmanage getextradata fedora5 enumerate

to remove a keyword, the setextradata command must be run without specifying data, only
the keyword. for example:

vboxmanage setextradata fedora5 installdate

8.29 vboxmanage setproperty

this command is used to change global settings which affect the entire oracle vm virtualbox in-
stallation. some of these correspond to the settings in the global settings dialog in the graphical
user interface. the following properties are available:

machinefolder

speciﬁes the default folder in which virtual machine deﬁnitions are kept. see chapter 10.1,
where oracle vm virtualbox stores its files, page 303.

hwvirtexclusive

speciﬁes whether oracle vm virtualbox will make exclusive use of the hardware virtual-
ization extensions (intel vt-x or amd-v) of the host system’s processor. see chapter 10.3,
hardware virtualization, page 307. if you wish to share these extensions with other hy-
pervisors running at the same time, you must disable this setting. doing so has negative
performance implications.

vrdeauthlibrary

speciﬁes which library to use when external authentication has been selected for a partic-
ular virtual machine. see chapter 7.1.5, rdp authentication, page 122.

websrvauthlibrary

speciﬁes which library the web service uses to authenticate users. for details about the
oracle vm virtualbox web service, see the oracle vm virtualbox sdk reference, chapter
11, oracle vm virtualbox programming interfaces, page 310.

vrdeextpack

speciﬁes which library implements the virtualbox remote desktop extension.

loghistorycount

selects how many rotated vm logs are retained.

182

8 vboxmanage

autostartdbpath

selects the path to the autostart database.
during system boot, page 284.
see chapter 9.21, starting virtual machines

defaultfrontend

selects the global default vm frontend setting. see chapter 8.12, vboxmanage startvm,
page 162.

logginglevel

conﬁgures the vboxsvc release logging details. see http://www.virtualbox.org/
wiki/vboxlogging .

proxymode

conﬁgures the mode for an http proxy server.

proxyurl

conﬁgures the url for an http proxy server. used when a manual proxy is conﬁgured
using the manual setting of the proxymode property.

8.30 vboxmanage usbﬁlter add/modify/remove

vboxmanage usbfilter
add <index,0-n>
--target <uuid|vmname>global
--name <string>
--action ignore|hold (global filters only)
[--active yes|no (yes)]
[--vendorid <xxxx> (null)]
[--productid <xxxx> (null)]
[--revision <iiff> (null)]
[--manufacturer <string> (null)]
[--product <string> (null)]
[--remote yes|no (null, vm filters only)]
[--serialnumber <string> (null)]
[--maskedinterfaces <xxxxxxxx>]

vboxmanage usbfilter
modify <index,0-n>
--target <uuid|vmname>global
[--name <string>]
[--action ignore|hold (global filters only)]
[--active yes|no]
[--vendorid <xxxx>]
[--productid <xxxx>]
[--revision <iiff>]
[--manufacturer <string>]
[--product <string>]
[--remote yes|no (null, vm filters only)]
[--serialnumber <string>]
[--maskedinterfaces <xxxxxxxx>]

vboxmanage usbfilter
remove <index,0-n>
--target <uuid|vmname>global

183

8 vboxmanage

the usbfilter commands are used for working with usb ﬁlters in virtual machines, or global
ﬁlters which affect the whole oracle vm virtualbox setup. global ﬁlters are applied before
machine-speciﬁc ﬁlters, and may be used to prevent devices from being captured by any virtual
machine. global ﬁlters are always applied in a particular order, and only the ﬁrst ﬁlter which
ﬁts a device is applied. for example, if the ﬁrst global ﬁlter says to hold, or make available, a
particular kingston memory stick device and the second ﬁlter says to ignore all kingston devices.
that particular kingston memory stick will be available to any machine with the appropriate
ﬁlter, but no other kingston device will.
when creating a usb ﬁlter using usbfilter add , you must supply three or four mandatory
parameters. the index speciﬁes the position in the list at which the ﬁlter should be placed. if
there is already a ﬁlter at that position, then it and the following ones will be shifted back one
place. otherwise, the new ﬁlter will be added onto the end of the list. the target parameter
selects the virtual machine that the ﬁlter should be attached to or use global to apply it to all
virtual machines. name is a name for the new ﬁlter. for global ﬁlters, action says whether
to allow vms access to devices that ﬁt the ﬁlter description (hold) or not to give them access
(ignore). in addition, you should specify parameters to ﬁlter by. you can ﬁnd the parameters
for devices attached to your system using vboxmanage list usbhost . finally, you can specify
whether the ﬁlter should be active. for local ﬁlters, whether they are for local devices, remote
devices over an rdp connection, or either.
when you modify a usb ﬁlter using usbfilter modify , you must specify the ﬁlter by
index and by target, which is either a virtual machine or global . see the output of
vboxmanage list usbfilters to ﬁnd global ﬁlter indexes and vboxmanage showvminfo to
ﬁnd indexes for individual machines. the properties which can be changed are the same as for
usbfilter add . to remove a ﬁlter, use usbfilter remove and specify the index and the target.
the following is a list of the additional usbfilter add and usbfilter modify options, with
details of how to use them.

• --action ignore|hold : speciﬁes whether devices that ﬁt the ﬁlter description are al-
lowed access by machines (hold), or have access denied (ignore). applies to global ﬁlters
only.
• --active yes|no : speciﬁes whether the usb filter is active or temporarily disabled. for
usbfilter create the default is active.
• --vendorid <xxxx>|"" : speciﬁes a vendor id ﬁlter. the string representation for an exact
match has the form xxxx, where x is the hexadecimal digit, including leading zeroes.
• --productid <xxxx>|"" : speciﬁes a product id ﬁlter. the string representation for an
exact match has the form xxxx, where x is the hexadecimal digit, including leading zeroes.
• --revision <iiff>|"" : speciﬁes a revision id ﬁlter. the string representation for an
exact match has the form iiff, where i is the decimal digit of the integer part of the revision,
and f is the decimal digit of its fractional part, including leading and trailing zeros. note
that for interval ﬁlters, it is best to use the hexadecimal form, because the revision is stored
as a 16-bit packed bcd value. therefore, the expression int:0x0100-0x0199 will match
any revision from 1.0 to 1.99 inclusive.
• --manufacturer <string>|"" : speciﬁes a manufacturer id ﬁlter, as a string.
• --product <string>|"" : speciﬁes a product id ﬁlter, as a string.
• --remote yes|no"" : speciﬁes a remote ﬁlter, indicating whether the device is physically
connected to a remote vrde client or to a local host machine. applies to vm ﬁlters only.
• --serialnumber <string>|"" : speciﬁes a serial number ﬁlter, as a string.

184

8 vboxmanage

• --maskedinterfaces <xxxxxxxx> : speciﬁes a masked interface ﬁlter, for hiding one or
more usb interfaces from the guest. the value is a bit mask where the set bits correspond
to the usb interfaces that should be hidden, or masked off. this feature only works on
linux hosts.

8.31 vboxmanage guestproperty

the guestproperty commands enable you to get or set properties of a running virtual machine.
see chapter 4.7, guest properties, page 81. guest properties are arbitrary keyword-value string
pairs which can be written to and read from by either the guest or the host, so they can be
used as a low-volume communication channel for strings, provided that a guest is running and
has the guest additions installed. in addition, a number of values whose keywords begin with
/virtualbox/ are automatically set and maintained by the guest additions.
the following subcommands are available, where <vm> can either be a vm name or a vm
uuid, as with the other vboxmanage commands:
• enumerate <vm> [--patterns <pattern>] : lists all the guest properties that are avail-
able for the given vm, including the value. this list will be very limited if the guest’s
service process cannot be contacted, for example because the vm is not running or the
guest additions are not installed.
if --patterns <pattern> is speciﬁed, it acts as a ﬁlter to only list properties that match
the given pattern. the pattern can contain the following wildcard characters:
– * (asterisk): represents any number of characters. for example, “ /virtualbox* “
would match all properties beginning with “/virtualbox”.
– ? (question mark): represents a single arbitrary character. for example, “ fo? “ would
match both “foo” and “for”.
– | (pipe symbol): can be used to specify multiple alternative patterns. for example,
“ s*|t* “ would match anything starting with either “s” or “t”.
• get <vm> <property> : retrieves the value of a single property only. if the property can-
not be found, for example because the guest is not running, the following message is
shown:

no value set!

• set <vm> <property> [<value> [--flags <flags>]] : enables you to set a guest
property by specifying the keyword and value. if <value> is omitted, the property is
deleted. with --flags , you can specify additional behavior. you can combine several ﬂags
by separating them with commas.
– transient : the value will not be stored with the vm data when the vm exits.
– transreset : the value will be deleted as soon as the vm restarts or exits.
– rdonlyguest : the value can only be changed by the host, but the guest can only read
it.
– rdonlyhost : the value can only be changed by the guest, but the host can only read
it.
– readonly : the value cannot be changed at all.
• wait <vm> <pattern> --timeout <timeout> : waits for a particular value described by
the pattern string to change or to be deleted or created. the pattern rules are the same as
for the enumerate subcommand.
• delete <vm> <property> : deletes a guest property which has been set previously.

185

8 vboxmanage

8.32 vboxmanage guestcontrol
the guestcontrol commands enable control of the guest from the host. see chapter 4.9, guest
control of applications, page 84 for an introduction.
the guestcontrol command has two sets of subcommands. the ﬁrst set requires guest cre-
dentials to be speciﬁed, the second does not.
the ﬁrst set of subcommands is of the following form:

vboxmanage guestcontrol <uuid|vmname> <sub-command>
[--username <name> ]
[--passwordfile <file> | --password <password>]
[--domain <domain> ]
[-v|--verbose] [-q|quiet] ...

the common options are as follows:

[--username <name> ]
[--passwordfile <file> | --password <password>]
[--domain <domain> ]
[-v|--verbose] [-q|quiet]

the common options for the ﬁrst set of subcommands are explained in the following list.

<uuid|vmname>

speciﬁes the vm uuid or vm name. mandatory.

--username <name>

speciﬁes the user name on guest os under which the process should run. this user name
must already exist on the guest os. if unspeciﬁed, the host user name is used. optional

--passwordfile <file>|--password

speciﬁes the absolute path on guest ﬁle system of password ﬁle containing the password
for the speciﬁed user account or password for the speciﬁed user account. optional. if both
are omitted, empty password is assumed.

--domain <domain>

user domain for windows guests. optional.

-v|--verbose

makes the subcommand execution more verbose. optional

-q|--quiet

makes the subcommand execution quieter. optional.

the ﬁrst set of subcommands are as follows:

• run : executes a guest program, forwarding stdout, stderr, and stdin to and from the host
until it completes.

186

8 vboxmanage

vboxmanage guestcontrol <uuid|vmname> run [common-options]
--exe <path to executable> [--timeout <msec>]
[-e|--putenv <name>[=<value>]] [--unquoted-args]
[--ignore-operhaned-processes] [--profile]
[--no-wait-stdout|--wait-stdout]
[--no-wait-stderr|--wait-stderr]
[--dos2unix] [--unix2dos]
-- <program/arg0> [argument1] ... [argumentn]]

<uuid|vmname>

speciﬁes the vm uuid or vm name. mandatory.
--exe <path to executable>

speciﬁes the absolute path of the executable on the guest os ﬁle system. mandatory.
for example: c:\windows\system32\calc.exe .
--timeout <msec>

speciﬁes the maximum time, in microseconds, that the executable can run, during
which vboxmanage receives its output. optional. if unspeciﬁed, vboxmanage waits
indeﬁnitely for the process to end, or an error occurs.
-e|--putenv <name>=<value>

sets, modiﬁes, and unsets environment variables in the environment in which the
program will run. optional.
the guest process is created with the standard default guest os environment. use
this option to modify that default environment. to set or modify a variable use:
<name>=<value> . to unset a variable use: <name>=
any spaces in names and values should be enclosed by quotes.
to set, modify, and unset multiple variables, use multiple instances of the
--e|--putenv option.
--unquoted-args

disables escaped double quoting, such as \“fred\“, on arguments passed to the exe-
cuted program. optional.
--ignore-operhaned-processes

ignore orphaned processes. not yet implemented. optional.
--profile

use proﬁle. not yet implemented. optional.
--no-wait-stdout|--wait-stdout

does not wait or waits until the guest process ends and receives its exit code and
reason/ﬂags. in the case of --wait-stdout , vboxmanage receives its stdout while
the process runs. optional.
--no-wait-stderr|--wait-stderr

187

8 vboxmanage

does not wait or waits until the guest process ends and receives its exit code, error
messages, and ﬂags. in the case of --wait-stderr , vboxmanage receives its stderr
while the process runs. optional.
--dos2unix

converts output from dos/windows guests to unix/linux-compatible line endings,
cr + lf to lf. not yet implemented. optional.
--unix2dos

converts output from a unix/linux guests to dos/windows-compatible line endings,
lf to cr + lf. not yet implemented. optional.
[-- <program/arg0> [<argument1>] ... [<argumentn>]]

speciﬁes the program name, followed by one or more arguments to pass to the pro-
gram. optional.
any spaces in arguments should be enclosed by quotes.

note: on windows there are certain limitations for graphical applications. see chapter
14, known limitations, page 332.

examples of using the guestcontrol run command are as follows:

vboxmanage --nologo guestcontrol "my vm" run --exe "/bin/ls"
--username foo --passwordfile bar.txt --wait-exit --wait-stdout -- -l /usr

vboxmanage --nologo guestcontrol "my vm" run --exe "c:\\windows\\system32\\ipconfig.exe"
--username foo --passwordfile bar.txt --wait-exit --wait-stdout

note that the double backslashes in the second example are only required on unix hosts.

note: for certain commands a user name of an existing user account on the guest must
be speciﬁed. anonymous executions are not supported for security reasons. a user
account password, however, is optional and depends on the guest’s os security policy
or rules. if no password is speciﬁed for a given user name, an empty password will be
used. on certain oses like windows the security policy may needs to be adjusted in
order to allow user accounts with an empty password set. also, global domain rules
might apply and therefore cannot be changed.

starting at oracle vm virtualbox 4.1.2 guest process execution by default is limited to serve
up to ﬁve guest processes at a time. if a new guest process gets started which would exceed
this limit, the oldest not running guest process will be discarded in order to be able to run
that new process. also, retrieving output from this old guest process will not be possible
anymore then. if all ﬁve guest processes are still active and running, starting a new guest
process will result in an appropriate error message.
to raise or lower the guest process execution limit, either use the guest property
/virtualbox/guestadd/vboxservice/--control-procs-max-kept or vboxservice
command line by specifying --control-procs-max-kept needs to be modiﬁed. a restart
of the guest os is required afterwards. to serve unlimited guest processes, a value of 0
needs to be set, but this is not recommended.

188

oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.


oreated with a trial version of docotic.pdf.
